// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nd"
)

//template:end imports

//template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &NetworkDataSource{}
	_ datasource.DataSourceWithConfigure = &NetworkDataSource{}
)

func NewNetworkDataSource() datasource.DataSource {
	return &NetworkDataSource{}
}

type NetworkDataSource struct {
	client *nd.Client
}

func (d *NetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_network"
}

func (d *NetworkDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read a Network.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Computed:            true,
			},
			"fabric_name": schema.StringAttribute{
				MarkdownDescription: "The name of the fabric",
				Required:            true,
			},
			"network_name": schema.StringAttribute{
				MarkdownDescription: "The name of the network",
				Required:            true,
			},
			"display_name": schema.StringAttribute{
				MarkdownDescription: "Customized name of the network. By default, it will be same as the network name",
				Computed:            true,
			},
			"network_id": schema.Int64Attribute{
				MarkdownDescription: "VNI ID of the network",
				Computed:            true,
			},
			"network_template": schema.StringAttribute{
				MarkdownDescription: "The name of the network template",
				Computed:            true,
			},
			"network_extension_template": schema.StringAttribute{
				MarkdownDescription: "The name of the network extension template. Applicable to Switch(es) with role Border",
				Computed:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "The name of the vrf",
				Computed:            true,
			},
			"gateway_ipv4_address": schema.StringAttribute{
				MarkdownDescription: "Gateway IPv4 address, for example `192.0.2.1/24`",
				Computed:            true,
			},
			"vlan_id": schema.Int64Attribute{
				MarkdownDescription: "VLAN ID",
				Computed:            true,
			},
			"gateway_ipv6_address": schema.StringAttribute{
				MarkdownDescription: "Gateway IPv6 addresses, for example `2001:db8::1/64,2001:db9::1/64`",
				Computed:            true,
			},
			"layer2_only": schema.BoolAttribute{
				MarkdownDescription: "Layer-2 only flag",
				Computed:            true,
			},
			"arp_suppression": schema.BoolAttribute{
				MarkdownDescription: "ARP suppression is only supported if SVI is present when Layer-2-Only is not enabled. NX-OS Specific",
				Computed:            true,
			},
			"ingress_replication": schema.BoolAttribute{
				MarkdownDescription: "Ingress replication flag",
				Computed:            true,
			},
			"multicast_group": schema.StringAttribute{
				MarkdownDescription: "Multicast group address",
				Computed:            true,
			},
			"dhcp_relay_servers": schema.ListNestedAttribute{
				MarkdownDescription: "List of DHCP relay servers",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							MarkdownDescription: "Server IP V4 Address",
							Computed:            true,
						},
						"vrf": schema.StringAttribute{
							MarkdownDescription: "If management vrf, enter 'management'. If default/global vrf, enter 'default'.",
							Computed:            true,
						},
					},
				},
			},
			"dhcp_relay_loopback_id": schema.Int64Attribute{
				MarkdownDescription: "Loopback ID for DHCP Relay interface",
				Computed:            true,
			},
			"vlan_name": schema.StringAttribute{
				MarkdownDescription: "VLAN name",
				Computed:            true,
			},
			"interface_description": schema.StringAttribute{
				MarkdownDescription: "Interface description",
				Computed:            true,
			},
			"mtu": schema.Int64Attribute{
				MarkdownDescription: "Interface MTU",
				Computed:            true,
			},
			"loopback_routing_tag": schema.Int64Attribute{
				MarkdownDescription: "Loopback routing tag",
				Computed:            true,
			},
			"trm": schema.BoolAttribute{
				MarkdownDescription: "Enable Tenant Routed Multicast",
				Computed:            true,
			},
			"secondary_gateway_1": schema.StringAttribute{
				MarkdownDescription: "Secondary gateway 1",
				Computed:            true,
			},
			"secondary_gateway_2": schema.StringAttribute{
				MarkdownDescription: "Secondary gateway 2",
				Computed:            true,
			},
			"secondary_gateway_3": schema.StringAttribute{
				MarkdownDescription: "Secondary gateway 3",
				Computed:            true,
			},
			"secondary_gateway_4": schema.StringAttribute{
				MarkdownDescription: "Secondary gateway 4",
				Computed:            true,
			},
			"route_target_both": schema.BoolAttribute{
				MarkdownDescription: "L2 VNI Route-Target Both Enable",
				Computed:            true,
			},
			"netflow": schema.BoolAttribute{
				MarkdownDescription: "Netflow is supported only if it is enabled on fabric. For NX-OS only",
				Computed:            true,
			},
			"svi_netflow_monitor": schema.StringAttribute{
				MarkdownDescription: "Applicable only if 'Layer 2 Only' is not enabled. Provide monitor name defined in fabric setting for Layer 3 Record. For NX-OS only",
				Computed:            true,
			},
			"vlan_netflow_monitor": schema.StringAttribute{
				MarkdownDescription: "Provide monitor name defined in fabric setting for Layer 3 Record. For NX-OS only",
				Computed:            true,
			},
			"l3_gatway_border": schema.BoolAttribute{
				MarkdownDescription: "Enable L3 Gateway on Border",
				Computed:            true,
			},
			"attachments": schema.SetNestedAttribute{
				MarkdownDescription: "A list of attachments",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"serial_number": schema.StringAttribute{
							MarkdownDescription: "Serial number of switch to attach",
							Computed:            true,
						},
						"attach_switch_ports": schema.StringAttribute{
							MarkdownDescription: "Comma separated list of attached switchports",
							Computed:            true,
						},
						"detach_switch_ports": schema.StringAttribute{
							MarkdownDescription: "Comma separated list of detached switchports",
							Computed:            true,
						},
						"vlan_id": schema.Int64Attribute{
							MarkdownDescription: "Override VLAN ID. `-1` to use VLAN ID defined at VRF level",
							Computed:            true,
						},
						"freeform_config": schema.StringAttribute{
							MarkdownDescription: "This field covers any configuration not included in overlay templates which is needed as part of this VRF attachment",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *NetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*NdfcProviderData).Client
}

//template:end model

func (d *NetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config Network

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.Id.String()))

	res, err := d.client.Get(fmt.Sprintf("%v%v", config.getPath(), config.NetworkName.ValueString()))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}
	config.fromBody(ctx, res)
	config.Id = types.StringValue(config.FabricName.ValueString() + "/" + config.NetworkName.ValueString())

	res, err = d.client.Get(fmt.Sprintf("%vattachments?network-names=%v", config.getPath(), config.NetworkName.ValueString()))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve network attachments, got error: %s, %s", err, res.String()))
		return
	}
	config.fromBodyAttachments(ctx, res, true)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.Id.ValueString()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
