// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type InterfaceLoopback struct {
	Id                   types.String `tfsdk:"id"`
	SerialNumber         types.String `tfsdk:"serial_number"`
	InterfaceName        types.String `tfsdk:"interface_name"`
	Policy               types.String `tfsdk:"policy"`
	Vrf                  types.String `tfsdk:"vrf"`
	Ipv4Address          types.String `tfsdk:"ipv4_address"`
	Ipv6Address          types.String `tfsdk:"ipv6_address"`
	RouteMapTag          types.String `tfsdk:"route_map_tag"`
	InterfaceDescription types.String `tfsdk:"interface_description"`
	FreeformConfig       types.String `tfsdk:"freeform_config"`
	AdminState           types.Bool   `tfsdk:"admin_state"`
}

//template:end types

//template:begin getPath
func (data InterfaceLoopback) getPath() string {
	return "/lan-fabric/rest/interface"
}

//template:end getPath

func (data InterfaceLoopback) toBody(ctx context.Context) string {
	body := ""
	if !data.SerialNumber.IsNull() && !data.SerialNumber.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.serialNumber", data.SerialNumber.ValueString())
	}
	if !data.InterfaceName.IsNull() && !data.InterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.ifName", data.InterfaceName.ValueString())
	}
	if !data.Policy.IsNull() && !data.Policy.IsUnknown() {
		body, _ = sjson.Set(body, "policy", data.Policy.ValueString())
	}
	body, _ = sjson.Set(body, "interfaceType", "INTERFACE_LOOPBACK")
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.INTF_NAME", data.InterfaceName.ValueString())
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.INTF_VRF", data.Vrf.ValueString())
	if !data.Ipv4Address.IsNull() && !data.Ipv4Address.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.IP", data.Ipv4Address.ValueString())
	}
	if !data.Ipv6Address.IsNull() && !data.Ipv6Address.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.V6IP", data.Ipv6Address.ValueString())
	}
	if !data.RouteMapTag.IsNull() && !data.RouteMapTag.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ROUTE_MAP_TAG", data.RouteMapTag.ValueString())
	}
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.DESC", data.InterfaceDescription.ValueString())
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.CONF", data.FreeformConfig.ValueString())
	if !data.AdminState.IsNull() && !data.AdminState.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ADMIN_STATE", fmt.Sprint(data.AdminState.ValueBool()))
	}
	return body
}

func (data *InterfaceLoopback) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("0.interfaces.0.serialNumber"); value.Exists() && value.String() != "" {
		data.SerialNumber = types.StringValue(value.String())
	} else {
		data.SerialNumber = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.ifName"); value.Exists() && value.String() != "" {
		data.InterfaceName = types.StringValue(value.String())
	} else {
		data.InterfaceName = types.StringNull()
	}
	if value := res.Get("0.policy"); value.Exists() && value.String() != "" {
		data.Policy = types.StringValue(value.String())
	} else {
		data.Policy = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.INTF_VRF"); value.Exists() && value.String() != "" {
		data.Vrf = types.StringValue(value.String())
	} else {
		data.Vrf = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.IP"); value.Exists() && value.String() != "" {
		data.Ipv4Address = types.StringValue(value.String())
	} else {
		data.Ipv4Address = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.V6IP"); value.Exists() && value.String() != "" {
		data.Ipv6Address = types.StringValue(value.String())
	} else {
		data.Ipv6Address = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ROUTE_MAP_TAG"); value.Exists() && value.String() != "" {
		data.RouteMapTag = types.StringValue(value.String())
	} else {
		data.RouteMapTag = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.DESC"); value.Exists() && value.String() != "" {
		data.InterfaceDescription = types.StringValue(value.String())
	} else {
		data.InterfaceDescription = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.CONF"); value.Exists() && value.String() != "" {
		data.FreeformConfig = types.StringValue(value.String())
	} else {
		data.FreeformConfig = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ADMIN_STATE"); value.Exists() && value.String() != "" {
		data.AdminState = types.BoolValue(value.Bool())
	} else {
		data.AdminState = types.BoolNull()
	}
}
