// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

//template:begin testAcc
func TestAccNdfcInterfaceEthernet(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccNdfcInterfaceEthernetConfigMinimal,
			},
			{
				Config: testAccNdfcInterfaceEthernetConfigAll,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "serial_number", "9DBYO6WQJ46"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "interface_name", "Ethernet1/13"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "policy", "int_access_host"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "bpdu_guard", "true"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "port_type_fast", "false"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "mtu", "default"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "speed", "Auto"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "access_vlan", "500"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "interface_description", "My interface description"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "orphan_port", "false"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "freeform_config", "delay 200"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "admin_state", "false"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "ptp", "false"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "netflow", "false"),
					resource.TestCheckResourceAttr("ndfc_interface_ethernet.test", "allowed_vlans", "10-20"),
				),
			},
			{
				ResourceName:  "ndfc_interface_ethernet.test",
				ImportState:   true,
				ImportStateId: "9DBYO6WQJ46:Ethernet1/13",
			},
		},
	})
}

//template:end testAcc

const testAccNdfcInterfaceEthernetConfigMinimal = `

resource "ndfc_interface_ethernet" "test" {
	serial_number = "9DBYO6WQJ46"
	interface_name = "Ethernet1/13"
	allowed_vlans = "none"
}
`

//template:begin testAccConfigAll
const testAccNdfcInterfaceEthernetConfigAll = `

resource "ndfc_interface_ethernet" "test" {
	serial_number = "9DBYO6WQJ46"
	interface_name = "Ethernet1/13"
	policy = "int_access_host"
	bpdu_guard = "true"
	port_type_fast = false
	mtu = "default"
	speed = "Auto"
	access_vlan = 500
	interface_description = "My interface description"
	orphan_port = false
	freeform_config = "delay 200"
	admin_state = false
	ptp = false
	netflow = false
	allowed_vlans = "10-20"
}
`

//template:end testAccConfigAll
