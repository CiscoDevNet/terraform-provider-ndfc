// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nd"
)

//template:end imports

//template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &InterfaceEthernetDataSource{}
	_ datasource.DataSourceWithConfigure = &InterfaceEthernetDataSource{}
)

func NewInterfaceEthernetDataSource() datasource.DataSource {
	return &InterfaceEthernetDataSource{}
}

type InterfaceEthernetDataSource struct {
	client *nd.Client
}

func (d *InterfaceEthernetDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_ethernet"
}

func (d *InterfaceEthernetDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read a Interface Ethernet.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Computed:            true,
			},
			"serial_number": schema.StringAttribute{
				MarkdownDescription: "Serial number of switch to configure",
				Required:            true,
			},
			"interface_name": schema.StringAttribute{
				MarkdownDescription: "Name of the Interface. Example: `Ethernet1/3`",
				Required:            true,
			},
			"policy": schema.StringAttribute{
				MarkdownDescription: "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				Computed:            true,
			},
			"bpdu_guard": schema.StringAttribute{
				MarkdownDescription: "Enable spanning-tree bpduguard: true='enable', false='disable', no='return to default settings'",
				Computed:            true,
			},
			"port_type_fast": schema.BoolAttribute{
				MarkdownDescription: "Enable spanning-tree edge port behavior",
				Computed:            true,
			},
			"mtu": schema.StringAttribute{
				MarkdownDescription: "MTU for the interface",
				Computed:            true,
			},
			"speed": schema.StringAttribute{
				MarkdownDescription: "Interface speed",
				Computed:            true,
			},
			"access_vlan": schema.Int64Attribute{
				MarkdownDescription: "Access VLAN ID",
				Computed:            true,
			},
			"interface_description": schema.StringAttribute{
				MarkdownDescription: "Interface description",
				Computed:            true,
			},
			"orphan_port": schema.BoolAttribute{
				MarkdownDescription: "If enabled, configure the interface as a vPC orphan port to be suspended by the secondary peer in vPC failures",
				Computed:            true,
			},
			"freeform_config": schema.StringAttribute{
				MarkdownDescription: "Additional CLI for the interface",
				Computed:            true,
			},
			"admin_state": schema.BoolAttribute{
				MarkdownDescription: "Enable or disable the interface",
				Computed:            true,
			},
			"ptp": schema.BoolAttribute{
				MarkdownDescription: "Enable PTP",
				Computed:            true,
			},
			"netflow": schema.BoolAttribute{
				MarkdownDescription: "Netflow is supported only if it is enabled on fabric",
				Computed:            true,
			},
			"netflow_monitor": schema.StringAttribute{
				MarkdownDescription: "Provide the Layer 2 Monitor Name",
				Computed:            true,
			},
			"netflow_sampler": schema.StringAttribute{
				MarkdownDescription: "Netflow sampler name, applicable to N7K only",
				Computed:            true,
			},
			"allowed_vlans": schema.StringAttribute{
				MarkdownDescription: "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
				Computed:            true,
			},
			"native_vlan": schema.Int64Attribute{
				MarkdownDescription: "Set native VLAN for the interface",
				Computed:            true,
			},
		},
	}
}

func (d *InterfaceEthernetDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*NdfcProviderData).Client
}

//template:end model

func (d *InterfaceEthernetDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config InterfaceEthernet

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.Id.String()))

	res, err := d.client.Get(fmt.Sprintf("%v?serialNumber=%v&ifName=%v", config.getPath(), config.SerialNumber.ValueString(), config.InterfaceName.ValueString()))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	config.fromBody(ctx, res)
	config.Id = types.StringValue(config.SerialNumber.ValueString() + "/" + config.InterfaceName.ValueString())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.Id.ValueString()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
