// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-nd"
)

//template:end imports

//template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &VRFDataSource{}
	_ datasource.DataSourceWithConfigure = &VRFDataSource{}
)

func NewVRFDataSource() datasource.DataSource {
	return &VRFDataSource{}
}

type VRFDataSource struct {
	client *nd.Client
}

func (d *VRFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vrf"
}

func (d *VRFDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read a VRF.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Computed:            true,
			},
			"fabric_name": schema.StringAttribute{
				MarkdownDescription: "The name of the fabric",
				Required:            true,
			},
			"vrf_name": schema.StringAttribute{
				MarkdownDescription: "The name of the VRF",
				Required:            true,
			},
			"vrf_template": schema.StringAttribute{
				MarkdownDescription: "The name of the VRF template",
				Computed:            true,
			},
			"vrf_extension_template": schema.StringAttribute{
				MarkdownDescription: "The name of the VRF extension template",
				Computed:            true,
			},
			"vrf_id": schema.Int64Attribute{
				MarkdownDescription: "VNI ID of VRF",
				Computed:            true,
			},
			"vlan_id": schema.Int64Attribute{
				MarkdownDescription: "VLAN ID",
				Computed:            true,
			},
			"vlan_name": schema.StringAttribute{
				MarkdownDescription: "VLAN name",
				Computed:            true,
			},
			"interface_description": schema.StringAttribute{
				MarkdownDescription: "Interface description",
				Computed:            true,
			},
			"vrf_description": schema.StringAttribute{
				MarkdownDescription: "VRF description",
				Computed:            true,
			},
			"mtu": schema.Int64Attribute{
				MarkdownDescription: "Interface MTU",
				Computed:            true,
			},
			"loopback_routing_tag": schema.Int64Attribute{
				MarkdownDescription: "Loopback routing tag",
				Computed:            true,
			},
			"redistribute_direct_route_map": schema.StringAttribute{
				MarkdownDescription: "Redistribute direct route map",
				Computed:            true,
			},
			"max_bgp_paths": schema.Int64Attribute{
				MarkdownDescription: "Maximum BGP paths",
				Computed:            true,
			},
			"max_ibgp_paths": schema.Int64Attribute{
				MarkdownDescription: "Maximum iBGP paths",
				Computed:            true,
			},
			"ipv6_link_local": schema.BoolAttribute{
				MarkdownDescription: "Enables IPv6 link-local Option under VRF SVI",
				Computed:            true,
			},
			"trm": schema.BoolAttribute{
				MarkdownDescription: "Enable Tenant Routed Multicast",
				Computed:            true,
			},
			"no_rp": schema.BoolAttribute{
				MarkdownDescription: "There is no RP as only SSM is used",
				Computed:            true,
			},
			"rp_external": schema.BoolAttribute{
				MarkdownDescription: "Is RP external to the fabric",
				Computed:            true,
			},
			"rp_address": schema.StringAttribute{
				MarkdownDescription: "IPv4 address",
				Computed:            true,
			},
			"rp_loopback_id": schema.Int64Attribute{
				MarkdownDescription: "RP loopback ID",
				Computed:            true,
			},
			"underlay_multicast_address": schema.StringAttribute{
				MarkdownDescription: "IPv4 Multicast Address. Applicable only when TRM is enabled.",
				Computed:            true,
			},
			"overlay_multicast_groups": schema.StringAttribute{
				MarkdownDescription: "Overlay multicast groups",
				Computed:            true,
			},
			"mvpn_inter_as": schema.BoolAttribute{
				MarkdownDescription: "Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific",
				Computed:            true,
			},
			"trm_bgw_msite": schema.BoolAttribute{
				MarkdownDescription: "Enable TRM on Border Gateway Multisite",
				Computed:            true,
			},
			"advertise_host_routes": schema.BoolAttribute{
				MarkdownDescription: "Flag to Control Advertisement of /32 and /128 Routes to Edge Routers",
				Computed:            true,
			},
			"advertise_default_route": schema.BoolAttribute{
				MarkdownDescription: "Flag to Control Advertisement of Default Route Internally",
				Computed:            true,
			},
			"configure_static_default_route": schema.BoolAttribute{
				MarkdownDescription: "Flag to Control Static Default Route Configuration",
				Computed:            true,
			},
			"bgp_password": schema.StringAttribute{
				MarkdownDescription: "VRF Lite BGP neighbor password (Hex String)",
				Computed:            true,
			},
			"bgp_password_type": schema.StringAttribute{
				MarkdownDescription: "VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco",
				Computed:            true,
			},
			"netflow": schema.BoolAttribute{
				MarkdownDescription: "For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only",
				Computed:            true,
			},
			"netflow_monitor": schema.StringAttribute{
				MarkdownDescription: "Netflow monitor. For NX-OS only",
				Computed:            true,
			},
			"disable_rt_auto": schema.BoolAttribute{
				MarkdownDescription: "Applicable to IPv4, IPv6 VPN/EVPN/MVPN",
				Computed:            true,
			},
			"route_target_import": schema.StringAttribute{
				MarkdownDescription: "For VPN Routes Import, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_export": schema.StringAttribute{
				MarkdownDescription: "For VPN Routes Export, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_import_evpn": schema.StringAttribute{
				MarkdownDescription: "For EVPN Routes Import, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_export_evpn": schema.StringAttribute{
				MarkdownDescription: "For EVPN Routes Export, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_import_mvpn": schema.StringAttribute{
				MarkdownDescription: "For MVPN Routes Import, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_export_mvpn": schema.StringAttribute{
				MarkdownDescription: "For MVPN Routes Export, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_import_cloud_evpn": schema.StringAttribute{
				MarkdownDescription: "For Cloud EVPN Routes Import, One or a Comma Separated List",
				Computed:            true,
			},
			"route_target_export_cloud_evpn": schema.StringAttribute{
				MarkdownDescription: "For Cloud EVPN Routes Export, One or a Comma Separated List",
				Computed:            true,
			},
			"attachments": schema.SetNestedAttribute{
				MarkdownDescription: "A list of attachments",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"serial_number": schema.StringAttribute{
							MarkdownDescription: "Serial number of switch to attach",
							Computed:            true,
						},
						"vlan_id": schema.Int64Attribute{
							MarkdownDescription: "Override VLAN ID. `-1` to use VLAN ID defined at VRF level",
							Computed:            true,
						},
						"freeform_config": schema.StringAttribute{
							MarkdownDescription: "This field covers any configuration not included in overlay templates which is needed as part of this VRF attachment",
							Computed:            true,
						},
						"loopback_id": schema.Int64Attribute{
							MarkdownDescription: "Override loopback ID",
							Computed:            true,
						},
						"loopback_ipv4": schema.StringAttribute{
							MarkdownDescription: "Override loopback IPv4 address",
							Computed:            true,
						},
						"loopback_ipv6": schema.StringAttribute{
							MarkdownDescription: "Override loopback IPv6 address",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *VRFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*NdfcProviderData).Client
}

//template:end model

func (d *VRFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config VRF

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.Id.String()))

	res, err := d.client.Get(fmt.Sprintf("%v%v", config.getPath(), config.VrfName.ValueString()))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}
	config.fromBody(ctx, res)
	config.Id = types.StringValue(config.FabricName.ValueString() + "/" + config.VrfName.ValueString())

	res, err = d.client.Get(fmt.Sprintf("%vattachments?vrf-names=%v", config.getPath(), config.VrfName.ValueString()))
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve VRF attachments, got error: %s, %s", err, res.String()))
		return
	}
	config.fromBodyAttachments(ctx, res, true)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.Id.ValueString()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
