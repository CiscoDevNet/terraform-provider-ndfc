// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_inventory_reachability

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InventoryReachabilityDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_protocol": schema.StringAttribute{
				Required:            true,
				Description:         "The authentication protocol to use for the devices",
				MarkdownDescription: "The authentication protocol to use for the devices",
				Validators: []validator.String{
					stringvalidator.OneOf("md5", "sha", "md5_des", "md5_aes", "sha_des", "sha_aes"),
				},
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The Terraform Unique Identifier for the Inventory Devices resource",
				MarkdownDescription: "The Terraform Unique Identifier for the Inventory Devices resource",
			},
			"max_hops": schema.Int64Attribute{
				Required:            true,
				Description:         "The maximum number of hops to use during the discovery of devices",
				MarkdownDescription: "The maximum number of hops to use during the discovery of devices",
			},
			"password": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				Description:         "The password to use for the devices",
				MarkdownDescription: "The password to use for the devices",
			},
			"preserve_config": schema.BoolAttribute{
				Required:            true,
				Description:         "Preserve the configuration of the devices",
				MarkdownDescription: "Preserve the configuration of the devices",
			},
			"reachability_details": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"authenticated": schema.BoolAttribute{
							Computed:            true,
							Description:         "The authenticated status of the device",
							MarkdownDescription: "The authenticated status of the device",
						},
						"device_index": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC device index",
							MarkdownDescription: "The NDFC device index",
						},
						"hostname": schema.StringAttribute{
							Computed:            true,
							Description:         "The hostname of the device",
							MarkdownDescription: "The hostname of the device",
						},
						"ip_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The ip address of the device",
							MarkdownDescription: "The ip address of the device",
						},
						"known": schema.BoolAttribute{
							Computed:            true,
							Description:         "The known status of the device",
							MarkdownDescription: "The known status of the device",
						},
						"last_changed": schema.StringAttribute{
							Computed:            true,
							Description:         "The last change of the device",
							MarkdownDescription: "The last change of the device",
						},
						"model": schema.StringAttribute{
							Computed:            true,
							Description:         "The model of the device",
							MarkdownDescription: "The model of the device",
						},
						"reachable": schema.BoolAttribute{
							Computed:            true,
							Description:         "The reachable status of the device",
							MarkdownDescription: "The reachable status of the device",
						},
						"selectable": schema.BoolAttribute{
							Computed:            true,
							Description:         "The selectable status of the device",
							MarkdownDescription: "The selectable status of the device",
						},
						"serial_number": schema.StringAttribute{
							Computed:            true,
							Description:         "The serial number of the device",
							MarkdownDescription: "The serial number of the device",
						},
						"status_reason": schema.StringAttribute{
							Computed:            true,
							Description:         "The status reason of the device",
							MarkdownDescription: "The status reason of the device",
						},
						"valid": schema.BoolAttribute{
							Computed:            true,
							Description:         "The valid status of the device",
							MarkdownDescription: "The valid status of the device",
						},
						"vdc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC ID of the device",
							MarkdownDescription: "The VDC ID of the device",
						},
						"vdc_mac": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC MAC of the device",
							MarkdownDescription: "The VDC MAC of the device",
						},
						"version": schema.StringAttribute{
							Computed:            true,
							Description:         "The software version of the device",
							MarkdownDescription: "The software version of the device",
						},
					},
					CustomType: ReachabilityDetailsType{
						ObjectType: types.ObjectType{
							AttrTypes: ReachabilityDetailsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The reachability details of the devices",
				MarkdownDescription: "The reachability details of the devices",
			},
			"seed_ip": schema.StringAttribute{
				Required:            true,
				Description:         "The seed IP address to use for the discovery devices",
				MarkdownDescription: "The seed IP address to use for the discovery devices",
			},
			"set_as_individual_device_write_credential": schema.BoolAttribute{
				Required:            true,
				Description:         "Set and use discovery credentials for LAN devices",
				MarkdownDescription: "Set and use discovery credentials for LAN devices",
			},
			"username": schema.StringAttribute{
				Required:            true,
				Description:         "The username to use for the devices",
				MarkdownDescription: "The username to use for the devices",
			},
		},
	}
}

type InventoryReachabilityModel struct {
	AuthProtocol                         types.String `tfsdk:"auth_protocol"`
	FabricName                           types.String `tfsdk:"fabric_name"`
	Id                                   types.String `tfsdk:"id"`
	MaxHops                              types.Int64  `tfsdk:"max_hops"`
	Password                             types.String `tfsdk:"password"`
	PreserveConfig                       types.Bool   `tfsdk:"preserve_config"`
	ReachabilityDetails                  types.Set    `tfsdk:"reachability_details"`
	SeedIp                               types.String `tfsdk:"seed_ip"`
	SetAsIndividualDeviceWriteCredential types.Bool   `tfsdk:"set_as_individual_device_write_credential"`
	Username                             types.String `tfsdk:"username"`
}

var _ basetypes.ObjectTypable = ReachabilityDetailsType{}

type ReachabilityDetailsType struct {
	basetypes.ObjectType
}

func (t ReachabilityDetailsType) Equal(o attr.Type) bool {
	other, ok := o.(ReachabilityDetailsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ReachabilityDetailsType) String() string {
	return "ReachabilityDetailsType"
}

func (t ReachabilityDetailsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	authenticatedAttribute, ok := attributes["authenticated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`authenticated is missing from object`)

		return nil, diags
	}

	authenticatedVal, ok := authenticatedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`authenticated expected to be basetypes.BoolValue, was: %T`, authenticatedAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return nil, diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return nil, diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	knownAttribute, ok := attributes["known"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`known is missing from object`)

		return nil, diags
	}

	knownVal, ok := knownAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`known expected to be basetypes.BoolValue, was: %T`, knownAttribute))
	}

	lastChangedAttribute, ok := attributes["last_changed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_changed is missing from object`)

		return nil, diags
	}

	lastChangedVal, ok := lastChangedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_changed expected to be basetypes.StringValue, was: %T`, lastChangedAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	reachableAttribute, ok := attributes["reachable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reachable is missing from object`)

		return nil, diags
	}

	reachableVal, ok := reachableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reachable expected to be basetypes.BoolValue, was: %T`, reachableAttribute))
	}

	selectableAttribute, ok := attributes["selectable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`selectable is missing from object`)

		return nil, diags
	}

	selectableVal, ok := selectableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`selectable expected to be basetypes.BoolValue, was: %T`, selectableAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	statusReasonAttribute, ok := attributes["status_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_reason is missing from object`)

		return nil, diags
	}

	statusReasonVal, ok := statusReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_reason expected to be basetypes.StringValue, was: %T`, statusReasonAttribute))
	}

	validAttribute, ok := attributes["valid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`valid is missing from object`)

		return nil, diags
	}

	validVal, ok := validAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`valid expected to be basetypes.BoolValue, was: %T`, validAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return nil, diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return nil, diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ReachabilityDetailsValue{
		Authenticated: authenticatedVal,
		DeviceIndex:   deviceIndexVal,
		Hostname:      hostnameVal,
		IpAddress:     ipAddressVal,
		Known:         knownVal,
		LastChanged:   lastChangedVal,
		Model:         modelVal,
		Reachable:     reachableVal,
		Selectable:    selectableVal,
		SerialNumber:  serialNumberVal,
		StatusReason:  statusReasonVal,
		Valid:         validVal,
		VdcId:         vdcIdVal,
		VdcMac:        vdcMacVal,
		Version:       versionVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewReachabilityDetailsValueNull() ReachabilityDetailsValue {
	return ReachabilityDetailsValue{
		state: attr.ValueStateNull,
	}
}

func NewReachabilityDetailsValueUnknown() ReachabilityDetailsValue {
	return ReachabilityDetailsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewReachabilityDetailsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ReachabilityDetailsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ReachabilityDetailsValue Attribute Value",
				"While creating a ReachabilityDetailsValue value, a missing attribute value was detected. "+
					"A ReachabilityDetailsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReachabilityDetailsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ReachabilityDetailsValue Attribute Type",
				"While creating a ReachabilityDetailsValue value, an invalid attribute value was detected. "+
					"A ReachabilityDetailsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReachabilityDetailsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ReachabilityDetailsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ReachabilityDetailsValue Attribute Value",
				"While creating a ReachabilityDetailsValue value, an extra attribute value was detected. "+
					"A ReachabilityDetailsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ReachabilityDetailsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewReachabilityDetailsValueUnknown(), diags
	}

	authenticatedAttribute, ok := attributes["authenticated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`authenticated is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	authenticatedVal, ok := authenticatedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`authenticated expected to be basetypes.BoolValue, was: %T`, authenticatedAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	knownAttribute, ok := attributes["known"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`known is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	knownVal, ok := knownAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`known expected to be basetypes.BoolValue, was: %T`, knownAttribute))
	}

	lastChangedAttribute, ok := attributes["last_changed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_changed is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	lastChangedVal, ok := lastChangedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_changed expected to be basetypes.StringValue, was: %T`, lastChangedAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	reachableAttribute, ok := attributes["reachable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reachable is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	reachableVal, ok := reachableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reachable expected to be basetypes.BoolValue, was: %T`, reachableAttribute))
	}

	selectableAttribute, ok := attributes["selectable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`selectable is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	selectableVal, ok := selectableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`selectable expected to be basetypes.BoolValue, was: %T`, selectableAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	statusReasonAttribute, ok := attributes["status_reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_reason is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	statusReasonVal, ok := statusReasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_reason expected to be basetypes.StringValue, was: %T`, statusReasonAttribute))
	}

	validAttribute, ok := attributes["valid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`valid is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	validVal, ok := validAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`valid expected to be basetypes.BoolValue, was: %T`, validAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewReachabilityDetailsValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewReachabilityDetailsValueUnknown(), diags
	}

	return ReachabilityDetailsValue{
		Authenticated: authenticatedVal,
		DeviceIndex:   deviceIndexVal,
		Hostname:      hostnameVal,
		IpAddress:     ipAddressVal,
		Known:         knownVal,
		LastChanged:   lastChangedVal,
		Model:         modelVal,
		Reachable:     reachableVal,
		Selectable:    selectableVal,
		SerialNumber:  serialNumberVal,
		StatusReason:  statusReasonVal,
		Valid:         validVal,
		VdcId:         vdcIdVal,
		VdcMac:        vdcMacVal,
		Version:       versionVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewReachabilityDetailsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ReachabilityDetailsValue {
	object, diags := NewReachabilityDetailsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewReachabilityDetailsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ReachabilityDetailsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewReachabilityDetailsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewReachabilityDetailsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewReachabilityDetailsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewReachabilityDetailsValueMust(ReachabilityDetailsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ReachabilityDetailsType) ValueType(ctx context.Context) attr.Value {
	return ReachabilityDetailsValue{}
}

var _ basetypes.ObjectValuable = ReachabilityDetailsValue{}

type ReachabilityDetailsValue struct {
	Authenticated basetypes.BoolValue   `tfsdk:"authenticated"`
	DeviceIndex   basetypes.StringValue `tfsdk:"device_index"`
	Hostname      basetypes.StringValue `tfsdk:"hostname"`
	IpAddress     basetypes.StringValue `tfsdk:"ip_address"`
	Known         basetypes.BoolValue   `tfsdk:"known"`
	LastChanged   basetypes.StringValue `tfsdk:"last_changed"`
	Model         basetypes.StringValue `tfsdk:"model"`
	Reachable     basetypes.BoolValue   `tfsdk:"reachable"`
	Selectable    basetypes.BoolValue   `tfsdk:"selectable"`
	SerialNumber  basetypes.StringValue `tfsdk:"serial_number"`
	StatusReason  basetypes.StringValue `tfsdk:"status_reason"`
	Valid         basetypes.BoolValue   `tfsdk:"valid"`
	VdcId         basetypes.StringValue `tfsdk:"vdc_id"`
	VdcMac        basetypes.StringValue `tfsdk:"vdc_mac"`
	Version       basetypes.StringValue `tfsdk:"version"`
	state         attr.ValueState
}

func (v ReachabilityDetailsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 15)

	var val tftypes.Value
	var err error

	attrTypes["authenticated"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["device_index"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["known"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["last_changed"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["model"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["reachable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["selectable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status_reason"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["valid"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["vdc_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vdc_mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 15)

		val, err = v.Authenticated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["authenticated"] = val

		val, err = v.DeviceIndex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_index"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.IpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address"] = val

		val, err = v.Known.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["known"] = val

		val, err = v.LastChanged.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_changed"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.Reachable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["reachable"] = val

		val, err = v.Selectable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["selectable"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.StatusReason.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status_reason"] = val

		val, err = v.Valid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["valid"] = val

		val, err = v.VdcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_id"] = val

		val, err = v.VdcMac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_mac"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ReachabilityDetailsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ReachabilityDetailsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ReachabilityDetailsValue) String() string {
	return "ReachabilityDetailsValue"
}

func (v ReachabilityDetailsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"authenticated": basetypes.BoolType{},
		"device_index":  basetypes.StringType{},
		"hostname":      basetypes.StringType{},
		"ip_address":    basetypes.StringType{},
		"known":         basetypes.BoolType{},
		"last_changed":  basetypes.StringType{},
		"model":         basetypes.StringType{},
		"reachable":     basetypes.BoolType{},
		"selectable":    basetypes.BoolType{},
		"serial_number": basetypes.StringType{},
		"status_reason": basetypes.StringType{},
		"valid":         basetypes.BoolType{},
		"vdc_id":        basetypes.StringType{},
		"vdc_mac":       basetypes.StringType{},
		"version":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"authenticated": v.Authenticated,
			"device_index":  v.DeviceIndex,
			"hostname":      v.Hostname,
			"ip_address":    v.IpAddress,
			"known":         v.Known,
			"last_changed":  v.LastChanged,
			"model":         v.Model,
			"reachable":     v.Reachable,
			"selectable":    v.Selectable,
			"serial_number": v.SerialNumber,
			"status_reason": v.StatusReason,
			"valid":         v.Valid,
			"vdc_id":        v.VdcId,
			"vdc_mac":       v.VdcMac,
			"version":       v.Version,
		})

	return objVal, diags
}

func (v ReachabilityDetailsValue) Equal(o attr.Value) bool {
	other, ok := o.(ReachabilityDetailsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Authenticated.Equal(other.Authenticated) {
		return false
	}

	if !v.DeviceIndex.Equal(other.DeviceIndex) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.IpAddress.Equal(other.IpAddress) {
		return false
	}

	if !v.Known.Equal(other.Known) {
		return false
	}

	if !v.LastChanged.Equal(other.LastChanged) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.Reachable.Equal(other.Reachable) {
		return false
	}

	if !v.Selectable.Equal(other.Selectable) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.StatusReason.Equal(other.StatusReason) {
		return false
	}

	if !v.Valid.Equal(other.Valid) {
		return false
	}

	if !v.VdcId.Equal(other.VdcId) {
		return false
	}

	if !v.VdcMac.Equal(other.VdcMac) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v ReachabilityDetailsValue) Type(ctx context.Context) attr.Type {
	return ReachabilityDetailsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ReachabilityDetailsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"authenticated": basetypes.BoolType{},
		"device_index":  basetypes.StringType{},
		"hostname":      basetypes.StringType{},
		"ip_address":    basetypes.StringType{},
		"known":         basetypes.BoolType{},
		"last_changed":  basetypes.StringType{},
		"model":         basetypes.StringType{},
		"reachable":     basetypes.BoolType{},
		"selectable":    basetypes.BoolType{},
		"serial_number": basetypes.StringType{},
		"status_reason": basetypes.StringType{},
		"valid":         basetypes.BoolType{},
		"vdc_id":        basetypes.StringType{},
		"vdc_mac":       basetypes.StringType{},
		"version":       basetypes.StringType{},
	}
}
