// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_fabric

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func FabricDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"fabrics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"as_number": schema.StringAttribute{
							Computed:            true,
							Description:         "AS Number",
							MarkdownDescription: "AS Number",
						},
						"device_type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of Device",
							MarkdownDescription: "Type of Device",
						},
						"fabric_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Fabric Id",
							MarkdownDescription: "Fabric Id",
						},
						"fabric_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Fabric Name",
							MarkdownDescription: "Fabric Name",
						},
						"fabric_technology": schema.StringAttribute{
							Computed:            true,
							Description:         "Fabric Technology",
							MarkdownDescription: "Fabric Technology",
						},
						"fabric_type": schema.StringAttribute{
							Computed:            true,
							Description:         "Fabric Type",
							MarkdownDescription: "Fabric Type",
						},
						"provision_mode": schema.StringAttribute{
							Computed:            true,
							Description:         "Provision Mode",
							MarkdownDescription: "Provision Mode",
						},
						"site_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Site ID",
							MarkdownDescription: "Site ID",
						},
					},
					CustomType: FabricsType{
						ObjectType: types.ObjectType{
							AttrTypes: FabricsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of Fabrics",
				MarkdownDescription: "List of Fabrics",
			},
		},
	}
}

type FabricModel struct {
	Fabrics types.List `tfsdk:"fabrics"`
}

var _ basetypes.ObjectTypable = FabricsType{}

type FabricsType struct {
	basetypes.ObjectType
}

func (t FabricsType) Equal(o attr.Type) bool {
	other, ok := o.(FabricsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FabricsType) String() string {
	return "FabricsType"
}

func (t FabricsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	asNumberAttribute, ok := attributes["as_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`as_number is missing from object`)

		return nil, diags
	}

	asNumberVal, ok := asNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`as_number expected to be basetypes.StringValue, was: %T`, asNumberAttribute))
	}

	deviceTypeAttribute, ok := attributes["device_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_type is missing from object`)

		return nil, diags
	}

	deviceTypeVal, ok := deviceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_type expected to be basetypes.StringValue, was: %T`, deviceTypeAttribute))
	}

	fabricIdAttribute, ok := attributes["fabric_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_id is missing from object`)

		return nil, diags
	}

	fabricIdVal, ok := fabricIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_id expected to be basetypes.StringValue, was: %T`, fabricIdAttribute))
	}

	fabricNameAttribute, ok := attributes["fabric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_name is missing from object`)

		return nil, diags
	}

	fabricNameVal, ok := fabricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_name expected to be basetypes.StringValue, was: %T`, fabricNameAttribute))
	}

	fabricTechnologyAttribute, ok := attributes["fabric_technology"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_technology is missing from object`)

		return nil, diags
	}

	fabricTechnologyVal, ok := fabricTechnologyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_technology expected to be basetypes.StringValue, was: %T`, fabricTechnologyAttribute))
	}

	fabricTypeAttribute, ok := attributes["fabric_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_type is missing from object`)

		return nil, diags
	}

	fabricTypeVal, ok := fabricTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_type expected to be basetypes.StringValue, was: %T`, fabricTypeAttribute))
	}

	provisionModeAttribute, ok := attributes["provision_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provision_mode is missing from object`)

		return nil, diags
	}

	provisionModeVal, ok := provisionModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provision_mode expected to be basetypes.StringValue, was: %T`, provisionModeAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return nil, diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FabricsValue{
		AsNumber:         asNumberVal,
		DeviceType:       deviceTypeVal,
		FabricId:         fabricIdVal,
		FabricName:       fabricNameVal,
		FabricTechnology: fabricTechnologyVal,
		FabricType:       fabricTypeVal,
		ProvisionMode:    provisionModeVal,
		SiteId:           siteIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewFabricsValueNull() FabricsValue {
	return FabricsValue{
		state: attr.ValueStateNull,
	}
}

func NewFabricsValueUnknown() FabricsValue {
	return FabricsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFabricsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FabricsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FabricsValue Attribute Value",
				"While creating a FabricsValue value, a missing attribute value was detected. "+
					"A FabricsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FabricsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FabricsValue Attribute Type",
				"While creating a FabricsValue value, an invalid attribute value was detected. "+
					"A FabricsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FabricsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FabricsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FabricsValue Attribute Value",
				"While creating a FabricsValue value, an extra attribute value was detected. "+
					"A FabricsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FabricsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFabricsValueUnknown(), diags
	}

	asNumberAttribute, ok := attributes["as_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`as_number is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	asNumberVal, ok := asNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`as_number expected to be basetypes.StringValue, was: %T`, asNumberAttribute))
	}

	deviceTypeAttribute, ok := attributes["device_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_type is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	deviceTypeVal, ok := deviceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_type expected to be basetypes.StringValue, was: %T`, deviceTypeAttribute))
	}

	fabricIdAttribute, ok := attributes["fabric_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_id is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	fabricIdVal, ok := fabricIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_id expected to be basetypes.StringValue, was: %T`, fabricIdAttribute))
	}

	fabricNameAttribute, ok := attributes["fabric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_name is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	fabricNameVal, ok := fabricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_name expected to be basetypes.StringValue, was: %T`, fabricNameAttribute))
	}

	fabricTechnologyAttribute, ok := attributes["fabric_technology"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_technology is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	fabricTechnologyVal, ok := fabricTechnologyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_technology expected to be basetypes.StringValue, was: %T`, fabricTechnologyAttribute))
	}

	fabricTypeAttribute, ok := attributes["fabric_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_type is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	fabricTypeVal, ok := fabricTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_type expected to be basetypes.StringValue, was: %T`, fabricTypeAttribute))
	}

	provisionModeAttribute, ok := attributes["provision_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provision_mode is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	provisionModeVal, ok := provisionModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provision_mode expected to be basetypes.StringValue, was: %T`, provisionModeAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return NewFabricsValueUnknown(), diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	if diags.HasError() {
		return NewFabricsValueUnknown(), diags
	}

	return FabricsValue{
		AsNumber:         asNumberVal,
		DeviceType:       deviceTypeVal,
		FabricId:         fabricIdVal,
		FabricName:       fabricNameVal,
		FabricTechnology: fabricTechnologyVal,
		FabricType:       fabricTypeVal,
		ProvisionMode:    provisionModeVal,
		SiteId:           siteIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewFabricsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FabricsValue {
	object, diags := NewFabricsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFabricsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FabricsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFabricsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFabricsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFabricsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFabricsValueMust(t.AttrTypes, attributes), nil
}

func (t FabricsType) ValueType(ctx context.Context) attr.Value {
	return FabricsValue{}
}

var _ basetypes.ObjectValuable = FabricsValue{}

type FabricsValue struct {
	AsNumber         basetypes.StringValue `tfsdk:"as_number"`
	DeviceType       basetypes.StringValue `tfsdk:"device_type"`
	FabricId         basetypes.StringValue `tfsdk:"fabric_id"`
	FabricName       basetypes.StringValue `tfsdk:"fabric_name"`
	FabricTechnology basetypes.StringValue `tfsdk:"fabric_technology"`
	FabricType       basetypes.StringValue `tfsdk:"fabric_type"`
	ProvisionMode    basetypes.StringValue `tfsdk:"provision_mode"`
	SiteId           basetypes.StringValue `tfsdk:"site_id"`
	state            attr.ValueState
}

func (v FabricsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["as_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["device_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fabric_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fabric_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fabric_technology"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fabric_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provision_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.AsNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["as_number"] = val

		val, err = v.DeviceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_type"] = val

		val, err = v.FabricId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fabric_id"] = val

		val, err = v.FabricName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fabric_name"] = val

		val, err = v.FabricTechnology.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fabric_technology"] = val

		val, err = v.FabricType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fabric_type"] = val

		val, err = v.ProvisionMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provision_mode"] = val

		val, err = v.SiteId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FabricsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FabricsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FabricsValue) String() string {
	return "FabricsValue"
}

func (v FabricsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"as_number":         basetypes.StringType{},
			"device_type":       basetypes.StringType{},
			"fabric_id":         basetypes.StringType{},
			"fabric_name":       basetypes.StringType{},
			"fabric_technology": basetypes.StringType{},
			"fabric_type":       basetypes.StringType{},
			"provision_mode":    basetypes.StringType{},
			"site_id":           basetypes.StringType{},
		},
		map[string]attr.Value{
			"as_number":         v.AsNumber,
			"device_type":       v.DeviceType,
			"fabric_id":         v.FabricId,
			"fabric_name":       v.FabricName,
			"fabric_technology": v.FabricTechnology,
			"fabric_type":       v.FabricType,
			"provision_mode":    v.ProvisionMode,
			"site_id":           v.SiteId,
		})

	return objVal, diags
}

func (v FabricsValue) Equal(o attr.Value) bool {
	other, ok := o.(FabricsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AsNumber.Equal(other.AsNumber) {
		return false
	}

	if !v.DeviceType.Equal(other.DeviceType) {
		return false
	}

	if !v.FabricId.Equal(other.FabricId) {
		return false
	}

	if !v.FabricName.Equal(other.FabricName) {
		return false
	}

	if !v.FabricTechnology.Equal(other.FabricTechnology) {
		return false
	}

	if !v.FabricType.Equal(other.FabricType) {
		return false
	}

	if !v.ProvisionMode.Equal(other.ProvisionMode) {
		return false
	}

	if !v.SiteId.Equal(other.SiteId) {
		return false
	}

	return true
}

func (v FabricsValue) Type(ctx context.Context) attr.Type {
	return FabricsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FabricsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"as_number":         basetypes.StringType{},
		"device_type":       basetypes.StringType{},
		"fabric_id":         basetypes.StringType{},
		"fabric_name":       basetypes.StringType{},
		"fabric_technology": basetypes.StringType{},
		"fabric_type":       basetypes.StringType{},
		"provision_mode":    basetypes.StringType{},
		"site_id":           basetypes.StringType{},
	}
}
