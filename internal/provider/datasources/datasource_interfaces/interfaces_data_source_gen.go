// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_interfaces

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InterfacesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"excludes": schema.StringAttribute{
				Optional:            true,
				Description:         "Excludes to be filtered",
				MarkdownDescription: "Excludes to be filtered",
			},
			"interface_types": schema.StringAttribute{
				Optional:            true,
				Description:         "Interface types to be filtered",
				MarkdownDescription: "Interface types to be filtered",
			},
			"interfaces": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"admin_status": schema.StringAttribute{
							Optional:            true,
							Description:         "Admin status of the interface",
							MarkdownDescription: "Admin status of the interface",
						},
						"allowed_vlans": schema.StringAttribute{
							Optional:            true,
							Description:         "Allowed vlans for the ethernet interface",
							MarkdownDescription: "Allowed vlans for the ethernet interface",
						},
						"deployment_status": schema.StringAttribute{
							Optional:            true,
							Description:         "Deployment status of the interface",
							MarkdownDescription: "Deployment status of the interface",
						},
						"description": schema.StringAttribute{
							Optional:            true,
							Description:         "Description of the interface",
							MarkdownDescription: "Description of the interface",
						},
						"fabric_name": schema.StringAttribute{
							Optional:            true,
							Description:         "Name of the fabric",
							MarkdownDescription: "Name of the fabric",
						},
						"interface_index": schema.Int64Attribute{
							Optional:            true,
							Description:         "Index of the interface",
							MarkdownDescription: "Index of the interface",
						},
						"interface_name": schema.StringAttribute{
							Optional:            true,
							Description:         "Name of the Interface. Example: `Ethernet1/3`",
							MarkdownDescription: "Name of the Interface. Example: `Ethernet1/3`",
						},
						"interface_type": schema.StringAttribute{
							Optional:            true,
							Description:         "Type of interface. Examples: `ethernet`, `port-channel`",
							MarkdownDescription: "Type of interface. Examples: `ethernet`, `port-channel`",
						},
						"ipv4_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv4 address",
							MarkdownDescription: "IPv4 address",
						},
						"is_physical": schema.BoolAttribute{
							Optional:            true,
							Description:         "Is the interface physical",
							MarkdownDescription: "Is the interface physical",
						},
						"mode": schema.StringAttribute{
							Optional:            true,
							Description:         "Mode of the interface",
							MarkdownDescription: "Mode of the interface",
						},
						"native_vlan_id": schema.Int64Attribute{
							Optional:            true,
							Description:         "Native VLAN ID",
							MarkdownDescription: "Native VLAN ID",
						},
						"oper_status": schema.StringAttribute{
							Optional:            true,
							Description:         "Operational status of the interface",
							MarkdownDescription: "Operational status of the interface",
						},
						"oper_status_cause": schema.StringAttribute{
							Optional:            true,
							Description:         "Cause of the operational status",
							MarkdownDescription: "Cause of the operational status",
						},
						"policy_name": schema.StringAttribute{
							Optional:            true,
							Description:         "Name of the policy",
							MarkdownDescription: "Name of the policy",
						},
						"speed": schema.StringAttribute{
							Optional:            true,
							Description:         "Speed of the interface",
							MarkdownDescription: "Speed of the interface",
						},
						"switch_dbid": schema.Int64Attribute{
							Optional:            true,
							Description:         "Switch database ID",
							MarkdownDescription: "Switch database ID",
						},
						"switch_name": schema.StringAttribute{
							Optional:            true,
							Description:         "Name of the system",
							MarkdownDescription: "Name of the system",
						},
						"vrf": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF name",
							MarkdownDescription: "VRF name",
						},
					},
					CustomType: InterfacesType{
						ObjectType: types.ObjectType{
							AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Description:         "List of interfaces",
				MarkdownDescription: "List of interfaces",
			},
			"port_modes": schema.StringAttribute{
				Optional:            true,
				Description:         "Port modes to be filtered",
				MarkdownDescription: "Port modes to be filtered",
			},
			"serial_number": schema.StringAttribute{
				Required:            true,
				Description:         "Serial number of switch to configure",
				MarkdownDescription: "Serial number of switch to configure",
			},
		},
	}
}

type InterfacesModel struct {
	Excludes       types.String `tfsdk:"excludes"`
	InterfaceTypes types.String `tfsdk:"interface_types"`
	Interfaces     types.List   `tfsdk:"interfaces"`
	PortModes      types.String `tfsdk:"port_modes"`
	SerialNumber   types.String `tfsdk:"serial_number"`
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adminStatusAttribute, ok := attributes["admin_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_status is missing from object`)

		return nil, diags
	}

	adminStatusVal, ok := adminStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_status expected to be basetypes.StringValue, was: %T`, adminStatusAttribute))
	}

	allowedVlansAttribute, ok := attributes["allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_vlans is missing from object`)

		return nil, diags
	}

	allowedVlansVal, ok := allowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_vlans expected to be basetypes.StringValue, was: %T`, allowedVlansAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return nil, diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	fabricNameAttribute, ok := attributes["fabric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_name is missing from object`)

		return nil, diags
	}

	fabricNameVal, ok := fabricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_name expected to be basetypes.StringValue, was: %T`, fabricNameAttribute))
	}

	interfaceIndexAttribute, ok := attributes["interface_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_index is missing from object`)

		return nil, diags
	}

	interfaceIndexVal, ok := interfaceIndexAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_index expected to be basetypes.Int64Value, was: %T`, interfaceIndexAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return nil, diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	interfaceTypeAttribute, ok := attributes["interface_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_type is missing from object`)

		return nil, diags
	}

	interfaceTypeVal, ok := interfaceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_type expected to be basetypes.StringValue, was: %T`, interfaceTypeAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return nil, diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	isPhysicalAttribute, ok := attributes["is_physical"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_physical is missing from object`)

		return nil, diags
	}

	isPhysicalVal, ok := isPhysicalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_physical expected to be basetypes.BoolValue, was: %T`, isPhysicalAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	nativeVlanIdAttribute, ok := attributes["native_vlan_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`native_vlan_id is missing from object`)

		return nil, diags
	}

	nativeVlanIdVal, ok := nativeVlanIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`native_vlan_id expected to be basetypes.Int64Value, was: %T`, nativeVlanIdAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return nil, diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	operStatusCauseAttribute, ok := attributes["oper_status_cause"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status_cause is missing from object`)

		return nil, diags
	}

	operStatusCauseVal, ok := operStatusCauseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status_cause expected to be basetypes.StringValue, was: %T`, operStatusCauseAttribute))
	}

	policyNameAttribute, ok := attributes["policy_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy_name is missing from object`)

		return nil, diags
	}

	policyNameVal, ok := policyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy_name expected to be basetypes.StringValue, was: %T`, policyNameAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return nil, diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	switchDbidAttribute, ok := attributes["switch_dbid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_dbid is missing from object`)

		return nil, diags
	}

	switchDbidVal, ok := switchDbidAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_dbid expected to be basetypes.Int64Value, was: %T`, switchDbidAttribute))
	}

	switchNameAttribute, ok := attributes["switch_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_name is missing from object`)

		return nil, diags
	}

	switchNameVal, ok := switchNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_name expected to be basetypes.StringValue, was: %T`, switchNameAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return nil, diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		AdminStatus:      adminStatusVal,
		AllowedVlans:     allowedVlansVal,
		DeploymentStatus: deploymentStatusVal,
		Description:      descriptionVal,
		FabricName:       fabricNameVal,
		InterfaceIndex:   interfaceIndexVal,
		InterfaceName:    interfaceNameVal,
		InterfaceType:    interfaceTypeVal,
		Ipv4Address:      ipv4AddressVal,
		IsPhysical:       isPhysicalVal,
		Mode:             modeVal,
		NativeVlanId:     nativeVlanIdVal,
		OperStatus:       operStatusVal,
		OperStatusCause:  operStatusCauseVal,
		PolicyName:       policyNameVal,
		Speed:            speedVal,
		SwitchDbid:       switchDbidVal,
		SwitchName:       switchNameVal,
		Vrf:              vrfVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	adminStatusAttribute, ok := attributes["admin_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	adminStatusVal, ok := adminStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_status expected to be basetypes.StringValue, was: %T`, adminStatusAttribute))
	}

	allowedVlansAttribute, ok := attributes["allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_vlans is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	allowedVlansVal, ok := allowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_vlans expected to be basetypes.StringValue, was: %T`, allowedVlansAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	fabricNameAttribute, ok := attributes["fabric_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fabric_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	fabricNameVal, ok := fabricNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fabric_name expected to be basetypes.StringValue, was: %T`, fabricNameAttribute))
	}

	interfaceIndexAttribute, ok := attributes["interface_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_index is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceIndexVal, ok := interfaceIndexAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_index expected to be basetypes.Int64Value, was: %T`, interfaceIndexAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	interfaceTypeAttribute, ok := attributes["interface_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_type is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceTypeVal, ok := interfaceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_type expected to be basetypes.StringValue, was: %T`, interfaceTypeAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	isPhysicalAttribute, ok := attributes["is_physical"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_physical is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	isPhysicalVal, ok := isPhysicalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_physical expected to be basetypes.BoolValue, was: %T`, isPhysicalAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	nativeVlanIdAttribute, ok := attributes["native_vlan_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`native_vlan_id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	nativeVlanIdVal, ok := nativeVlanIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`native_vlan_id expected to be basetypes.Int64Value, was: %T`, nativeVlanIdAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	operStatusCauseAttribute, ok := attributes["oper_status_cause"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status_cause is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	operStatusCauseVal, ok := operStatusCauseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status_cause expected to be basetypes.StringValue, was: %T`, operStatusCauseAttribute))
	}

	policyNameAttribute, ok := attributes["policy_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	policyNameVal, ok := policyNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy_name expected to be basetypes.StringValue, was: %T`, policyNameAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	switchDbidAttribute, ok := attributes["switch_dbid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_dbid is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	switchDbidVal, ok := switchDbidAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_dbid expected to be basetypes.Int64Value, was: %T`, switchDbidAttribute))
	}

	switchNameAttribute, ok := attributes["switch_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	switchNameVal, ok := switchNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_name expected to be basetypes.StringValue, was: %T`, switchNameAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		AdminStatus:      adminStatusVal,
		AllowedVlans:     allowedVlansVal,
		DeploymentStatus: deploymentStatusVal,
		Description:      descriptionVal,
		FabricName:       fabricNameVal,
		InterfaceIndex:   interfaceIndexVal,
		InterfaceName:    interfaceNameVal,
		InterfaceType:    interfaceTypeVal,
		Ipv4Address:      ipv4AddressVal,
		IsPhysical:       isPhysicalVal,
		Mode:             modeVal,
		NativeVlanId:     nativeVlanIdVal,
		OperStatus:       operStatusVal,
		OperStatusCause:  operStatusCauseVal,
		PolicyName:       policyNameVal,
		Speed:            speedVal,
		SwitchDbid:       switchDbidVal,
		SwitchName:       switchNameVal,
		Vrf:              vrfVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	AdminStatus      basetypes.StringValue `tfsdk:"admin_status"`
	AllowedVlans     basetypes.StringValue `tfsdk:"allowed_vlans"`
	DeploymentStatus basetypes.StringValue `tfsdk:"deployment_status"`
	Description      basetypes.StringValue `tfsdk:"description"`
	FabricName       basetypes.StringValue `tfsdk:"fabric_name"`
	InterfaceIndex   basetypes.Int64Value  `tfsdk:"interface_index"`
	InterfaceName    basetypes.StringValue `tfsdk:"interface_name"`
	InterfaceType    basetypes.StringValue `tfsdk:"interface_type"`
	Ipv4Address      basetypes.StringValue `tfsdk:"ipv4_address"`
	IsPhysical       basetypes.BoolValue   `tfsdk:"is_physical"`
	Mode             basetypes.StringValue `tfsdk:"mode"`
	NativeVlanId     basetypes.Int64Value  `tfsdk:"native_vlan_id"`
	OperStatus       basetypes.StringValue `tfsdk:"oper_status"`
	OperStatusCause  basetypes.StringValue `tfsdk:"oper_status_cause"`
	PolicyName       basetypes.StringValue `tfsdk:"policy_name"`
	Speed            basetypes.StringValue `tfsdk:"speed"`
	SwitchDbid       basetypes.Int64Value  `tfsdk:"switch_dbid"`
	SwitchName       basetypes.StringValue `tfsdk:"switch_name"`
	Vrf              basetypes.StringValue `tfsdk:"vrf"`
	state            attr.ValueState
}

func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 19)

	var val tftypes.Value
	var err error

	attrTypes["admin_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["allowed_vlans"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["deployment_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fabric_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_index"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["interface_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv4_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_physical"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["native_vlan_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["oper_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oper_status_cause"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["policy_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["speed"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["switch_dbid"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["switch_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 19)

		val, err = v.AdminStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["admin_status"] = val

		val, err = v.AllowedVlans.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allowed_vlans"] = val

		val, err = v.DeploymentStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deployment_status"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.FabricName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fabric_name"] = val

		val, err = v.InterfaceIndex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_index"] = val

		val, err = v.InterfaceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_name"] = val

		val, err = v.InterfaceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_type"] = val

		val, err = v.Ipv4Address.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv4_address"] = val

		val, err = v.IsPhysical.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_physical"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.NativeVlanId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["native_vlan_id"] = val

		val, err = v.OperStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oper_status"] = val

		val, err = v.OperStatusCause.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oper_status_cause"] = val

		val, err = v.PolicyName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["policy_name"] = val

		val, err = v.Speed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["speed"] = val

		val, err = v.SwitchDbid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["switch_dbid"] = val

		val, err = v.SwitchName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["switch_name"] = val

		val, err = v.Vrf.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"admin_status":      basetypes.StringType{},
		"allowed_vlans":     basetypes.StringType{},
		"deployment_status": basetypes.StringType{},
		"description":       basetypes.StringType{},
		"fabric_name":       basetypes.StringType{},
		"interface_index":   basetypes.Int64Type{},
		"interface_name":    basetypes.StringType{},
		"interface_type":    basetypes.StringType{},
		"ipv4_address":      basetypes.StringType{},
		"is_physical":       basetypes.BoolType{},
		"mode":              basetypes.StringType{},
		"native_vlan_id":    basetypes.Int64Type{},
		"oper_status":       basetypes.StringType{},
		"oper_status_cause": basetypes.StringType{},
		"policy_name":       basetypes.StringType{},
		"speed":             basetypes.StringType{},
		"switch_dbid":       basetypes.Int64Type{},
		"switch_name":       basetypes.StringType{},
		"vrf":               basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"admin_status":      v.AdminStatus,
			"allowed_vlans":     v.AllowedVlans,
			"deployment_status": v.DeploymentStatus,
			"description":       v.Description,
			"fabric_name":       v.FabricName,
			"interface_index":   v.InterfaceIndex,
			"interface_name":    v.InterfaceName,
			"interface_type":    v.InterfaceType,
			"ipv4_address":      v.Ipv4Address,
			"is_physical":       v.IsPhysical,
			"mode":              v.Mode,
			"native_vlan_id":    v.NativeVlanId,
			"oper_status":       v.OperStatus,
			"oper_status_cause": v.OperStatusCause,
			"policy_name":       v.PolicyName,
			"speed":             v.Speed,
			"switch_dbid":       v.SwitchDbid,
			"switch_name":       v.SwitchName,
			"vrf":               v.Vrf,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdminStatus.Equal(other.AdminStatus) {
		return false
	}

	if !v.AllowedVlans.Equal(other.AllowedVlans) {
		return false
	}

	if !v.DeploymentStatus.Equal(other.DeploymentStatus) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.FabricName.Equal(other.FabricName) {
		return false
	}

	if !v.InterfaceIndex.Equal(other.InterfaceIndex) {
		return false
	}

	if !v.InterfaceName.Equal(other.InterfaceName) {
		return false
	}

	if !v.InterfaceType.Equal(other.InterfaceType) {
		return false
	}

	if !v.Ipv4Address.Equal(other.Ipv4Address) {
		return false
	}

	if !v.IsPhysical.Equal(other.IsPhysical) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.NativeVlanId.Equal(other.NativeVlanId) {
		return false
	}

	if !v.OperStatus.Equal(other.OperStatus) {
		return false
	}

	if !v.OperStatusCause.Equal(other.OperStatusCause) {
		return false
	}

	if !v.PolicyName.Equal(other.PolicyName) {
		return false
	}

	if !v.Speed.Equal(other.Speed) {
		return false
	}

	if !v.SwitchDbid.Equal(other.SwitchDbid) {
		return false
	}

	if !v.SwitchName.Equal(other.SwitchName) {
		return false
	}

	if !v.Vrf.Equal(other.Vrf) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"admin_status":      basetypes.StringType{},
		"allowed_vlans":     basetypes.StringType{},
		"deployment_status": basetypes.StringType{},
		"description":       basetypes.StringType{},
		"fabric_name":       basetypes.StringType{},
		"interface_index":   basetypes.Int64Type{},
		"interface_name":    basetypes.StringType{},
		"interface_type":    basetypes.StringType{},
		"ipv4_address":      basetypes.StringType{},
		"is_physical":       basetypes.BoolType{},
		"mode":              basetypes.StringType{},
		"native_vlan_id":    basetypes.Int64Type{},
		"oper_status":       basetypes.StringType{},
		"oper_status_cause": basetypes.StringType{},
		"policy_name":       basetypes.StringType{},
		"speed":             basetypes.StringType{},
		"switch_dbid":       basetypes.Int64Type{},
		"switch_name":       basetypes.StringType{},
		"vrf":               basetypes.StringType{},
	}
}
