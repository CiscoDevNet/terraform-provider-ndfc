// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_vrf

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func VrfDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"advertise_default_route": schema.BoolAttribute{
				Optional:            true,
				Description:         "Flag to Control Advertisement of Default Route Internally",
				MarkdownDescription: "Flag to Control Advertisement of Default Route Internally",
			},
			"advertise_host_routes": schema.BoolAttribute{
				Optional:            true,
				Description:         "Flag to Control Advertisement of /32 and /128 Routes to Edge Routers",
				MarkdownDescription: "Flag to Control Advertisement of /32 and /128 Routes to Edge Routers",
			},
			"bgp_password": schema.StringAttribute{
				Optional:            true,
				Description:         "VRF Lite BGP neighbor password (Hex String)",
				MarkdownDescription: "VRF Lite BGP neighbor password (Hex String)",
			},
			"bgp_password_type": schema.StringAttribute{
				Optional:            true,
				Description:         "VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco",
				MarkdownDescription: "VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco",
			},
			"configure_static_default_route": schema.BoolAttribute{
				Optional:            true,
				Description:         "Flag to Control Static Default Route Configuration",
				MarkdownDescription: "Flag to Control Static Default Route Configuration",
			},
			"disable_rt_auto": schema.BoolAttribute{
				Optional:            true,
				Description:         "Applicable to IPv4, IPv6 VPN/EVPN/MVPN",
				MarkdownDescription: "Applicable to IPv4, IPv6 VPN/EVPN/MVPN",
			},
			"fabric_name": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
			},
			"id": schema.Int64Attribute{
				Optional:            true,
				Description:         "Internal ID of VRF generated by NDFC",
				MarkdownDescription: "Internal ID of VRF generated by NDFC",
			},
			"interface_description": schema.StringAttribute{
				Optional:            true,
				Description:         "Interface description",
				MarkdownDescription: "Interface description",
			},
			"ipv6_link_local": schema.BoolAttribute{
				Optional:            true,
				Description:         "Enables IPv6 link-local Option under VRF SVI",
				MarkdownDescription: "Enables IPv6 link-local Option under VRF SVI",
			},
			"loopback_routing_tag": schema.Int64Attribute{
				Optional:            true,
				Description:         "Loopback routing tag",
				MarkdownDescription: "Loopback routing tag",
			},
			"max_bgp_paths": schema.Int64Attribute{
				Optional:            true,
				Description:         "Maximum BGP paths",
				MarkdownDescription: "Maximum BGP paths",
			},
			"max_ibgp_paths": schema.Int64Attribute{
				Optional:            true,
				Description:         "Maximum iBGP paths",
				MarkdownDescription: "Maximum iBGP paths",
			},
			"mtu": schema.Int64Attribute{
				Optional:            true,
				Description:         "Interface MTU",
				MarkdownDescription: "Interface MTU",
			},
			"mvpn_inter_as": schema.BoolAttribute{
				Optional:            true,
				Description:         "Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific",
				MarkdownDescription: "Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific",
			},
			"netflow": schema.BoolAttribute{
				Optional:            true,
				Description:         "For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only",
				MarkdownDescription: "For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only",
			},
			"netflow_monitor": schema.StringAttribute{
				Optional:            true,
				Description:         "Netflow monitor. For NX-OS only",
				MarkdownDescription: "Netflow monitor. For NX-OS only",
			},
			"no_rp": schema.BoolAttribute{
				Optional:            true,
				Description:         "There is no RP as only SSM is used",
				MarkdownDescription: "There is no RP as only SSM is used",
			},
			"overlay_multicast_groups": schema.StringAttribute{
				Optional:            true,
				Description:         "Overlay multicast groups",
				MarkdownDescription: "Overlay multicast groups",
			},
			"redistribute_direct_route_map": schema.StringAttribute{
				Optional:            true,
				Description:         "Redistribute direct route map",
				MarkdownDescription: "Redistribute direct route map",
			},
			"route_target_export": schema.StringAttribute{
				Optional:            true,
				Description:         "For VPN Routes Export, One or a Comma Separated List",
				MarkdownDescription: "For VPN Routes Export, One or a Comma Separated List",
			},
			"route_target_export_cloud_evpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For Cloud EVPN Routes Export, One or a Comma Separated List",
				MarkdownDescription: "For Cloud EVPN Routes Export, One or a Comma Separated List",
			},
			"route_target_export_evpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For EVPN Routes Export, One or a Comma Separated List",
				MarkdownDescription: "For EVPN Routes Export, One or a Comma Separated List",
			},
			"route_target_export_mvpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For MVPN Routes Export, One or a Comma Separated List",
				MarkdownDescription: "For MVPN Routes Export, One or a Comma Separated List",
			},
			"route_target_import": schema.StringAttribute{
				Optional:            true,
				Description:         "For VPN Routes Import, One or a Comma Separated List",
				MarkdownDescription: "For VPN Routes Import, One or a Comma Separated List",
			},
			"route_target_import_cloud_evpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For Cloud EVPN Routes Import, One or a Comma Separated List",
				MarkdownDescription: "For Cloud EVPN Routes Import, One or a Comma Separated List",
			},
			"route_target_import_evpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For EVPN Routes Import, One or a Comma Separated List",
				MarkdownDescription: "For EVPN Routes Import, One or a Comma Separated List",
			},
			"route_target_import_mvpn": schema.StringAttribute{
				Optional:            true,
				Description:         "For MVPN Routes Import, One or a Comma Separated List",
				MarkdownDescription: "For MVPN Routes Import, One or a Comma Separated List",
			},
			"rp_address": schema.StringAttribute{
				Optional:            true,
				Description:         "IPv4 address",
				MarkdownDescription: "IPv4 address",
			},
			"rp_external": schema.BoolAttribute{
				Optional:            true,
				Description:         "Is RP external to the fabric",
				MarkdownDescription: "Is RP external to the fabric",
			},
			"rp_loopback_id": schema.Int64Attribute{
				Optional:            true,
				Description:         "RP loopback ID",
				MarkdownDescription: "RP loopback ID",
			},
			"trm": schema.BoolAttribute{
				Optional:            true,
				Description:         "Enable Tenant Routed Multicast",
				MarkdownDescription: "Enable Tenant Routed Multicast",
			},
			"trm_bgw_msite": schema.BoolAttribute{
				Optional:            true,
				Description:         "Enable TRM on Border Gateway Multisite",
				MarkdownDescription: "Enable TRM on Border Gateway Multisite",
			},
			"underlay_multicast_address": schema.StringAttribute{
				Optional:            true,
				Description:         "IPv4 Multicast Address. Applicable only when TRM is enabled.",
				MarkdownDescription: "IPv4 Multicast Address. Applicable only when TRM is enabled.",
			},
			"vlan_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "VLAN ID",
				MarkdownDescription: "VLAN ID",
			},
			"vlan_name": schema.StringAttribute{
				Optional:            true,
				Description:         "VLAN name",
				MarkdownDescription: "VLAN name",
			},
			"vrf_description": schema.StringAttribute{
				Optional:            true,
				Description:         "VRF description",
				MarkdownDescription: "VRF description",
			},
			"vrf_extension_template": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the VRF extension template",
				MarkdownDescription: "The name of the VRF extension template",
			},
			"vrf_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "VNI ID of VRF",
				MarkdownDescription: "VNI ID of VRF",
			},
			"vrf_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the VRF",
				MarkdownDescription: "The name of the VRF",
			},
			"vrf_template": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the VRF template",
				MarkdownDescription: "The name of the VRF template",
			},
		},
	}
}

type VrfModel struct {
	AdvertiseDefaultRoute       types.Bool   `tfsdk:"advertise_default_route"`
	AdvertiseHostRoutes         types.Bool   `tfsdk:"advertise_host_routes"`
	BgpPassword                 types.String `tfsdk:"bgp_password"`
	BgpPasswordType             types.String `tfsdk:"bgp_password_type"`
	ConfigureStaticDefaultRoute types.Bool   `tfsdk:"configure_static_default_route"`
	DisableRtAuto               types.Bool   `tfsdk:"disable_rt_auto"`
	FabricName                  types.String `tfsdk:"fabric_name"`
	Id                          types.Int64  `tfsdk:"id"`
	InterfaceDescription        types.String `tfsdk:"interface_description"`
	Ipv6LinkLocal               types.Bool   `tfsdk:"ipv6_link_local"`
	LoopbackRoutingTag          types.Int64  `tfsdk:"loopback_routing_tag"`
	MaxBgpPaths                 types.Int64  `tfsdk:"max_bgp_paths"`
	MaxIbgpPaths                types.Int64  `tfsdk:"max_ibgp_paths"`
	Mtu                         types.Int64  `tfsdk:"mtu"`
	MvpnInterAs                 types.Bool   `tfsdk:"mvpn_inter_as"`
	Netflow                     types.Bool   `tfsdk:"netflow"`
	NetflowMonitor              types.String `tfsdk:"netflow_monitor"`
	NoRp                        types.Bool   `tfsdk:"no_rp"`
	OverlayMulticastGroups      types.String `tfsdk:"overlay_multicast_groups"`
	RedistributeDirectRouteMap  types.String `tfsdk:"redistribute_direct_route_map"`
	RouteTargetExport           types.String `tfsdk:"route_target_export"`
	RouteTargetExportCloudEvpn  types.String `tfsdk:"route_target_export_cloud_evpn"`
	RouteTargetExportEvpn       types.String `tfsdk:"route_target_export_evpn"`
	RouteTargetExportMvpn       types.String `tfsdk:"route_target_export_mvpn"`
	RouteTargetImport           types.String `tfsdk:"route_target_import"`
	RouteTargetImportCloudEvpn  types.String `tfsdk:"route_target_import_cloud_evpn"`
	RouteTargetImportEvpn       types.String `tfsdk:"route_target_import_evpn"`
	RouteTargetImportMvpn       types.String `tfsdk:"route_target_import_mvpn"`
	RpAddress                   types.String `tfsdk:"rp_address"`
	RpExternal                  types.Bool   `tfsdk:"rp_external"`
	RpLoopbackId                types.Int64  `tfsdk:"rp_loopback_id"`
	Trm                         types.Bool   `tfsdk:"trm"`
	TrmBgwMsite                 types.Bool   `tfsdk:"trm_bgw_msite"`
	UnderlayMulticastAddress    types.String `tfsdk:"underlay_multicast_address"`
	VlanId                      types.Int64  `tfsdk:"vlan_id"`
	VlanName                    types.String `tfsdk:"vlan_name"`
	VrfDescription              types.String `tfsdk:"vrf_description"`
	VrfExtensionTemplate        types.String `tfsdk:"vrf_extension_template"`
	VrfId                       types.Int64  `tfsdk:"vrf_id"`
	VrfName                     types.String `tfsdk:"vrf_name"`
	VrfTemplate                 types.String `tfsdk:"vrf_template"`
}
