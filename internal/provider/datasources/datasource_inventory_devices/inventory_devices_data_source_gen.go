// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_inventory_devices

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InventoryDevicesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"devices": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"config_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The configuration status of the device",
							MarkdownDescription: "The configuration status of the device",
						},
						"device_index": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC device index",
							MarkdownDescription: "The NDFC device index",
						},
						"discovery_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The operational status of the device",
							MarkdownDescription: "The operational status of the device",
						},
						"hostname": schema.StringAttribute{
							Computed:            true,
							Description:         "The hostname of the device",
							MarkdownDescription: "The hostname of the device",
						},
						"ip_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The ip address to use for the device",
							MarkdownDescription: "The ip address to use for the device",
						},
						"managable": schema.BoolAttribute{
							Computed:            true,
							Description:         "The managable status of the device",
							MarkdownDescription: "The managable status of the device",
						},
						"mode": schema.StringAttribute{
							Computed:            true,
							Description:         "The mode of the device",
							MarkdownDescription: "The mode of the device",
						},
						"model": schema.StringAttribute{
							Computed:            true,
							Description:         "The model of the device",
							MarkdownDescription: "The model of the device",
						},
						"oper_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The operational status of the device",
							MarkdownDescription: "The operational status of the device",
						},
						"role": schema.StringAttribute{
							Computed:            true,
							Description:         "The role of the device",
							MarkdownDescription: "The role of the device",
							Validators: []validator.String{
								stringvalidator.OneOf("leaf", "spine", "border", "border_spine", "border_gateway", "border_gateway_spine", "super_spine", "border_super_spine", "border_gateway_super_spine", "access", "aggregation", "edge_router", "core_router", "tor"),
							},
						},
						"serial_number": schema.StringAttribute{
							Computed:            true,
							Description:         "The serial number of the device",
							MarkdownDescription: "The serial number of the device",
						},
						"switch_db_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC switch DB ID of the device",
							MarkdownDescription: "The NDFC switch DB ID of the device",
						},
						"uuid": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC UUID of the device",
							MarkdownDescription: "The NDFC UUID of the device",
						},
						"vdc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC ID of the device",
							MarkdownDescription: "The VDC ID of the device",
						},
						"vdc_mac": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC MAC of the device",
							MarkdownDescription: "The VDC MAC of the device",
						},
						"version": schema.StringAttribute{
							Computed:            true,
							Description:         "The software version of the device",
							MarkdownDescription: "The software version of the device",
						},
					},
					CustomType: DevicesType{
						ObjectType: types.ObjectType{
							AttrTypes: DevicesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The devices to manage in the inventory",
				MarkdownDescription: "The devices to manage in the inventory",
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The Terraform Unique Identifier for the Inventory Devices resource",
				MarkdownDescription: "The Terraform Unique Identifier for the Inventory Devices resource",
			},
		},
	}
}

type InventoryDevicesModel struct {
	Devices    types.Set    `tfsdk:"devices"`
	FabricName types.String `tfsdk:"fabric_name"`
	Id         types.String `tfsdk:"id"`
}

var _ basetypes.ObjectTypable = DevicesType{}

type DevicesType struct {
	basetypes.ObjectType
}

func (t DevicesType) Equal(o attr.Type) bool {
	other, ok := o.(DevicesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DevicesType) String() string {
	return "DevicesType"
}

func (t DevicesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	configStatusAttribute, ok := attributes["config_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config_status is missing from object`)

		return nil, diags
	}

	configStatusVal, ok := configStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config_status expected to be basetypes.StringValue, was: %T`, configStatusAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return nil, diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	discoveryStatusAttribute, ok := attributes["discovery_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_status is missing from object`)

		return nil, diags
	}

	discoveryStatusVal, ok := discoveryStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_status expected to be basetypes.StringValue, was: %T`, discoveryStatusAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return nil, diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	managableAttribute, ok := attributes["managable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managable is missing from object`)

		return nil, diags
	}

	managableVal, ok := managableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managable expected to be basetypes.BoolValue, was: %T`, managableAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return nil, diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return nil, diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchDbIdAttribute, ok := attributes["switch_db_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_db_id is missing from object`)

		return nil, diags
	}

	switchDbIdVal, ok := switchDbIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_db_id expected to be basetypes.StringValue, was: %T`, switchDbIdAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return nil, diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return nil, diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DevicesValue{
		ConfigStatus:    configStatusVal,
		DeviceIndex:     deviceIndexVal,
		DiscoveryStatus: discoveryStatusVal,
		Hostname:        hostnameVal,
		IpAddress:       ipAddressVal,
		Managable:       managableVal,
		Mode:            modeVal,
		Model:           modelVal,
		OperStatus:      operStatusVal,
		Role:            roleVal,
		SerialNumber:    serialNumberVal,
		SwitchDbId:      switchDbIdVal,
		Uuid:            uuidVal,
		VdcId:           vdcIdVal,
		VdcMac:          vdcMacVal,
		Version:         versionVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewDevicesValueNull() DevicesValue {
	return DevicesValue{
		state: attr.ValueStateNull,
	}
}

func NewDevicesValueUnknown() DevicesValue {
	return DevicesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDevicesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DevicesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DevicesValue Attribute Value",
				"While creating a DevicesValue value, a missing attribute value was detected. "+
					"A DevicesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DevicesValue Attribute Type",
				"While creating a DevicesValue value, an invalid attribute value was detected. "+
					"A DevicesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DevicesValue Attribute Value",
				"While creating a DevicesValue value, an extra attribute value was detected. "+
					"A DevicesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DevicesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDevicesValueUnknown(), diags
	}

	configStatusAttribute, ok := attributes["config_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	configStatusVal, ok := configStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config_status expected to be basetypes.StringValue, was: %T`, configStatusAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	discoveryStatusAttribute, ok := attributes["discovery_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryStatusVal, ok := discoveryStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_status expected to be basetypes.StringValue, was: %T`, discoveryStatusAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	managableAttribute, ok := attributes["managable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managable is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	managableVal, ok := managableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managable expected to be basetypes.BoolValue, was: %T`, managableAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchDbIdAttribute, ok := attributes["switch_db_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_db_id is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	switchDbIdVal, ok := switchDbIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_db_id expected to be basetypes.StringValue, was: %T`, switchDbIdAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewDevicesValueUnknown(), diags
	}

	return DevicesValue{
		ConfigStatus:    configStatusVal,
		DeviceIndex:     deviceIndexVal,
		DiscoveryStatus: discoveryStatusVal,
		Hostname:        hostnameVal,
		IpAddress:       ipAddressVal,
		Managable:       managableVal,
		Mode:            modeVal,
		Model:           modelVal,
		OperStatus:      operStatusVal,
		Role:            roleVal,
		SerialNumber:    serialNumberVal,
		SwitchDbId:      switchDbIdVal,
		Uuid:            uuidVal,
		VdcId:           vdcIdVal,
		VdcMac:          vdcMacVal,
		Version:         versionVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewDevicesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DevicesValue {
	object, diags := NewDevicesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDevicesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DevicesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDevicesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDevicesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDevicesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDevicesValueMust(DevicesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DevicesType) ValueType(ctx context.Context) attr.Value {
	return DevicesValue{}
}

var _ basetypes.ObjectValuable = DevicesValue{}

type DevicesValue struct {
	ConfigStatus    basetypes.StringValue `tfsdk:"config_status"`
	DeviceIndex     basetypes.StringValue `tfsdk:"device_index"`
	DiscoveryStatus basetypes.StringValue `tfsdk:"discovery_status"`
	Hostname        basetypes.StringValue `tfsdk:"hostname"`
	IpAddress       basetypes.StringValue `tfsdk:"ip_address"`
	Managable       basetypes.BoolValue   `tfsdk:"managable"`
	Mode            basetypes.StringValue `tfsdk:"mode"`
	Model           basetypes.StringValue `tfsdk:"model"`
	OperStatus      basetypes.StringValue `tfsdk:"oper_status"`
	Role            basetypes.StringValue `tfsdk:"role"`
	SerialNumber    basetypes.StringValue `tfsdk:"serial_number"`
	SwitchDbId      basetypes.StringValue `tfsdk:"switch_db_id"`
	Uuid            basetypes.StringValue `tfsdk:"uuid"`
	VdcId           basetypes.StringValue `tfsdk:"vdc_id"`
	VdcMac          basetypes.StringValue `tfsdk:"vdc_mac"`
	Version         basetypes.StringValue `tfsdk:"version"`
	state           attr.ValueState
}

func (v DevicesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 16)

	var val tftypes.Value
	var err error

	attrTypes["config_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["device_index"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["managable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["model"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oper_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["role"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["switch_db_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vdc_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vdc_mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 16)

		val, err = v.ConfigStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config_status"] = val

		val, err = v.DeviceIndex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_index"] = val

		val, err = v.DiscoveryStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_status"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.IpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address"] = val

		val, err = v.Managable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["managable"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.OperStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oper_status"] = val

		val, err = v.Role.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.SwitchDbId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["switch_db_id"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		val, err = v.VdcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_id"] = val

		val, err = v.VdcMac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_mac"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DevicesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DevicesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DevicesValue) String() string {
	return "DevicesValue"
}

func (v DevicesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"config_status":    basetypes.StringType{},
		"device_index":     basetypes.StringType{},
		"discovery_status": basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"ip_address":       basetypes.StringType{},
		"managable":        basetypes.BoolType{},
		"mode":             basetypes.StringType{},
		"model":            basetypes.StringType{},
		"oper_status":      basetypes.StringType{},
		"role":             basetypes.StringType{},
		"serial_number":    basetypes.StringType{},
		"switch_db_id":     basetypes.StringType{},
		"uuid":             basetypes.StringType{},
		"vdc_id":           basetypes.StringType{},
		"vdc_mac":          basetypes.StringType{},
		"version":          basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"config_status":    v.ConfigStatus,
			"device_index":     v.DeviceIndex,
			"discovery_status": v.DiscoveryStatus,
			"hostname":         v.Hostname,
			"ip_address":       v.IpAddress,
			"managable":        v.Managable,
			"mode":             v.Mode,
			"model":            v.Model,
			"oper_status":      v.OperStatus,
			"role":             v.Role,
			"serial_number":    v.SerialNumber,
			"switch_db_id":     v.SwitchDbId,
			"uuid":             v.Uuid,
			"vdc_id":           v.VdcId,
			"vdc_mac":          v.VdcMac,
			"version":          v.Version,
		})

	return objVal, diags
}

func (v DevicesValue) Equal(o attr.Value) bool {
	other, ok := o.(DevicesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ConfigStatus.Equal(other.ConfigStatus) {
		return false
	}

	if !v.DeviceIndex.Equal(other.DeviceIndex) {
		return false
	}

	if !v.DiscoveryStatus.Equal(other.DiscoveryStatus) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.IpAddress.Equal(other.IpAddress) {
		return false
	}

	if !v.Managable.Equal(other.Managable) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.OperStatus.Equal(other.OperStatus) {
		return false
	}

	if !v.Role.Equal(other.Role) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.SwitchDbId.Equal(other.SwitchDbId) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	if !v.VdcId.Equal(other.VdcId) {
		return false
	}

	if !v.VdcMac.Equal(other.VdcMac) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v DevicesValue) Type(ctx context.Context) attr.Type {
	return DevicesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DevicesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"config_status":    basetypes.StringType{},
		"device_index":     basetypes.StringType{},
		"discovery_status": basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"ip_address":       basetypes.StringType{},
		"managable":        basetypes.BoolType{},
		"mode":             basetypes.StringType{},
		"model":            basetypes.StringType{},
		"oper_status":      basetypes.StringType{},
		"role":             basetypes.StringType{},
		"serial_number":    basetypes.StringType{},
		"switch_db_id":     basetypes.StringType{},
		"uuid":             basetypes.StringType{},
		"vdc_id":           basetypes.StringType{},
		"vdc_mac":          basetypes.StringType{},
		"version":          basetypes.StringType{},
	}
}
