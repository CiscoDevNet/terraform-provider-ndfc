// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_interface_vlan

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InterfaceVlanResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy the configuration",
				MarkdownDescription: "Deploy the configuration",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier for the interface",
				MarkdownDescription: "Unique identifier for the interface",
			},
			"interfaces": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"admin_state": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable or disable the interface",
							MarkdownDescription: "Enable or disable the interface",
							Default:             booldefault.StaticBool(true),
						},
						"advertise_subnet_in_underlay": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Advertise subnet in underlay",
							MarkdownDescription: "Advertise subnet in underlay",
							Default:             booldefault.StaticBool(false),
						},
						"deployment_status": schema.StringAttribute{
							Computed:            true,
							Description:         "Status of the deployment",
							MarkdownDescription: "Status of the deployment",
						},
						"dhcp_server_addr1": schema.StringAttribute{
							Optional:            true,
							Description:         "DHCP server address 1",
							MarkdownDescription: "DHCP server address 1",
						},
						"dhcp_server_addr2": schema.StringAttribute{
							Optional:            true,
							Description:         "DHCP server address 2",
							MarkdownDescription: "DHCP server address 2",
						},
						"dhcp_server_addr3": schema.StringAttribute{
							Optional:            true,
							Description:         "DHCP server address 3",
							MarkdownDescription: "DHCP server address 3",
						},
						"disable_ip_redirects": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Disable IP redirects",
							MarkdownDescription: "Disable IP redirects",
							Default:             booldefault.StaticBool(true),
						},
						"enable_hsrp": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable HSRP",
							MarkdownDescription: "Enable HSRP",
							Default:             booldefault.StaticBool(false),
						},
						"freeform_config": schema.StringAttribute{
							Optional:            true,
							Description:         "Additional CLI for the interface",
							MarkdownDescription: "Additional CLI for the interface",
						},
						"hsrp_group": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "HSRP group number",
							MarkdownDescription: "HSRP group number",
							Validators: []validator.Int64{
								int64validator.Between(0, 255),
							},
							Default: int64default.StaticInt64(1),
						},
						"hsrp_priority": schema.Int64Attribute{
							Optional:            true,
							Description:         "HSRP priority",
							MarkdownDescription: "HSRP priority",
							Validators: []validator.Int64{
								int64validator.Between(1, 255),
							},
						},
						"hsrp_version": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "HSRP version",
							MarkdownDescription: "HSRP version",
							Validators: []validator.String{
								stringvalidator.OneOf("1", "2"),
							},
							Default: stringdefault.StaticString("2"),
						},
						"hsrp_vip": schema.StringAttribute{
							Optional:            true,
							Description:         "HSRP virtual IP address",
							MarkdownDescription: "HSRP virtual IP address",
						},
						"interface_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"interface_name": schema.StringAttribute{
							Required:            true,
							Description:         "Name of the Interface. Example: `Vlan1000`",
							MarkdownDescription: "Name of the Interface. Example: `Vlan1000`",
						},
						"ipv4_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv4 address",
							MarkdownDescription: "IPv4 address",
						},
						"ipv4_prefix_length": schema.StringAttribute{
							Optional:            true,
							Description:         "Prefix length for the IPv4 address",
							MarkdownDescription: "Prefix length for the IPv4 address",
						},
						"mac": schema.StringAttribute{
							Optional:            true,
							Description:         "MAC address",
							MarkdownDescription: "MAC address",
						},
						"mtu": schema.StringAttribute{
							Optional:            true,
							Description:         "MTU for the interface - range 68-9216",
							MarkdownDescription: "MTU for the interface - range 68-9216",
						},
						"netflow": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Netflow is supported only if it is enabled on fabric",
							MarkdownDescription: "Netflow is supported only if it is enabled on fabric",
							Default:             booldefault.StaticBool(false),
						},
						"netflow_monitor": schema.StringAttribute{
							Optional:            true,
							Description:         "Provide the Layer 2 Monitor Name",
							MarkdownDescription: "Provide the Layer 2 Monitor Name",
						},
						"netflow_sampler": schema.StringAttribute{
							Optional:            true,
							Description:         "Netflow sampler name, applicable to N7K only",
							MarkdownDescription: "Netflow sampler name, applicable to N7K only",
						},
						"preempt": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable HSRP preempt",
							MarkdownDescription: "Enable HSRP preempt",
							Default:             booldefault.StaticBool(false),
						},
						"routing_tag": schema.StringAttribute{
							Optional:            true,
							Description:         "Routing tag",
							MarkdownDescription: "Routing tag",
						},
						"serial_number": schema.StringAttribute{
							Optional:            true,
							Description:         "Serial number of switch to configure",
							MarkdownDescription: "Serial number of switch to configure",
						},
						"vrf": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "VRF name",
							MarkdownDescription: "VRF name",
							Default:             stringdefault.StaticString("default"),
						},
						"vrf_dhcp1": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF for DHCP server 1",
							MarkdownDescription: "VRF for DHCP server 1",
						},
						"vrf_dhcp2": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF for DHCP server 2",
							MarkdownDescription: "VRF for DHCP server 2",
						},
						"vrf_dhcp3": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF for DHCP server 3",
							MarkdownDescription: "VRF for DHCP server 3",
						},
					},
					CustomType: InterfacesType{
						ObjectType: types.ObjectType{
							AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "interfaces to configure",
				MarkdownDescription: "interfaces to configure",
			},
			"policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the policy. Examples: `int_vlan`, `int_freeform`",
				MarkdownDescription: "Name of the policy. Examples: `int_vlan`, `int_freeform`",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("int_vlan"),
			},
			"serial_number": schema.StringAttribute{
				Optional:            true,
				Description:         "Serial number of switch to configure",
				MarkdownDescription: "Serial number of switch to configure",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{path.MatchRoot("interfaces").AtAnyMapKey().AtName("serial_number")}...),
				},
			},
		},
		Description:         "Resource to configure Switch Virtual Interface (SVI) on a switch",
		MarkdownDescription: "Resource to configure Switch Virtual Interface (SVI) on a switch",
	}
}

type InterfaceVlanModel struct {
	Deploy       types.Bool   `tfsdk:"deploy"`
	Id           types.String `tfsdk:"id"`
	Interfaces   types.Map    `tfsdk:"interfaces"`
	Policy       types.String `tfsdk:"policy"`
	SerialNumber types.String `tfsdk:"serial_number"`
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return nil, diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	advertiseSubnetInUnderlayAttribute, ok := attributes["advertise_subnet_in_underlay"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_subnet_in_underlay is missing from object`)

		return nil, diags
	}

	advertiseSubnetInUnderlayVal, ok := advertiseSubnetInUnderlayAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_subnet_in_underlay expected to be basetypes.BoolValue, was: %T`, advertiseSubnetInUnderlayAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return nil, diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	dhcpServerAddr1Attribute, ok := attributes["dhcp_server_addr1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr1 is missing from object`)

		return nil, diags
	}

	dhcpServerAddr1Val, ok := dhcpServerAddr1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr1 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr1Attribute))
	}

	dhcpServerAddr2Attribute, ok := attributes["dhcp_server_addr2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr2 is missing from object`)

		return nil, diags
	}

	dhcpServerAddr2Val, ok := dhcpServerAddr2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr2 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr2Attribute))
	}

	dhcpServerAddr3Attribute, ok := attributes["dhcp_server_addr3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr3 is missing from object`)

		return nil, diags
	}

	dhcpServerAddr3Val, ok := dhcpServerAddr3Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr3 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr3Attribute))
	}

	disableIpRedirectsAttribute, ok := attributes["disable_ip_redirects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disable_ip_redirects is missing from object`)

		return nil, diags
	}

	disableIpRedirectsVal, ok := disableIpRedirectsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disable_ip_redirects expected to be basetypes.BoolValue, was: %T`, disableIpRedirectsAttribute))
	}

	enableHsrpAttribute, ok := attributes["enable_hsrp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_hsrp is missing from object`)

		return nil, diags
	}

	enableHsrpVal, ok := enableHsrpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_hsrp expected to be basetypes.BoolValue, was: %T`, enableHsrpAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return nil, diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	hsrpGroupAttribute, ok := attributes["hsrp_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_group is missing from object`)

		return nil, diags
	}

	hsrpGroupVal, ok := hsrpGroupAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_group expected to be basetypes.Int64Value, was: %T`, hsrpGroupAttribute))
	}

	hsrpPriorityAttribute, ok := attributes["hsrp_priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_priority is missing from object`)

		return nil, diags
	}

	hsrpPriorityVal, ok := hsrpPriorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_priority expected to be basetypes.Int64Value, was: %T`, hsrpPriorityAttribute))
	}

	hsrpVersionAttribute, ok := attributes["hsrp_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_version is missing from object`)

		return nil, diags
	}

	hsrpVersionVal, ok := hsrpVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_version expected to be basetypes.StringValue, was: %T`, hsrpVersionAttribute))
	}

	hsrpVipAttribute, ok := attributes["hsrp_vip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_vip is missing from object`)

		return nil, diags
	}

	hsrpVipVal, ok := hsrpVipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_vip expected to be basetypes.StringValue, was: %T`, hsrpVipAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return nil, diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return nil, diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return nil, diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	ipv4PrefixLengthAttribute, ok := attributes["ipv4_prefix_length"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_prefix_length is missing from object`)

		return nil, diags
	}

	ipv4PrefixLengthVal, ok := ipv4PrefixLengthAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_prefix_length expected to be basetypes.StringValue, was: %T`, ipv4PrefixLengthAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return nil, diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return nil, diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return nil, diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return nil, diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return nil, diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	preemptAttribute, ok := attributes["preempt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`preempt is missing from object`)

		return nil, diags
	}

	preemptVal, ok := preemptAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`preempt expected to be basetypes.BoolValue, was: %T`, preemptAttribute))
	}

	routingTagAttribute, ok := attributes["routing_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routing_tag is missing from object`)

		return nil, diags
	}

	routingTagVal, ok := routingTagAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routing_tag expected to be basetypes.StringValue, was: %T`, routingTagAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return nil, diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	vrfDhcp1Attribute, ok := attributes["vrf_dhcp1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp1 is missing from object`)

		return nil, diags
	}

	vrfDhcp1Val, ok := vrfDhcp1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp1 expected to be basetypes.StringValue, was: %T`, vrfDhcp1Attribute))
	}

	vrfDhcp2Attribute, ok := attributes["vrf_dhcp2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp2 is missing from object`)

		return nil, diags
	}

	vrfDhcp2Val, ok := vrfDhcp2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp2 expected to be basetypes.StringValue, was: %T`, vrfDhcp2Attribute))
	}

	vrfDhcp3Attribute, ok := attributes["vrf_dhcp3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp3 is missing from object`)

		return nil, diags
	}

	vrfDhcp3Val, ok := vrfDhcp3Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp3 expected to be basetypes.StringValue, was: %T`, vrfDhcp3Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		AdminState:                adminStateVal,
		AdvertiseSubnetInUnderlay: advertiseSubnetInUnderlayVal,
		DeploymentStatus:          deploymentStatusVal,
		DhcpServerAddr1:           dhcpServerAddr1Val,
		DhcpServerAddr2:           dhcpServerAddr2Val,
		DhcpServerAddr3:           dhcpServerAddr3Val,
		DisableIpRedirects:        disableIpRedirectsVal,
		EnableHsrp:                enableHsrpVal,
		FreeformConfig:            freeformConfigVal,
		HsrpGroup:                 hsrpGroupVal,
		HsrpPriority:              hsrpPriorityVal,
		HsrpVersion:               hsrpVersionVal,
		HsrpVip:                   hsrpVipVal,
		InterfaceDescription:      interfaceDescriptionVal,
		InterfaceName:             interfaceNameVal,
		Ipv4Address:               ipv4AddressVal,
		Ipv4PrefixLength:          ipv4PrefixLengthVal,
		Mac:                       macVal,
		Mtu:                       mtuVal,
		Netflow:                   netflowVal,
		NetflowMonitor:            netflowMonitorVal,
		NetflowSampler:            netflowSamplerVal,
		Preempt:                   preemptVal,
		RoutingTag:                routingTagVal,
		SerialNumber:              serialNumberVal,
		Vrf:                       vrfVal,
		VrfDhcp1:                  vrfDhcp1Val,
		VrfDhcp2:                  vrfDhcp2Val,
		VrfDhcp3:                  vrfDhcp3Val,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	advertiseSubnetInUnderlayAttribute, ok := attributes["advertise_subnet_in_underlay"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_subnet_in_underlay is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	advertiseSubnetInUnderlayVal, ok := advertiseSubnetInUnderlayAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_subnet_in_underlay expected to be basetypes.BoolValue, was: %T`, advertiseSubnetInUnderlayAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	dhcpServerAddr1Attribute, ok := attributes["dhcp_server_addr1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr1 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	dhcpServerAddr1Val, ok := dhcpServerAddr1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr1 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr1Attribute))
	}

	dhcpServerAddr2Attribute, ok := attributes["dhcp_server_addr2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr2 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	dhcpServerAddr2Val, ok := dhcpServerAddr2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr2 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr2Attribute))
	}

	dhcpServerAddr3Attribute, ok := attributes["dhcp_server_addr3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dhcp_server_addr3 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	dhcpServerAddr3Val, ok := dhcpServerAddr3Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dhcp_server_addr3 expected to be basetypes.StringValue, was: %T`, dhcpServerAddr3Attribute))
	}

	disableIpRedirectsAttribute, ok := attributes["disable_ip_redirects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disable_ip_redirects is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	disableIpRedirectsVal, ok := disableIpRedirectsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disable_ip_redirects expected to be basetypes.BoolValue, was: %T`, disableIpRedirectsAttribute))
	}

	enableHsrpAttribute, ok := attributes["enable_hsrp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enable_hsrp is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	enableHsrpVal, ok := enableHsrpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enable_hsrp expected to be basetypes.BoolValue, was: %T`, enableHsrpAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	hsrpGroupAttribute, ok := attributes["hsrp_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_group is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	hsrpGroupVal, ok := hsrpGroupAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_group expected to be basetypes.Int64Value, was: %T`, hsrpGroupAttribute))
	}

	hsrpPriorityAttribute, ok := attributes["hsrp_priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_priority is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	hsrpPriorityVal, ok := hsrpPriorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_priority expected to be basetypes.Int64Value, was: %T`, hsrpPriorityAttribute))
	}

	hsrpVersionAttribute, ok := attributes["hsrp_version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_version is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	hsrpVersionVal, ok := hsrpVersionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_version expected to be basetypes.StringValue, was: %T`, hsrpVersionAttribute))
	}

	hsrpVipAttribute, ok := attributes["hsrp_vip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hsrp_vip is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	hsrpVipVal, ok := hsrpVipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hsrp_vip expected to be basetypes.StringValue, was: %T`, hsrpVipAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	ipv4PrefixLengthAttribute, ok := attributes["ipv4_prefix_length"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_prefix_length is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipv4PrefixLengthVal, ok := ipv4PrefixLengthAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_prefix_length expected to be basetypes.StringValue, was: %T`, ipv4PrefixLengthAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	preemptAttribute, ok := attributes["preempt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`preempt is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	preemptVal, ok := preemptAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`preempt expected to be basetypes.BoolValue, was: %T`, preemptAttribute))
	}

	routingTagAttribute, ok := attributes["routing_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`routing_tag is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	routingTagVal, ok := routingTagAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`routing_tag expected to be basetypes.StringValue, was: %T`, routingTagAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	vrfDhcp1Attribute, ok := attributes["vrf_dhcp1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp1 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfDhcp1Val, ok := vrfDhcp1Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp1 expected to be basetypes.StringValue, was: %T`, vrfDhcp1Attribute))
	}

	vrfDhcp2Attribute, ok := attributes["vrf_dhcp2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp2 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfDhcp2Val, ok := vrfDhcp2Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp2 expected to be basetypes.StringValue, was: %T`, vrfDhcp2Attribute))
	}

	vrfDhcp3Attribute, ok := attributes["vrf_dhcp3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_dhcp3 is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfDhcp3Val, ok := vrfDhcp3Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_dhcp3 expected to be basetypes.StringValue, was: %T`, vrfDhcp3Attribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		AdminState:                adminStateVal,
		AdvertiseSubnetInUnderlay: advertiseSubnetInUnderlayVal,
		DeploymentStatus:          deploymentStatusVal,
		DhcpServerAddr1:           dhcpServerAddr1Val,
		DhcpServerAddr2:           dhcpServerAddr2Val,
		DhcpServerAddr3:           dhcpServerAddr3Val,
		DisableIpRedirects:        disableIpRedirectsVal,
		EnableHsrp:                enableHsrpVal,
		FreeformConfig:            freeformConfigVal,
		HsrpGroup:                 hsrpGroupVal,
		HsrpPriority:              hsrpPriorityVal,
		HsrpVersion:               hsrpVersionVal,
		HsrpVip:                   hsrpVipVal,
		InterfaceDescription:      interfaceDescriptionVal,
		InterfaceName:             interfaceNameVal,
		Ipv4Address:               ipv4AddressVal,
		Ipv4PrefixLength:          ipv4PrefixLengthVal,
		Mac:                       macVal,
		Mtu:                       mtuVal,
		Netflow:                   netflowVal,
		NetflowMonitor:            netflowMonitorVal,
		NetflowSampler:            netflowSamplerVal,
		Preempt:                   preemptVal,
		RoutingTag:                routingTagVal,
		SerialNumber:              serialNumberVal,
		Vrf:                       vrfVal,
		VrfDhcp1:                  vrfDhcp1Val,
		VrfDhcp2:                  vrfDhcp2Val,
		VrfDhcp3:                  vrfDhcp3Val,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	AdminState                basetypes.BoolValue   `tfsdk:"admin_state"`
	AdvertiseSubnetInUnderlay basetypes.BoolValue   `tfsdk:"advertise_subnet_in_underlay"`
	DeploymentStatus          basetypes.StringValue `tfsdk:"deployment_status"`
	DhcpServerAddr1           basetypes.StringValue `tfsdk:"dhcp_server_addr1"`
	DhcpServerAddr2           basetypes.StringValue `tfsdk:"dhcp_server_addr2"`
	DhcpServerAddr3           basetypes.StringValue `tfsdk:"dhcp_server_addr3"`
	DisableIpRedirects        basetypes.BoolValue   `tfsdk:"disable_ip_redirects"`
	EnableHsrp                basetypes.BoolValue   `tfsdk:"enable_hsrp"`
	FreeformConfig            basetypes.StringValue `tfsdk:"freeform_config"`
	HsrpGroup                 basetypes.Int64Value  `tfsdk:"hsrp_group"`
	HsrpPriority              basetypes.Int64Value  `tfsdk:"hsrp_priority"`
	HsrpVersion               basetypes.StringValue `tfsdk:"hsrp_version"`
	HsrpVip                   basetypes.StringValue `tfsdk:"hsrp_vip"`
	InterfaceDescription      basetypes.StringValue `tfsdk:"interface_description"`
	InterfaceName             basetypes.StringValue `tfsdk:"interface_name"`
	Ipv4Address               basetypes.StringValue `tfsdk:"ipv4_address"`
	Ipv4PrefixLength          basetypes.StringValue `tfsdk:"ipv4_prefix_length"`
	Mac                       basetypes.StringValue `tfsdk:"mac"`
	Mtu                       basetypes.StringValue `tfsdk:"mtu"`
	Netflow                   basetypes.BoolValue   `tfsdk:"netflow"`
	NetflowMonitor            basetypes.StringValue `tfsdk:"netflow_monitor"`
	NetflowSampler            basetypes.StringValue `tfsdk:"netflow_sampler"`
	Preempt                   basetypes.BoolValue   `tfsdk:"preempt"`
	RoutingTag                basetypes.StringValue `tfsdk:"routing_tag"`
	SerialNumber              basetypes.StringValue `tfsdk:"serial_number"`
	Vrf                       basetypes.StringValue `tfsdk:"vrf"`
	VrfDhcp1                  basetypes.StringValue `tfsdk:"vrf_dhcp1"`
	VrfDhcp2                  basetypes.StringValue `tfsdk:"vrf_dhcp2"`
	VrfDhcp3                  basetypes.StringValue `tfsdk:"vrf_dhcp3"`
	state                     attr.ValueState
}

func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 29)

	var val tftypes.Value
	var err error

	attrTypes["admin_state"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["advertise_subnet_in_underlay"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["deployment_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dhcp_server_addr1"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dhcp_server_addr2"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dhcp_server_addr3"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["disable_ip_redirects"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enable_hsrp"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hsrp_group"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["hsrp_priority"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["hsrp_version"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hsrp_vip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv4_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv4_prefix_length"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mtu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["netflow"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["netflow_monitor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["netflow_sampler"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["preempt"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["routing_tag"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_dhcp1"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_dhcp2"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_dhcp3"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 29)

		val, err = v.AdminState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["admin_state"] = val

		val, err = v.AdvertiseSubnetInUnderlay.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["advertise_subnet_in_underlay"] = val

		val, err = v.DeploymentStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deployment_status"] = val

		val, err = v.DhcpServerAddr1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dhcp_server_addr1"] = val

		val, err = v.DhcpServerAddr2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dhcp_server_addr2"] = val

		val, err = v.DhcpServerAddr3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dhcp_server_addr3"] = val

		val, err = v.DisableIpRedirects.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disable_ip_redirects"] = val

		val, err = v.EnableHsrp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enable_hsrp"] = val

		val, err = v.FreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["freeform_config"] = val

		val, err = v.HsrpGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hsrp_group"] = val

		val, err = v.HsrpPriority.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hsrp_priority"] = val

		val, err = v.HsrpVersion.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hsrp_version"] = val

		val, err = v.HsrpVip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hsrp_vip"] = val

		val, err = v.InterfaceDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_description"] = val

		val, err = v.InterfaceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_name"] = val

		val, err = v.Ipv4Address.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv4_address"] = val

		val, err = v.Ipv4PrefixLength.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv4_prefix_length"] = val

		val, err = v.Mac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac"] = val

		val, err = v.Mtu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mtu"] = val

		val, err = v.Netflow.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow"] = val

		val, err = v.NetflowMonitor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_monitor"] = val

		val, err = v.NetflowSampler.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_sampler"] = val

		val, err = v.Preempt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["preempt"] = val

		val, err = v.RoutingTag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["routing_tag"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.Vrf.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf"] = val

		val, err = v.VrfDhcp1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_dhcp1"] = val

		val, err = v.VrfDhcp2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_dhcp2"] = val

		val, err = v.VrfDhcp3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_dhcp3"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"admin_state":                  basetypes.BoolType{},
		"advertise_subnet_in_underlay": basetypes.BoolType{},
		"deployment_status":            basetypes.StringType{},
		"dhcp_server_addr1":            basetypes.StringType{},
		"dhcp_server_addr2":            basetypes.StringType{},
		"dhcp_server_addr3":            basetypes.StringType{},
		"disable_ip_redirects":         basetypes.BoolType{},
		"enable_hsrp":                  basetypes.BoolType{},
		"freeform_config":              basetypes.StringType{},
		"hsrp_group":                   basetypes.Int64Type{},
		"hsrp_priority":                basetypes.Int64Type{},
		"hsrp_version":                 basetypes.StringType{},
		"hsrp_vip":                     basetypes.StringType{},
		"interface_description":        basetypes.StringType{},
		"interface_name":               basetypes.StringType{},
		"ipv4_address":                 basetypes.StringType{},
		"ipv4_prefix_length":           basetypes.StringType{},
		"mac":                          basetypes.StringType{},
		"mtu":                          basetypes.StringType{},
		"netflow":                      basetypes.BoolType{},
		"netflow_monitor":              basetypes.StringType{},
		"netflow_sampler":              basetypes.StringType{},
		"preempt":                      basetypes.BoolType{},
		"routing_tag":                  basetypes.StringType{},
		"serial_number":                basetypes.StringType{},
		"vrf":                          basetypes.StringType{},
		"vrf_dhcp1":                    basetypes.StringType{},
		"vrf_dhcp2":                    basetypes.StringType{},
		"vrf_dhcp3":                    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"admin_state":                  v.AdminState,
			"advertise_subnet_in_underlay": v.AdvertiseSubnetInUnderlay,
			"deployment_status":            v.DeploymentStatus,
			"dhcp_server_addr1":            v.DhcpServerAddr1,
			"dhcp_server_addr2":            v.DhcpServerAddr2,
			"dhcp_server_addr3":            v.DhcpServerAddr3,
			"disable_ip_redirects":         v.DisableIpRedirects,
			"enable_hsrp":                  v.EnableHsrp,
			"freeform_config":              v.FreeformConfig,
			"hsrp_group":                   v.HsrpGroup,
			"hsrp_priority":                v.HsrpPriority,
			"hsrp_version":                 v.HsrpVersion,
			"hsrp_vip":                     v.HsrpVip,
			"interface_description":        v.InterfaceDescription,
			"interface_name":               v.InterfaceName,
			"ipv4_address":                 v.Ipv4Address,
			"ipv4_prefix_length":           v.Ipv4PrefixLength,
			"mac":                          v.Mac,
			"mtu":                          v.Mtu,
			"netflow":                      v.Netflow,
			"netflow_monitor":              v.NetflowMonitor,
			"netflow_sampler":              v.NetflowSampler,
			"preempt":                      v.Preempt,
			"routing_tag":                  v.RoutingTag,
			"serial_number":                v.SerialNumber,
			"vrf":                          v.Vrf,
			"vrf_dhcp1":                    v.VrfDhcp1,
			"vrf_dhcp2":                    v.VrfDhcp2,
			"vrf_dhcp3":                    v.VrfDhcp3,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdminState.Equal(other.AdminState) {
		return false
	}

	if !v.AdvertiseSubnetInUnderlay.Equal(other.AdvertiseSubnetInUnderlay) {
		return false
	}

	if !v.DeploymentStatus.Equal(other.DeploymentStatus) {
		return false
	}

	if !v.DhcpServerAddr1.Equal(other.DhcpServerAddr1) {
		return false
	}

	if !v.DhcpServerAddr2.Equal(other.DhcpServerAddr2) {
		return false
	}

	if !v.DhcpServerAddr3.Equal(other.DhcpServerAddr3) {
		return false
	}

	if !v.DisableIpRedirects.Equal(other.DisableIpRedirects) {
		return false
	}

	if !v.EnableHsrp.Equal(other.EnableHsrp) {
		return false
	}

	if !v.FreeformConfig.Equal(other.FreeformConfig) {
		return false
	}

	if !v.HsrpGroup.Equal(other.HsrpGroup) {
		return false
	}

	if !v.HsrpPriority.Equal(other.HsrpPriority) {
		return false
	}

	if !v.HsrpVersion.Equal(other.HsrpVersion) {
		return false
	}

	if !v.HsrpVip.Equal(other.HsrpVip) {
		return false
	}

	if !v.InterfaceDescription.Equal(other.InterfaceDescription) {
		return false
	}

	if !v.InterfaceName.Equal(other.InterfaceName) {
		return false
	}

	if !v.Ipv4Address.Equal(other.Ipv4Address) {
		return false
	}

	if !v.Ipv4PrefixLength.Equal(other.Ipv4PrefixLength) {
		return false
	}

	if !v.Mac.Equal(other.Mac) {
		return false
	}

	if !v.Mtu.Equal(other.Mtu) {
		return false
	}

	if !v.Netflow.Equal(other.Netflow) {
		return false
	}

	if !v.NetflowMonitor.Equal(other.NetflowMonitor) {
		return false
	}

	if !v.NetflowSampler.Equal(other.NetflowSampler) {
		return false
	}

	if !v.Preempt.Equal(other.Preempt) {
		return false
	}

	if !v.RoutingTag.Equal(other.RoutingTag) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.Vrf.Equal(other.Vrf) {
		return false
	}

	if !v.VrfDhcp1.Equal(other.VrfDhcp1) {
		return false
	}

	if !v.VrfDhcp2.Equal(other.VrfDhcp2) {
		return false
	}

	if !v.VrfDhcp3.Equal(other.VrfDhcp3) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"admin_state":                  basetypes.BoolType{},
		"advertise_subnet_in_underlay": basetypes.BoolType{},
		"deployment_status":            basetypes.StringType{},
		"dhcp_server_addr1":            basetypes.StringType{},
		"dhcp_server_addr2":            basetypes.StringType{},
		"dhcp_server_addr3":            basetypes.StringType{},
		"disable_ip_redirects":         basetypes.BoolType{},
		"enable_hsrp":                  basetypes.BoolType{},
		"freeform_config":              basetypes.StringType{},
		"hsrp_group":                   basetypes.Int64Type{},
		"hsrp_priority":                basetypes.Int64Type{},
		"hsrp_version":                 basetypes.StringType{},
		"hsrp_vip":                     basetypes.StringType{},
		"interface_description":        basetypes.StringType{},
		"interface_name":               basetypes.StringType{},
		"ipv4_address":                 basetypes.StringType{},
		"ipv4_prefix_length":           basetypes.StringType{},
		"mac":                          basetypes.StringType{},
		"mtu":                          basetypes.StringType{},
		"netflow":                      basetypes.BoolType{},
		"netflow_monitor":              basetypes.StringType{},
		"netflow_sampler":              basetypes.StringType{},
		"preempt":                      basetypes.BoolType{},
		"routing_tag":                  basetypes.StringType{},
		"serial_number":                basetypes.StringType{},
		"vrf":                          basetypes.StringType{},
		"vrf_dhcp1":                    basetypes.StringType{},
		"vrf_dhcp2":                    basetypes.StringType{},
		"vrf_dhcp3":                    basetypes.StringType{},
	}
}
