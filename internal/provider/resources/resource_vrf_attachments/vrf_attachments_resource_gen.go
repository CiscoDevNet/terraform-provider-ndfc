// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_vrf_attachments

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func VrfAttachmentsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"deploy_all_attachments": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy all attachments in this resource",
				MarkdownDescription: "Deploy all attachments in this resource",
				Default:             booldefault.StaticBool(false),
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Terraform unique Id for the resource",
				MarkdownDescription: "Terraform unique Id for the resource",
			},
			"vrf_attachments": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"attach_list": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"attach_state": schema.StringAttribute{
										Computed:            true,
										Description:         "The state of the attachment",
										MarkdownDescription: "The state of the attachment",
									},
									"attached": schema.BoolAttribute{
										Computed:            true,
										Description:         "The state of the attachment",
										MarkdownDescription: "The state of the attachment",
									},
									"deploy_this_attachment": schema.BoolAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "Deploy this attachment",
										MarkdownDescription: "Deploy this attachment",
										Default:             booldefault.StaticBool(false),
									},
									"freeform_config": schema.StringAttribute{
										Optional:            true,
										Description:         "This field covers any configuration not included in overlay templates which is needed as part of this VRF attachment",
										MarkdownDescription: "This field covers any configuration not included in overlay templates which is needed as part of this VRF attachment",
									},
									"loopback_id": schema.Int64Attribute{
										Optional:            true,
										Description:         "Override loopback ID",
										MarkdownDescription: "Override loopback ID",
									},
									"loopback_ipv4": schema.StringAttribute{
										Optional:            true,
										Description:         "Override loopback IPv4 address",
										MarkdownDescription: "Override loopback IPv4 address",
									},
									"loopback_ipv6": schema.StringAttribute{
										Optional:            true,
										Description:         "Override loopback IPv6 address",
										MarkdownDescription: "Override loopback IPv6 address",
									},
									"serial_number": schema.StringAttribute{
										Required:            true,
										Description:         "Serial number of a switch",
										MarkdownDescription: "Serial number of a switch",
									},
									"switch_name": schema.StringAttribute{
										Computed:            true,
										Description:         "The name of the switch",
										MarkdownDescription: "The name of the switch",
									},
									"vlan": schema.Int64Attribute{
										Optional:            true,
										Computed:            true,
										Description:         "VLAN ID",
										MarkdownDescription: "VLAN ID",
										PlanModifiers: []planmodifier.Int64{
											int64planmodifier.UseStateForUnknown(),
										},
									},
								},
								CustomType: AttachListType{
									ObjectType: types.ObjectType{
										AttrTypes: AttachListValue{}.AttributeTypes(ctx),
									},
								},
							},
							Required:            true,
							Description:         "List of switches attached to the VRF",
							MarkdownDescription: "List of switches attached to the VRF",
						},
						"deploy_all_attachments": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Deploy all attachments in this VRF",
							MarkdownDescription: "Deploy all attachments in this VRF",
							Default:             booldefault.StaticBool(false),
						},
						"vrf_name": schema.StringAttribute{
							Required:            true,
							Description:         "The name of the VRF",
							MarkdownDescription: "The name of the VRF",
						},
					},
					CustomType: VrfAttachmentsType{
						ObjectType: types.ObjectType{
							AttrTypes: VrfAttachmentsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "List of Attachments",
				MarkdownDescription: "List of Attachments",
			},
		},
	}
}

type VrfAttachmentsModel struct {
	DeployAllAttachments types.Bool   `tfsdk:"deploy_all_attachments"`
	FabricName           types.String `tfsdk:"fabric_name"`
	Id                   types.String `tfsdk:"id"`
	VrfAttachments       types.List   `tfsdk:"vrf_attachments"`
}

var _ basetypes.ObjectTypable = VrfAttachmentsType{}

type VrfAttachmentsType struct {
	basetypes.ObjectType
}

func (t VrfAttachmentsType) Equal(o attr.Type) bool {
	other, ok := o.(VrfAttachmentsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VrfAttachmentsType) String() string {
	return "VrfAttachmentsType"
}

func (t VrfAttachmentsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attachListAttribute, ok := attributes["attach_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attach_list is missing from object`)

		return nil, diags
	}

	attachListVal, ok := attachListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attach_list expected to be basetypes.ListValue, was: %T`, attachListAttribute))
	}

	deployAllAttachmentsAttribute, ok := attributes["deploy_all_attachments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deploy_all_attachments is missing from object`)

		return nil, diags
	}

	deployAllAttachmentsVal, ok := deployAllAttachmentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deploy_all_attachments expected to be basetypes.BoolValue, was: %T`, deployAllAttachmentsAttribute))
	}

	vrfNameAttribute, ok := attributes["vrf_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_name is missing from object`)

		return nil, diags
	}

	vrfNameVal, ok := vrfNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_name expected to be basetypes.StringValue, was: %T`, vrfNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VrfAttachmentsValue{
		AttachList:           attachListVal,
		DeployAllAttachments: deployAllAttachmentsVal,
		VrfName:              vrfNameVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewVrfAttachmentsValueNull() VrfAttachmentsValue {
	return VrfAttachmentsValue{
		state: attr.ValueStateNull,
	}
}

func NewVrfAttachmentsValueUnknown() VrfAttachmentsValue {
	return VrfAttachmentsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVrfAttachmentsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VrfAttachmentsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VrfAttachmentsValue Attribute Value",
				"While creating a VrfAttachmentsValue value, a missing attribute value was detected. "+
					"A VrfAttachmentsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VrfAttachmentsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VrfAttachmentsValue Attribute Type",
				"While creating a VrfAttachmentsValue value, an invalid attribute value was detected. "+
					"A VrfAttachmentsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VrfAttachmentsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VrfAttachmentsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VrfAttachmentsValue Attribute Value",
				"While creating a VrfAttachmentsValue value, an extra attribute value was detected. "+
					"A VrfAttachmentsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VrfAttachmentsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVrfAttachmentsValueUnknown(), diags
	}

	attachListAttribute, ok := attributes["attach_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attach_list is missing from object`)

		return NewVrfAttachmentsValueUnknown(), diags
	}

	attachListVal, ok := attachListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attach_list expected to be basetypes.ListValue, was: %T`, attachListAttribute))
	}

	deployAllAttachmentsAttribute, ok := attributes["deploy_all_attachments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deploy_all_attachments is missing from object`)

		return NewVrfAttachmentsValueUnknown(), diags
	}

	deployAllAttachmentsVal, ok := deployAllAttachmentsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deploy_all_attachments expected to be basetypes.BoolValue, was: %T`, deployAllAttachmentsAttribute))
	}

	vrfNameAttribute, ok := attributes["vrf_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_name is missing from object`)

		return NewVrfAttachmentsValueUnknown(), diags
	}

	vrfNameVal, ok := vrfNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_name expected to be basetypes.StringValue, was: %T`, vrfNameAttribute))
	}

	if diags.HasError() {
		return NewVrfAttachmentsValueUnknown(), diags
	}

	return VrfAttachmentsValue{
		AttachList:           attachListVal,
		DeployAllAttachments: deployAllAttachmentsVal,
		VrfName:              vrfNameVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewVrfAttachmentsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VrfAttachmentsValue {
	object, diags := NewVrfAttachmentsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVrfAttachmentsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VrfAttachmentsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVrfAttachmentsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVrfAttachmentsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVrfAttachmentsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVrfAttachmentsValueMust(t.AttrTypes, attributes), nil
}

func (t VrfAttachmentsType) ValueType(ctx context.Context) attr.Value {
	return VrfAttachmentsValue{}
}

var _ basetypes.ObjectValuable = VrfAttachmentsValue{}

type VrfAttachmentsValue struct {
	AttachList           basetypes.ListValue   `tfsdk:"attach_list"`
	DeployAllAttachments basetypes.BoolValue   `tfsdk:"deploy_all_attachments"`
	VrfName              basetypes.StringValue `tfsdk:"vrf_name"`
	state                attr.ValueState
}

func (v VrfAttachmentsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["attach_list"] = basetypes.ListType{
		ElemType: AttachListValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["deploy_all_attachments"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["vrf_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AttachList.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attach_list"] = val

		val, err = v.DeployAllAttachments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deploy_all_attachments"] = val

		val, err = v.VrfName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VrfAttachmentsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VrfAttachmentsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VrfAttachmentsValue) String() string {
	return "VrfAttachmentsValue"
}

func (v VrfAttachmentsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	attachList := types.ListValueMust(
		AttachListType{
			basetypes.ObjectType{
				AttrTypes: AttachListValue{}.AttributeTypes(ctx),
			},
		},
		v.AttachList.Elements(),
	)

	if v.AttachList.IsNull() {
		attachList = types.ListNull(
			AttachListType{
				basetypes.ObjectType{
					AttrTypes: AttachListValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.AttachList.IsUnknown() {
		attachList = types.ListUnknown(
			AttachListType{
				basetypes.ObjectType{
					AttrTypes: AttachListValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"attach_list": basetypes.ListType{
				ElemType: AttachListValue{}.Type(ctx),
			},
			"deploy_all_attachments": basetypes.BoolType{},
			"vrf_name":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"attach_list":            attachList,
			"deploy_all_attachments": v.DeployAllAttachments,
			"vrf_name":               v.VrfName,
		})

	return objVal, diags
}

func (v VrfAttachmentsValue) Equal(o attr.Value) bool {
	other, ok := o.(VrfAttachmentsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AttachList.Equal(other.AttachList) {
		return false
	}

	if !v.DeployAllAttachments.Equal(other.DeployAllAttachments) {
		return false
	}

	if !v.VrfName.Equal(other.VrfName) {
		return false
	}

	return true
}

func (v VrfAttachmentsValue) Type(ctx context.Context) attr.Type {
	return VrfAttachmentsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VrfAttachmentsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attach_list": basetypes.ListType{
			ElemType: AttachListValue{}.Type(ctx),
		},
		"deploy_all_attachments": basetypes.BoolType{},
		"vrf_name":               basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AttachListType{}

type AttachListType struct {
	basetypes.ObjectType
}

func (t AttachListType) Equal(o attr.Type) bool {
	other, ok := o.(AttachListType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AttachListType) String() string {
	return "AttachListType"
}

func (t AttachListType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attachStateAttribute, ok := attributes["attach_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attach_state is missing from object`)

		return nil, diags
	}

	attachStateVal, ok := attachStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attach_state expected to be basetypes.StringValue, was: %T`, attachStateAttribute))
	}

	attachedAttribute, ok := attributes["attached"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attached is missing from object`)

		return nil, diags
	}

	attachedVal, ok := attachedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attached expected to be basetypes.BoolValue, was: %T`, attachedAttribute))
	}

	deployThisAttachmentAttribute, ok := attributes["deploy_this_attachment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deploy_this_attachment is missing from object`)

		return nil, diags
	}

	deployThisAttachmentVal, ok := deployThisAttachmentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deploy_this_attachment expected to be basetypes.BoolValue, was: %T`, deployThisAttachmentAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return nil, diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	loopbackIdAttribute, ok := attributes["loopback_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_id is missing from object`)

		return nil, diags
	}

	loopbackIdVal, ok := loopbackIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_id expected to be basetypes.Int64Value, was: %T`, loopbackIdAttribute))
	}

	loopbackIpv4Attribute, ok := attributes["loopback_ipv4"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_ipv4 is missing from object`)

		return nil, diags
	}

	loopbackIpv4Val, ok := loopbackIpv4Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_ipv4 expected to be basetypes.StringValue, was: %T`, loopbackIpv4Attribute))
	}

	loopbackIpv6Attribute, ok := attributes["loopback_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_ipv6 is missing from object`)

		return nil, diags
	}

	loopbackIpv6Val, ok := loopbackIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_ipv6 expected to be basetypes.StringValue, was: %T`, loopbackIpv6Attribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchNameAttribute, ok := attributes["switch_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_name is missing from object`)

		return nil, diags
	}

	switchNameVal, ok := switchNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_name expected to be basetypes.StringValue, was: %T`, switchNameAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return nil, diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AttachListValue{
		AttachState:          attachStateVal,
		Attached:             attachedVal,
		DeployThisAttachment: deployThisAttachmentVal,
		FreeformConfig:       freeformConfigVal,
		LoopbackId:           loopbackIdVal,
		LoopbackIpv4:         loopbackIpv4Val,
		LoopbackIpv6:         loopbackIpv6Val,
		SerialNumber:         serialNumberVal,
		SwitchName:           switchNameVal,
		Vlan:                 vlanVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewAttachListValueNull() AttachListValue {
	return AttachListValue{
		state: attr.ValueStateNull,
	}
}

func NewAttachListValueUnknown() AttachListValue {
	return AttachListValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAttachListValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AttachListValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AttachListValue Attribute Value",
				"While creating a AttachListValue value, a missing attribute value was detected. "+
					"A AttachListValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AttachListValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AttachListValue Attribute Type",
				"While creating a AttachListValue value, an invalid attribute value was detected. "+
					"A AttachListValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AttachListValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AttachListValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AttachListValue Attribute Value",
				"While creating a AttachListValue value, an extra attribute value was detected. "+
					"A AttachListValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AttachListValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAttachListValueUnknown(), diags
	}

	attachStateAttribute, ok := attributes["attach_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attach_state is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	attachStateVal, ok := attachStateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attach_state expected to be basetypes.StringValue, was: %T`, attachStateAttribute))
	}

	attachedAttribute, ok := attributes["attached"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attached is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	attachedVal, ok := attachedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attached expected to be basetypes.BoolValue, was: %T`, attachedAttribute))
	}

	deployThisAttachmentAttribute, ok := attributes["deploy_this_attachment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deploy_this_attachment is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	deployThisAttachmentVal, ok := deployThisAttachmentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deploy_this_attachment expected to be basetypes.BoolValue, was: %T`, deployThisAttachmentAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	loopbackIdAttribute, ok := attributes["loopback_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_id is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	loopbackIdVal, ok := loopbackIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_id expected to be basetypes.Int64Value, was: %T`, loopbackIdAttribute))
	}

	loopbackIpv4Attribute, ok := attributes["loopback_ipv4"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_ipv4 is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	loopbackIpv4Val, ok := loopbackIpv4Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_ipv4 expected to be basetypes.StringValue, was: %T`, loopbackIpv4Attribute))
	}

	loopbackIpv6Attribute, ok := attributes["loopback_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_ipv6 is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	loopbackIpv6Val, ok := loopbackIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_ipv6 expected to be basetypes.StringValue, was: %T`, loopbackIpv6Attribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchNameAttribute, ok := attributes["switch_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_name is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	switchNameVal, ok := switchNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_name expected to be basetypes.StringValue, was: %T`, switchNameAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return NewAttachListValueUnknown(), diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return NewAttachListValueUnknown(), diags
	}

	return AttachListValue{
		AttachState:          attachStateVal,
		Attached:             attachedVal,
		DeployThisAttachment: deployThisAttachmentVal,
		FreeformConfig:       freeformConfigVal,
		LoopbackId:           loopbackIdVal,
		LoopbackIpv4:         loopbackIpv4Val,
		LoopbackIpv6:         loopbackIpv6Val,
		SerialNumber:         serialNumberVal,
		SwitchName:           switchNameVal,
		Vlan:                 vlanVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewAttachListValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AttachListValue {
	object, diags := NewAttachListValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAttachListValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AttachListType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAttachListValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAttachListValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAttachListValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAttachListValueMust(t.AttrTypes, attributes), nil
}

func (t AttachListType) ValueType(ctx context.Context) attr.Value {
	return AttachListValue{}
}

var _ basetypes.ObjectValuable = AttachListValue{}

type AttachListValue struct {
	AttachState          basetypes.StringValue `tfsdk:"attach_state"`
	Attached             basetypes.BoolValue   `tfsdk:"attached"`
	DeployThisAttachment basetypes.BoolValue   `tfsdk:"deploy_this_attachment"`
	FreeformConfig       basetypes.StringValue `tfsdk:"freeform_config"`
	LoopbackId           basetypes.Int64Value  `tfsdk:"loopback_id"`
	LoopbackIpv4         basetypes.StringValue `tfsdk:"loopback_ipv4"`
	LoopbackIpv6         basetypes.StringValue `tfsdk:"loopback_ipv6"`
	SerialNumber         basetypes.StringValue `tfsdk:"serial_number"`
	SwitchName           basetypes.StringValue `tfsdk:"switch_name"`
	Vlan                 basetypes.Int64Value  `tfsdk:"vlan"`
	state                attr.ValueState
}

func (v AttachListValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["attach_state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["attached"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["deploy_this_attachment"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["loopback_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["loopback_ipv4"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["loopback_ipv6"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["switch_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vlan"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.AttachState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attach_state"] = val

		val, err = v.Attached.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attached"] = val

		val, err = v.DeployThisAttachment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deploy_this_attachment"] = val

		val, err = v.FreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["freeform_config"] = val

		val, err = v.LoopbackId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["loopback_id"] = val

		val, err = v.LoopbackIpv4.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["loopback_ipv4"] = val

		val, err = v.LoopbackIpv6.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["loopback_ipv6"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.SwitchName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["switch_name"] = val

		val, err = v.Vlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AttachListValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AttachListValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AttachListValue) String() string {
	return "AttachListValue"
}

func (v AttachListValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"attach_state":           basetypes.StringType{},
			"attached":               basetypes.BoolType{},
			"deploy_this_attachment": basetypes.BoolType{},
			"freeform_config":        basetypes.StringType{},
			"loopback_id":            basetypes.Int64Type{},
			"loopback_ipv4":          basetypes.StringType{},
			"loopback_ipv6":          basetypes.StringType{},
			"serial_number":          basetypes.StringType{},
			"switch_name":            basetypes.StringType{},
			"vlan":                   basetypes.Int64Type{},
		},
		map[string]attr.Value{
			"attach_state":           v.AttachState,
			"attached":               v.Attached,
			"deploy_this_attachment": v.DeployThisAttachment,
			"freeform_config":        v.FreeformConfig,
			"loopback_id":            v.LoopbackId,
			"loopback_ipv4":          v.LoopbackIpv4,
			"loopback_ipv6":          v.LoopbackIpv6,
			"serial_number":          v.SerialNumber,
			"switch_name":            v.SwitchName,
			"vlan":                   v.Vlan,
		})

	return objVal, diags
}

func (v AttachListValue) Equal(o attr.Value) bool {
	other, ok := o.(AttachListValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AttachState.Equal(other.AttachState) {
		return false
	}

	if !v.Attached.Equal(other.Attached) {
		return false
	}

	if !v.DeployThisAttachment.Equal(other.DeployThisAttachment) {
		return false
	}

	if !v.FreeformConfig.Equal(other.FreeformConfig) {
		return false
	}

	if !v.LoopbackId.Equal(other.LoopbackId) {
		return false
	}

	if !v.LoopbackIpv4.Equal(other.LoopbackIpv4) {
		return false
	}

	if !v.LoopbackIpv6.Equal(other.LoopbackIpv6) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.SwitchName.Equal(other.SwitchName) {
		return false
	}

	if !v.Vlan.Equal(other.Vlan) {
		return false
	}

	return true
}

func (v AttachListValue) Type(ctx context.Context) attr.Type {
	return AttachListType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AttachListValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attach_state":           basetypes.StringType{},
		"attached":               basetypes.BoolType{},
		"deploy_this_attachment": basetypes.BoolType{},
		"freeform_config":        basetypes.StringType{},
		"loopback_id":            basetypes.Int64Type{},
		"loopback_ipv4":          basetypes.StringType{},
		"loopback_ipv6":          basetypes.StringType{},
		"serial_number":          basetypes.StringType{},
		"switch_name":            basetypes.StringType{},
		"vlan":                   basetypes.Int64Type{},
	}
}
