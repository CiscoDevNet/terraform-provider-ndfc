// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_interface_loopback

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InterfaceLoopbackResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy the configuration",
				MarkdownDescription: "Deploy the configuration",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier for the interface",
				MarkdownDescription: "Unique identifier for the interface",
			},
			"interfaces": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"admin_state": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable or disable the interface",
							MarkdownDescription: "Enable or disable the interface",
							Default:             booldefault.StaticBool(true),
						},
						"deployment_status": schema.StringAttribute{
							Computed:            true,
							Description:         "Status of the deployment",
							MarkdownDescription: "Status of the deployment",
						},
						"freeform_config": schema.StringAttribute{
							Optional:            true,
							Description:         "Additional CLI for the interface",
							MarkdownDescription: "Additional CLI for the interface",
						},
						"interface_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"interface_name": schema.StringAttribute{
							Required:            true,
							Description:         "Name of the Interface. Example: `loopback1`",
							MarkdownDescription: "Name of the Interface. Example: `loopback1`",
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`^loopback\d+`), "Must be loopbackX where X is the loopbackID"),
							},
						},
						"ipv4_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv4 address",
							MarkdownDescription: "IPv4 address",
						},
						"ipv6_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv6 address",
							MarkdownDescription: "IPv6 address",
						},
						"route_map_tag": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Route map tag",
							MarkdownDescription: "Route map tag",
							Default:             stringdefault.StaticString("12345"),
						},
						"serial_number": schema.StringAttribute{
							Optional:            true,
							Description:         "Serial number of switch to configure",
							MarkdownDescription: "Serial number of switch to configure",
						},
						"vrf": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "VRF name",
							MarkdownDescription: "VRF name",
							Default:             stringdefault.StaticString("default"),
						},
					},
					CustomType: InterfacesType{
						ObjectType: types.ObjectType{
							AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "interfaces to configure",
				MarkdownDescription: "interfaces to configure",
			},
			"policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				MarkdownDescription: "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				Default:             stringdefault.StaticString("int_loopback"),
			},
			"serial_number": schema.StringAttribute{
				Optional:            true,
				Description:         "Serial number of switch to configure",
				MarkdownDescription: "Serial number of switch to configure",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{path.MatchRoot("interfaces").AtAnyMapKey().AtName("serial_number")}...),
				},
			},
		},
	}
}

type InterfaceLoopbackModel struct {
	Deploy       types.Bool   `tfsdk:"deploy"`
	Id           types.String `tfsdk:"id"`
	Interfaces   types.Map    `tfsdk:"interfaces"`
	Policy       types.String `tfsdk:"policy"`
	SerialNumber types.String `tfsdk:"serial_number"`
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return nil, diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return nil, diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return nil, diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return nil, diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return nil, diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return nil, diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	ipv6AddressAttribute, ok := attributes["ipv6_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_address is missing from object`)

		return nil, diags
	}

	ipv6AddressVal, ok := ipv6AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_address expected to be basetypes.StringValue, was: %T`, ipv6AddressAttribute))
	}

	routeMapTagAttribute, ok := attributes["route_map_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_map_tag is missing from object`)

		return nil, diags
	}

	routeMapTagVal, ok := routeMapTagAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_map_tag expected to be basetypes.StringValue, was: %T`, routeMapTagAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return nil, diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		AdminState:           adminStateVal,
		DeploymentStatus:     deploymentStatusVal,
		FreeformConfig:       freeformConfigVal,
		InterfaceDescription: interfaceDescriptionVal,
		InterfaceName:        interfaceNameVal,
		Ipv4Address:          ipv4AddressVal,
		Ipv6Address:          ipv6AddressVal,
		RouteMapTag:          routeMapTagVal,
		SerialNumber:         serialNumberVal,
		Vrf:                  vrfVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	ipv4AddressAttribute, ok := attributes["ipv4_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv4_address is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipv4AddressVal, ok := ipv4AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv4_address expected to be basetypes.StringValue, was: %T`, ipv4AddressAttribute))
	}

	ipv6AddressAttribute, ok := attributes["ipv6_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_address is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipv6AddressVal, ok := ipv6AddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_address expected to be basetypes.StringValue, was: %T`, ipv6AddressAttribute))
	}

	routeMapTagAttribute, ok := attributes["route_map_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_map_tag is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	routeMapTagVal, ok := routeMapTagAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_map_tag expected to be basetypes.StringValue, was: %T`, routeMapTagAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	vrfAttribute, ok := attributes["vrf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	vrfVal, ok := vrfAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf expected to be basetypes.StringValue, was: %T`, vrfAttribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		AdminState:           adminStateVal,
		DeploymentStatus:     deploymentStatusVal,
		FreeformConfig:       freeformConfigVal,
		InterfaceDescription: interfaceDescriptionVal,
		InterfaceName:        interfaceNameVal,
		Ipv4Address:          ipv4AddressVal,
		Ipv6Address:          ipv6AddressVal,
		RouteMapTag:          routeMapTagVal,
		SerialNumber:         serialNumberVal,
		Vrf:                  vrfVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	AdminState           basetypes.BoolValue   `tfsdk:"admin_state"`
	DeploymentStatus     basetypes.StringValue `tfsdk:"deployment_status"`
	FreeformConfig       basetypes.StringValue `tfsdk:"freeform_config"`
	InterfaceDescription basetypes.StringValue `tfsdk:"interface_description"`
	InterfaceName        basetypes.StringValue `tfsdk:"interface_name"`
	Ipv4Address          basetypes.StringValue `tfsdk:"ipv4_address"`
	Ipv6Address          basetypes.StringValue `tfsdk:"ipv6_address"`
	RouteMapTag          basetypes.StringValue `tfsdk:"route_map_tag"`
	SerialNumber         basetypes.StringValue `tfsdk:"serial_number"`
	Vrf                  basetypes.StringValue `tfsdk:"vrf"`
	state                attr.ValueState
}

func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["admin_state"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["deployment_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv4_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv6_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_map_tag"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.AdminState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["admin_state"] = val

		val, err = v.DeploymentStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deployment_status"] = val

		val, err = v.FreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["freeform_config"] = val

		val, err = v.InterfaceDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_description"] = val

		val, err = v.InterfaceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_name"] = val

		val, err = v.Ipv4Address.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv4_address"] = val

		val, err = v.Ipv6Address.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv6_address"] = val

		val, err = v.RouteMapTag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_map_tag"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.Vrf.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"admin_state":           basetypes.BoolType{},
		"deployment_status":     basetypes.StringType{},
		"freeform_config":       basetypes.StringType{},
		"interface_description": basetypes.StringType{},
		"interface_name":        basetypes.StringType{},
		"ipv4_address":          basetypes.StringType{},
		"ipv6_address":          basetypes.StringType{},
		"route_map_tag":         basetypes.StringType{},
		"serial_number":         basetypes.StringType{},
		"vrf":                   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"admin_state":           v.AdminState,
			"deployment_status":     v.DeploymentStatus,
			"freeform_config":       v.FreeformConfig,
			"interface_description": v.InterfaceDescription,
			"interface_name":        v.InterfaceName,
			"ipv4_address":          v.Ipv4Address,
			"ipv6_address":          v.Ipv6Address,
			"route_map_tag":         v.RouteMapTag,
			"serial_number":         v.SerialNumber,
			"vrf":                   v.Vrf,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdminState.Equal(other.AdminState) {
		return false
	}

	if !v.DeploymentStatus.Equal(other.DeploymentStatus) {
		return false
	}

	if !v.FreeformConfig.Equal(other.FreeformConfig) {
		return false
	}

	if !v.InterfaceDescription.Equal(other.InterfaceDescription) {
		return false
	}

	if !v.InterfaceName.Equal(other.InterfaceName) {
		return false
	}

	if !v.Ipv4Address.Equal(other.Ipv4Address) {
		return false
	}

	if !v.Ipv6Address.Equal(other.Ipv6Address) {
		return false
	}

	if !v.RouteMapTag.Equal(other.RouteMapTag) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.Vrf.Equal(other.Vrf) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"admin_state":           basetypes.BoolType{},
		"deployment_status":     basetypes.StringType{},
		"freeform_config":       basetypes.StringType{},
		"interface_description": basetypes.StringType{},
		"interface_name":        basetypes.StringType{},
		"ipv4_address":          basetypes.StringType{},
		"ipv6_address":          basetypes.StringType{},
		"route_map_tag":         basetypes.StringType{},
		"serial_number":         basetypes.StringType{},
		"vrf":                   basetypes.StringType{},
	}
}
