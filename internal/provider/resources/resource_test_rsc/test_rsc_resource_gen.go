// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_test_rsc

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func TestRscResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier for the interface",
				MarkdownDescription: "Unique identifier for the interface",
			},
			"parameter_map": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"custom_attributes_nested_map": schema.MapAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Description:         "Custom attributes",
							MarkdownDescription: "Custom attributes",
						},
						"serial_number": schema.StringAttribute{
							Required:            true,
							Description:         "Serial number of switch to configure",
							MarkdownDescription: "Serial number of switch to configure",
						},
					},
					CustomType: ParameterMapType{
						ObjectType: types.ObjectType{
							AttrTypes: ParameterMapValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "interfaces to configure",
				MarkdownDescription: "interfaces to configure",
			},
			"policy": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				MarkdownDescription: "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				Validators: []validator.String{
					stringvalidator.OneOf("int_trunk_host", "int_access_host"),
				},
			},
		},
	}
}

type TestRscModel struct {
	Id           types.String `tfsdk:"id"`
	ParameterMap types.Map    `tfsdk:"parameter_map"`
	Policy       types.String `tfsdk:"policy"`
}

var _ basetypes.ObjectTypable = ParameterMapType{}

type ParameterMapType struct {
	basetypes.ObjectType
}

func (t ParameterMapType) Equal(o attr.Type) bool {
	other, ok := o.(ParameterMapType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ParameterMapType) String() string {
	return "ParameterMapType"
}

func (t ParameterMapType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	customAttributesNestedMapAttribute, ok := attributes["custom_attributes_nested_map"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_attributes_nested_map is missing from object`)

		return nil, diags
	}

	customAttributesNestedMapVal, ok := customAttributesNestedMapAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_attributes_nested_map expected to be basetypes.MapValue, was: %T`, customAttributesNestedMapAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ParameterMapValue{
		CustomAttributesNestedMap: customAttributesNestedMapVal,
		SerialNumber:              serialNumberVal,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewParameterMapValueNull() ParameterMapValue {
	return ParameterMapValue{
		state: attr.ValueStateNull,
	}
}

func NewParameterMapValueUnknown() ParameterMapValue {
	return ParameterMapValue{
		state: attr.ValueStateUnknown,
	}
}

func NewParameterMapValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ParameterMapValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ParameterMapValue Attribute Value",
				"While creating a ParameterMapValue value, a missing attribute value was detected. "+
					"A ParameterMapValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ParameterMapValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ParameterMapValue Attribute Type",
				"While creating a ParameterMapValue value, an invalid attribute value was detected. "+
					"A ParameterMapValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ParameterMapValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ParameterMapValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ParameterMapValue Attribute Value",
				"While creating a ParameterMapValue value, an extra attribute value was detected. "+
					"A ParameterMapValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ParameterMapValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewParameterMapValueUnknown(), diags
	}

	customAttributesNestedMapAttribute, ok := attributes["custom_attributes_nested_map"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_attributes_nested_map is missing from object`)

		return NewParameterMapValueUnknown(), diags
	}

	customAttributesNestedMapVal, ok := customAttributesNestedMapAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_attributes_nested_map expected to be basetypes.MapValue, was: %T`, customAttributesNestedMapAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewParameterMapValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	if diags.HasError() {
		return NewParameterMapValueUnknown(), diags
	}

	return ParameterMapValue{
		CustomAttributesNestedMap: customAttributesNestedMapVal,
		SerialNumber:              serialNumberVal,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewParameterMapValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ParameterMapValue {
	object, diags := NewParameterMapValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewParameterMapValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ParameterMapType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewParameterMapValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewParameterMapValueUnknown(), nil
	}

	if in.IsNull() {
		return NewParameterMapValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewParameterMapValueMust(ParameterMapValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ParameterMapType) ValueType(ctx context.Context) attr.Value {
	return ParameterMapValue{}
}

var _ basetypes.ObjectValuable = ParameterMapValue{}

type ParameterMapValue struct {
	CustomAttributesNestedMap basetypes.MapValue    `tfsdk:"custom_attributes_nested_map"`
	SerialNumber              basetypes.StringValue `tfsdk:"serial_number"`
	state                     attr.ValueState
}

func (v ParameterMapValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["custom_attributes_nested_map"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.CustomAttributesNestedMap.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_attributes_nested_map"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ParameterMapValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ParameterMapValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ParameterMapValue) String() string {
	return "ParameterMapValue"
}

func (v ParameterMapValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	customAttributesNestedMapVal, d := types.MapValue(types.StringType, v.CustomAttributesNestedMap.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"custom_attributes_nested_map": basetypes.MapType{
				ElemType: types.StringType,
			},
			"serial_number": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"custom_attributes_nested_map": basetypes.MapType{
			ElemType: types.StringType,
		},
		"serial_number": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"custom_attributes_nested_map": customAttributesNestedMapVal,
			"serial_number":                v.SerialNumber,
		})

	return objVal, diags
}

func (v ParameterMapValue) Equal(o attr.Value) bool {
	other, ok := o.(ParameterMapValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CustomAttributesNestedMap.Equal(other.CustomAttributesNestedMap) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	return true
}

func (v ParameterMapValue) Type(ctx context.Context) attr.Type {
	return ParameterMapType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ParameterMapValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"custom_attributes_nested_map": basetypes.MapType{
			ElemType: types.StringType,
		},
		"serial_number": basetypes.StringType{},
	}
}
