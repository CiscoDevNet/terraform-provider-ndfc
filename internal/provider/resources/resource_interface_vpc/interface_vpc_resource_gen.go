// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_interface_vpc

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InterfaceVpcResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy the configuration",
				MarkdownDescription: "Deploy the configuration",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier for the interface",
				MarkdownDescription: "Unique identifier for the interface",
			},
			"interfaces": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"admin_state": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable or disable the interface",
							MarkdownDescription: "Enable or disable the interface",
							Default:             booldefault.StaticBool(true),
						},
						"bpdu_guard": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable spanning-tree bpduguard: true='enable', false='disable', no='return to default settings'",
							MarkdownDescription: "Enable spanning-tree bpduguard: true='enable', false='disable', no='return to default settings'",
							Validators: []validator.String{
								stringvalidator.OneOf("true", "false", "no"),
							},
							Default: stringdefault.StaticString("true"),
						},
						"copy_po_description": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Netflow is supported only if it is enabled on fabric",
							MarkdownDescription: "Netflow is supported only if it is enabled on fabric",
							Default:             booldefault.StaticBool(false),
						},
						"deployment_status": schema.StringAttribute{
							Computed:            true,
							Description:         "Status of the deployment",
							MarkdownDescription: "Status of the deployment",
						},
						"interface_name": schema.StringAttribute{
							Required:            true,
							Description:         "Name of the Interface. Example: `vPC0`",
							MarkdownDescription: "Name of the Interface. Example: `vPC0`",
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`^vPC\d+`), "Must be vPC<X> where X is the vPC ID"),
							},
						},
						"mtu": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "MTU for the interface",
							MarkdownDescription: "MTU for the interface",
							Validators: []validator.String{
								stringvalidator.OneOf("default", "jumbo"),
							},
							Default: stringdefault.StaticString("jumbo"),
						},
						"netflow": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Netflow is supported only if it is enabled on fabric",
							MarkdownDescription: "Netflow is supported only if it is enabled on fabric",
							Default:             booldefault.StaticBool(false),
						},
						"netflow_monitor": schema.StringAttribute{
							Optional:            true,
							Description:         "Provide the Layer 2 Monitor Name",
							MarkdownDescription: "Provide the Layer 2 Monitor Name",
						},
						"netflow_sampler": schema.StringAttribute{
							Optional:            true,
							Description:         "Netflow sampler name, applicable to N7K only",
							MarkdownDescription: "Netflow sampler name, applicable to N7K only",
						},
						"peer1_allowed_vlans": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							MarkdownDescription: "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							Default:             stringdefault.StaticString("none"),
						},
						"peer1_member_interfaces": schema.StringAttribute{
							Required:            true,
							Description:         "Member interfaces",
							MarkdownDescription: "Member interfaces",
						},
						"peer1_native_vlan": schema.Int64Attribute{
							Optional:            true,
							Description:         "Set native VLAN for the interface",
							MarkdownDescription: "Set native VLAN for the interface",
							Validators: []validator.Int64{
								int64validator.Between(1, 4094),
							},
						},
						"peer1_po_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"peer1_po_freeform_config": schema.StringAttribute{
							Optional:            true,
							Description:         "Additional CLI for the interface",
							MarkdownDescription: "Additional CLI for the interface",
						},
						"peer1_port_channel_id": schema.Int64Attribute{
							Required:            true,
							Description:         "Port channel ID",
							MarkdownDescription: "Port channel ID",
						},
						"peer2_allowed_vlans": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							MarkdownDescription: "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							Default:             stringdefault.StaticString("none"),
						},
						"peer2_member_interfaces": schema.StringAttribute{
							Optional:            true,
							Description:         "Member interfaces",
							MarkdownDescription: "Member interfaces",
						},
						"peer2_native_vlan": schema.Int64Attribute{
							Optional:            true,
							Description:         "Set native VLAN for the interface",
							MarkdownDescription: "Set native VLAN for the interface",
							Validators: []validator.Int64{
								int64validator.Between(1, 4094),
							},
						},
						"peer2_po_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"peer2_po_freeform_config": schema.StringAttribute{
							Optional:            true,
							Description:         "Additional CLI for the interface",
							MarkdownDescription: "Additional CLI for the interface",
						},
						"peer2_port_channel_id": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Port channel ID",
							MarkdownDescription: "Port channel ID",
						},
						"port_type_fast": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable spanning-tree edge port behavior",
							MarkdownDescription: "Enable spanning-tree edge port behavior",
							Default:             booldefault.StaticBool(true),
						},
						"portchannel_mode": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Port-channel mode",
							MarkdownDescription: "Port-channel mode",
							Validators: []validator.String{
								stringvalidator.OneOf("on", "active", "passive"),
							},
							Default: stringdefault.StaticString("on"),
						},
						"serial_number": schema.StringAttribute{
							Optional:            true,
							Description:         "Serial number of switch to configure",
							MarkdownDescription: "Serial number of switch to configure",
						},
						"speed": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Interface speed",
							MarkdownDescription: "Interface speed",
							Validators: []validator.String{
								stringvalidator.OneOf("Auto", "10Mb", "100Mb", "1Gb", "2.5Gb", "5Gb", "10Gb", "25Gb", "40Gb", "50Gb", "100Gb", "200Gb", "400Gb"),
							},
							Default: stringdefault.StaticString("Auto"),
						},
					},
					CustomType: InterfacesType{
						ObjectType: types.ObjectType{
							AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "interfaces to configure",
				MarkdownDescription: "interfaces to configure",
			},
			"policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				MarkdownDescription: "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("int_vpc_trunk_host"),
			},
			"serial_number": schema.StringAttribute{
				Optional:            true,
				Description:         "Serial number of switch to configure",
				MarkdownDescription: "Serial number of switch to configure",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{path.MatchRoot("interfaces").AtAnyMapKey().AtName("serial_number")}...),
				},
			},
		},
	}
}

type InterfaceVpcModel struct {
	Deploy       types.Bool   `tfsdk:"deploy"`
	Id           types.String `tfsdk:"id"`
	Interfaces   types.Map    `tfsdk:"interfaces"`
	Policy       types.String `tfsdk:"policy"`
	SerialNumber types.String `tfsdk:"serial_number"`
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return nil, diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	bpduGuardAttribute, ok := attributes["bpdu_guard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bpdu_guard is missing from object`)

		return nil, diags
	}

	bpduGuardVal, ok := bpduGuardAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bpdu_guard expected to be basetypes.StringValue, was: %T`, bpduGuardAttribute))
	}

	copyPoDescriptionAttribute, ok := attributes["copy_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`copy_po_description is missing from object`)

		return nil, diags
	}

	copyPoDescriptionVal, ok := copyPoDescriptionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`copy_po_description expected to be basetypes.BoolValue, was: %T`, copyPoDescriptionAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return nil, diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return nil, diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return nil, diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return nil, diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return nil, diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return nil, diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	peer1AllowedVlansAttribute, ok := attributes["peer1_allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_allowed_vlans is missing from object`)

		return nil, diags
	}

	peer1AllowedVlansVal, ok := peer1AllowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_allowed_vlans expected to be basetypes.StringValue, was: %T`, peer1AllowedVlansAttribute))
	}

	peer1MemberInterfacesAttribute, ok := attributes["peer1_member_interfaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_member_interfaces is missing from object`)

		return nil, diags
	}

	peer1MemberInterfacesVal, ok := peer1MemberInterfacesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_member_interfaces expected to be basetypes.StringValue, was: %T`, peer1MemberInterfacesAttribute))
	}

	peer1NativeVlanAttribute, ok := attributes["peer1_native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_native_vlan is missing from object`)

		return nil, diags
	}

	peer1NativeVlanVal, ok := peer1NativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_native_vlan expected to be basetypes.Int64Value, was: %T`, peer1NativeVlanAttribute))
	}

	peer1PoDescriptionAttribute, ok := attributes["peer1_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_po_description is missing from object`)

		return nil, diags
	}

	peer1PoDescriptionVal, ok := peer1PoDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_po_description expected to be basetypes.StringValue, was: %T`, peer1PoDescriptionAttribute))
	}

	peer1PoFreeformConfigAttribute, ok := attributes["peer1_po_freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_po_freeform_config is missing from object`)

		return nil, diags
	}

	peer1PoFreeformConfigVal, ok := peer1PoFreeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_po_freeform_config expected to be basetypes.StringValue, was: %T`, peer1PoFreeformConfigAttribute))
	}

	peer1PortChannelIdAttribute, ok := attributes["peer1_port_channel_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_port_channel_id is missing from object`)

		return nil, diags
	}

	peer1PortChannelIdVal, ok := peer1PortChannelIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_port_channel_id expected to be basetypes.Int64Value, was: %T`, peer1PortChannelIdAttribute))
	}

	peer2AllowedVlansAttribute, ok := attributes["peer2_allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_allowed_vlans is missing from object`)

		return nil, diags
	}

	peer2AllowedVlansVal, ok := peer2AllowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_allowed_vlans expected to be basetypes.StringValue, was: %T`, peer2AllowedVlansAttribute))
	}

	peer2MemberInterfacesAttribute, ok := attributes["peer2_member_interfaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_member_interfaces is missing from object`)

		return nil, diags
	}

	peer2MemberInterfacesVal, ok := peer2MemberInterfacesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_member_interfaces expected to be basetypes.StringValue, was: %T`, peer2MemberInterfacesAttribute))
	}

	peer2NativeVlanAttribute, ok := attributes["peer2_native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_native_vlan is missing from object`)

		return nil, diags
	}

	peer2NativeVlanVal, ok := peer2NativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_native_vlan expected to be basetypes.Int64Value, was: %T`, peer2NativeVlanAttribute))
	}

	peer2PoDescriptionAttribute, ok := attributes["peer2_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_po_description is missing from object`)

		return nil, diags
	}

	peer2PoDescriptionVal, ok := peer2PoDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_po_description expected to be basetypes.StringValue, was: %T`, peer2PoDescriptionAttribute))
	}

	peer2PoFreeformConfigAttribute, ok := attributes["peer2_po_freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_po_freeform_config is missing from object`)

		return nil, diags
	}

	peer2PoFreeformConfigVal, ok := peer2PoFreeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_po_freeform_config expected to be basetypes.StringValue, was: %T`, peer2PoFreeformConfigAttribute))
	}

	peer2PortChannelIdAttribute, ok := attributes["peer2_port_channel_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_port_channel_id is missing from object`)

		return nil, diags
	}

	peer2PortChannelIdVal, ok := peer2PortChannelIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_port_channel_id expected to be basetypes.Int64Value, was: %T`, peer2PortChannelIdAttribute))
	}

	portTypeFastAttribute, ok := attributes["port_type_fast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_type_fast is missing from object`)

		return nil, diags
	}

	portTypeFastVal, ok := portTypeFastAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_type_fast expected to be basetypes.BoolValue, was: %T`, portTypeFastAttribute))
	}

	portchannelModeAttribute, ok := attributes["portchannel_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portchannel_mode is missing from object`)

		return nil, diags
	}

	portchannelModeVal, ok := portchannelModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portchannel_mode expected to be basetypes.StringValue, was: %T`, portchannelModeAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return nil, diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		AdminState:            adminStateVal,
		BpduGuard:             bpduGuardVal,
		CopyPoDescription:     copyPoDescriptionVal,
		DeploymentStatus:      deploymentStatusVal,
		InterfaceName:         interfaceNameVal,
		Mtu:                   mtuVal,
		Netflow:               netflowVal,
		NetflowMonitor:        netflowMonitorVal,
		NetflowSampler:        netflowSamplerVal,
		Peer1AllowedVlans:     peer1AllowedVlansVal,
		Peer1MemberInterfaces: peer1MemberInterfacesVal,
		Peer1NativeVlan:       peer1NativeVlanVal,
		Peer1PoDescription:    peer1PoDescriptionVal,
		Peer1PoFreeformConfig: peer1PoFreeformConfigVal,
		Peer1PortChannelId:    peer1PortChannelIdVal,
		Peer2AllowedVlans:     peer2AllowedVlansVal,
		Peer2MemberInterfaces: peer2MemberInterfacesVal,
		Peer2NativeVlan:       peer2NativeVlanVal,
		Peer2PoDescription:    peer2PoDescriptionVal,
		Peer2PoFreeformConfig: peer2PoFreeformConfigVal,
		Peer2PortChannelId:    peer2PortChannelIdVal,
		PortTypeFast:          portTypeFastVal,
		PortchannelMode:       portchannelModeVal,
		SerialNumber:          serialNumberVal,
		Speed:                 speedVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	bpduGuardAttribute, ok := attributes["bpdu_guard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bpdu_guard is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	bpduGuardVal, ok := bpduGuardAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bpdu_guard expected to be basetypes.StringValue, was: %T`, bpduGuardAttribute))
	}

	copyPoDescriptionAttribute, ok := attributes["copy_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`copy_po_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	copyPoDescriptionVal, ok := copyPoDescriptionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`copy_po_description expected to be basetypes.BoolValue, was: %T`, copyPoDescriptionAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	peer1AllowedVlansAttribute, ok := attributes["peer1_allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_allowed_vlans is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1AllowedVlansVal, ok := peer1AllowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_allowed_vlans expected to be basetypes.StringValue, was: %T`, peer1AllowedVlansAttribute))
	}

	peer1MemberInterfacesAttribute, ok := attributes["peer1_member_interfaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_member_interfaces is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1MemberInterfacesVal, ok := peer1MemberInterfacesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_member_interfaces expected to be basetypes.StringValue, was: %T`, peer1MemberInterfacesAttribute))
	}

	peer1NativeVlanAttribute, ok := attributes["peer1_native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_native_vlan is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1NativeVlanVal, ok := peer1NativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_native_vlan expected to be basetypes.Int64Value, was: %T`, peer1NativeVlanAttribute))
	}

	peer1PoDescriptionAttribute, ok := attributes["peer1_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_po_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1PoDescriptionVal, ok := peer1PoDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_po_description expected to be basetypes.StringValue, was: %T`, peer1PoDescriptionAttribute))
	}

	peer1PoFreeformConfigAttribute, ok := attributes["peer1_po_freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_po_freeform_config is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1PoFreeformConfigVal, ok := peer1PoFreeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_po_freeform_config expected to be basetypes.StringValue, was: %T`, peer1PoFreeformConfigAttribute))
	}

	peer1PortChannelIdAttribute, ok := attributes["peer1_port_channel_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer1_port_channel_id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer1PortChannelIdVal, ok := peer1PortChannelIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer1_port_channel_id expected to be basetypes.Int64Value, was: %T`, peer1PortChannelIdAttribute))
	}

	peer2AllowedVlansAttribute, ok := attributes["peer2_allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_allowed_vlans is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2AllowedVlansVal, ok := peer2AllowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_allowed_vlans expected to be basetypes.StringValue, was: %T`, peer2AllowedVlansAttribute))
	}

	peer2MemberInterfacesAttribute, ok := attributes["peer2_member_interfaces"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_member_interfaces is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2MemberInterfacesVal, ok := peer2MemberInterfacesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_member_interfaces expected to be basetypes.StringValue, was: %T`, peer2MemberInterfacesAttribute))
	}

	peer2NativeVlanAttribute, ok := attributes["peer2_native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_native_vlan is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2NativeVlanVal, ok := peer2NativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_native_vlan expected to be basetypes.Int64Value, was: %T`, peer2NativeVlanAttribute))
	}

	peer2PoDescriptionAttribute, ok := attributes["peer2_po_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_po_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2PoDescriptionVal, ok := peer2PoDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_po_description expected to be basetypes.StringValue, was: %T`, peer2PoDescriptionAttribute))
	}

	peer2PoFreeformConfigAttribute, ok := attributes["peer2_po_freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_po_freeform_config is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2PoFreeformConfigVal, ok := peer2PoFreeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_po_freeform_config expected to be basetypes.StringValue, was: %T`, peer2PoFreeformConfigAttribute))
	}

	peer2PortChannelIdAttribute, ok := attributes["peer2_port_channel_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`peer2_port_channel_id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	peer2PortChannelIdVal, ok := peer2PortChannelIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`peer2_port_channel_id expected to be basetypes.Int64Value, was: %T`, peer2PortChannelIdAttribute))
	}

	portTypeFastAttribute, ok := attributes["port_type_fast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_type_fast is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	portTypeFastVal, ok := portTypeFastAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_type_fast expected to be basetypes.BoolValue, was: %T`, portTypeFastAttribute))
	}

	portchannelModeAttribute, ok := attributes["portchannel_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portchannel_mode is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	portchannelModeVal, ok := portchannelModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portchannel_mode expected to be basetypes.StringValue, was: %T`, portchannelModeAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		AdminState:            adminStateVal,
		BpduGuard:             bpduGuardVal,
		CopyPoDescription:     copyPoDescriptionVal,
		DeploymentStatus:      deploymentStatusVal,
		InterfaceName:         interfaceNameVal,
		Mtu:                   mtuVal,
		Netflow:               netflowVal,
		NetflowMonitor:        netflowMonitorVal,
		NetflowSampler:        netflowSamplerVal,
		Peer1AllowedVlans:     peer1AllowedVlansVal,
		Peer1MemberInterfaces: peer1MemberInterfacesVal,
		Peer1NativeVlan:       peer1NativeVlanVal,
		Peer1PoDescription:    peer1PoDescriptionVal,
		Peer1PoFreeformConfig: peer1PoFreeformConfigVal,
		Peer1PortChannelId:    peer1PortChannelIdVal,
		Peer2AllowedVlans:     peer2AllowedVlansVal,
		Peer2MemberInterfaces: peer2MemberInterfacesVal,
		Peer2NativeVlan:       peer2NativeVlanVal,
		Peer2PoDescription:    peer2PoDescriptionVal,
		Peer2PoFreeformConfig: peer2PoFreeformConfigVal,
		Peer2PortChannelId:    peer2PortChannelIdVal,
		PortTypeFast:          portTypeFastVal,
		PortchannelMode:       portchannelModeVal,
		SerialNumber:          serialNumberVal,
		Speed:                 speedVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	AdminState            basetypes.BoolValue   `tfsdk:"admin_state"`
	BpduGuard             basetypes.StringValue `tfsdk:"bpdu_guard"`
	CopyPoDescription     basetypes.BoolValue   `tfsdk:"copy_po_description"`
	DeploymentStatus      basetypes.StringValue `tfsdk:"deployment_status"`
	InterfaceName         basetypes.StringValue `tfsdk:"interface_name"`
	Mtu                   basetypes.StringValue `tfsdk:"mtu"`
	Netflow               basetypes.BoolValue   `tfsdk:"netflow"`
	NetflowMonitor        basetypes.StringValue `tfsdk:"netflow_monitor"`
	NetflowSampler        basetypes.StringValue `tfsdk:"netflow_sampler"`
	Peer1AllowedVlans     basetypes.StringValue `tfsdk:"peer1_allowed_vlans"`
	Peer1MemberInterfaces basetypes.StringValue `tfsdk:"peer1_member_interfaces"`
	Peer1NativeVlan       basetypes.Int64Value  `tfsdk:"peer1_native_vlan"`
	Peer1PoDescription    basetypes.StringValue `tfsdk:"peer1_po_description"`
	Peer1PoFreeformConfig basetypes.StringValue `tfsdk:"peer1_po_freeform_config"`
	Peer1PortChannelId    basetypes.Int64Value  `tfsdk:"peer1_port_channel_id"`
	Peer2AllowedVlans     basetypes.StringValue `tfsdk:"peer2_allowed_vlans"`
	Peer2MemberInterfaces basetypes.StringValue `tfsdk:"peer2_member_interfaces"`
	Peer2NativeVlan       basetypes.Int64Value  `tfsdk:"peer2_native_vlan"`
	Peer2PoDescription    basetypes.StringValue `tfsdk:"peer2_po_description"`
	Peer2PoFreeformConfig basetypes.StringValue `tfsdk:"peer2_po_freeform_config"`
	Peer2PortChannelId    basetypes.Int64Value  `tfsdk:"peer2_port_channel_id"`
	PortTypeFast          basetypes.BoolValue   `tfsdk:"port_type_fast"`
	PortchannelMode       basetypes.StringValue `tfsdk:"portchannel_mode"`
	SerialNumber          basetypes.StringValue `tfsdk:"serial_number"`
	Speed                 basetypes.StringValue `tfsdk:"speed"`
	state                 attr.ValueState
}

func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 25)

	var val tftypes.Value
	var err error

	attrTypes["admin_state"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["bpdu_guard"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["copy_po_description"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["deployment_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mtu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["netflow"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["netflow_monitor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["netflow_sampler"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer1_allowed_vlans"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer1_member_interfaces"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer1_native_vlan"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["peer1_po_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer1_po_freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer1_port_channel_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["peer2_allowed_vlans"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer2_member_interfaces"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer2_native_vlan"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["peer2_po_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer2_po_freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["peer2_port_channel_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["port_type_fast"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["portchannel_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["speed"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 25)

		val, err = v.AdminState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["admin_state"] = val

		val, err = v.BpduGuard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bpdu_guard"] = val

		val, err = v.CopyPoDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["copy_po_description"] = val

		val, err = v.DeploymentStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deployment_status"] = val

		val, err = v.InterfaceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_name"] = val

		val, err = v.Mtu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mtu"] = val

		val, err = v.Netflow.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow"] = val

		val, err = v.NetflowMonitor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_monitor"] = val

		val, err = v.NetflowSampler.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_sampler"] = val

		val, err = v.Peer1AllowedVlans.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_allowed_vlans"] = val

		val, err = v.Peer1MemberInterfaces.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_member_interfaces"] = val

		val, err = v.Peer1NativeVlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_native_vlan"] = val

		val, err = v.Peer1PoDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_po_description"] = val

		val, err = v.Peer1PoFreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_po_freeform_config"] = val

		val, err = v.Peer1PortChannelId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer1_port_channel_id"] = val

		val, err = v.Peer2AllowedVlans.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_allowed_vlans"] = val

		val, err = v.Peer2MemberInterfaces.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_member_interfaces"] = val

		val, err = v.Peer2NativeVlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_native_vlan"] = val

		val, err = v.Peer2PoDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_po_description"] = val

		val, err = v.Peer2PoFreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_po_freeform_config"] = val

		val, err = v.Peer2PortChannelId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["peer2_port_channel_id"] = val

		val, err = v.PortTypeFast.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_type_fast"] = val

		val, err = v.PortchannelMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["portchannel_mode"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.Speed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["speed"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"admin_state":              basetypes.BoolType{},
		"bpdu_guard":               basetypes.StringType{},
		"copy_po_description":      basetypes.BoolType{},
		"deployment_status":        basetypes.StringType{},
		"interface_name":           basetypes.StringType{},
		"mtu":                      basetypes.StringType{},
		"netflow":                  basetypes.BoolType{},
		"netflow_monitor":          basetypes.StringType{},
		"netflow_sampler":          basetypes.StringType{},
		"peer1_allowed_vlans":      basetypes.StringType{},
		"peer1_member_interfaces":  basetypes.StringType{},
		"peer1_native_vlan":        basetypes.Int64Type{},
		"peer1_po_description":     basetypes.StringType{},
		"peer1_po_freeform_config": basetypes.StringType{},
		"peer1_port_channel_id":    basetypes.Int64Type{},
		"peer2_allowed_vlans":      basetypes.StringType{},
		"peer2_member_interfaces":  basetypes.StringType{},
		"peer2_native_vlan":        basetypes.Int64Type{},
		"peer2_po_description":     basetypes.StringType{},
		"peer2_po_freeform_config": basetypes.StringType{},
		"peer2_port_channel_id":    basetypes.Int64Type{},
		"port_type_fast":           basetypes.BoolType{},
		"portchannel_mode":         basetypes.StringType{},
		"serial_number":            basetypes.StringType{},
		"speed":                    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"admin_state":              v.AdminState,
			"bpdu_guard":               v.BpduGuard,
			"copy_po_description":      v.CopyPoDescription,
			"deployment_status":        v.DeploymentStatus,
			"interface_name":           v.InterfaceName,
			"mtu":                      v.Mtu,
			"netflow":                  v.Netflow,
			"netflow_monitor":          v.NetflowMonitor,
			"netflow_sampler":          v.NetflowSampler,
			"peer1_allowed_vlans":      v.Peer1AllowedVlans,
			"peer1_member_interfaces":  v.Peer1MemberInterfaces,
			"peer1_native_vlan":        v.Peer1NativeVlan,
			"peer1_po_description":     v.Peer1PoDescription,
			"peer1_po_freeform_config": v.Peer1PoFreeformConfig,
			"peer1_port_channel_id":    v.Peer1PortChannelId,
			"peer2_allowed_vlans":      v.Peer2AllowedVlans,
			"peer2_member_interfaces":  v.Peer2MemberInterfaces,
			"peer2_native_vlan":        v.Peer2NativeVlan,
			"peer2_po_description":     v.Peer2PoDescription,
			"peer2_po_freeform_config": v.Peer2PoFreeformConfig,
			"peer2_port_channel_id":    v.Peer2PortChannelId,
			"port_type_fast":           v.PortTypeFast,
			"portchannel_mode":         v.PortchannelMode,
			"serial_number":            v.SerialNumber,
			"speed":                    v.Speed,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdminState.Equal(other.AdminState) {
		return false
	}

	if !v.BpduGuard.Equal(other.BpduGuard) {
		return false
	}

	if !v.CopyPoDescription.Equal(other.CopyPoDescription) {
		return false
	}

	if !v.DeploymentStatus.Equal(other.DeploymentStatus) {
		return false
	}

	if !v.InterfaceName.Equal(other.InterfaceName) {
		return false
	}

	if !v.Mtu.Equal(other.Mtu) {
		return false
	}

	if !v.Netflow.Equal(other.Netflow) {
		return false
	}

	if !v.NetflowMonitor.Equal(other.NetflowMonitor) {
		return false
	}

	if !v.NetflowSampler.Equal(other.NetflowSampler) {
		return false
	}

	if !v.Peer1AllowedVlans.Equal(other.Peer1AllowedVlans) {
		return false
	}

	if !v.Peer1MemberInterfaces.Equal(other.Peer1MemberInterfaces) {
		return false
	}

	if !v.Peer1NativeVlan.Equal(other.Peer1NativeVlan) {
		return false
	}

	if !v.Peer1PoDescription.Equal(other.Peer1PoDescription) {
		return false
	}

	if !v.Peer1PoFreeformConfig.Equal(other.Peer1PoFreeformConfig) {
		return false
	}

	if !v.Peer1PortChannelId.Equal(other.Peer1PortChannelId) {
		return false
	}

	if !v.Peer2AllowedVlans.Equal(other.Peer2AllowedVlans) {
		return false
	}

	if !v.Peer2MemberInterfaces.Equal(other.Peer2MemberInterfaces) {
		return false
	}

	if !v.Peer2NativeVlan.Equal(other.Peer2NativeVlan) {
		return false
	}

	if !v.Peer2PoDescription.Equal(other.Peer2PoDescription) {
		return false
	}

	if !v.Peer2PoFreeformConfig.Equal(other.Peer2PoFreeformConfig) {
		return false
	}

	if !v.Peer2PortChannelId.Equal(other.Peer2PortChannelId) {
		return false
	}

	if !v.PortTypeFast.Equal(other.PortTypeFast) {
		return false
	}

	if !v.PortchannelMode.Equal(other.PortchannelMode) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.Speed.Equal(other.Speed) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"admin_state":              basetypes.BoolType{},
		"bpdu_guard":               basetypes.StringType{},
		"copy_po_description":      basetypes.BoolType{},
		"deployment_status":        basetypes.StringType{},
		"interface_name":           basetypes.StringType{},
		"mtu":                      basetypes.StringType{},
		"netflow":                  basetypes.BoolType{},
		"netflow_monitor":          basetypes.StringType{},
		"netflow_sampler":          basetypes.StringType{},
		"peer1_allowed_vlans":      basetypes.StringType{},
		"peer1_member_interfaces":  basetypes.StringType{},
		"peer1_native_vlan":        basetypes.Int64Type{},
		"peer1_po_description":     basetypes.StringType{},
		"peer1_po_freeform_config": basetypes.StringType{},
		"peer1_port_channel_id":    basetypes.Int64Type{},
		"peer2_allowed_vlans":      basetypes.StringType{},
		"peer2_member_interfaces":  basetypes.StringType{},
		"peer2_native_vlan":        basetypes.Int64Type{},
		"peer2_po_description":     basetypes.StringType{},
		"peer2_po_freeform_config": basetypes.StringType{},
		"peer2_port_channel_id":    basetypes.Int64Type{},
		"port_type_fast":           basetypes.BoolType{},
		"portchannel_mode":         basetypes.StringType{},
		"serial_number":            basetypes.StringType{},
		"speed":                    basetypes.StringType{},
	}
}
