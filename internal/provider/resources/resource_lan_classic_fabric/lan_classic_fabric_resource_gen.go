// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_lan_classic_fabric

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func LanClassicFabricResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"aaa_remote_ip_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable only, when IP Authorization is enabled in the AAA Server",
				MarkdownDescription: "Enable only, when IP Authorization is enabled in the AAA Server",
				Default:             booldefault.StaticBool(false),
			},
			"aaa_server_conf": schema.StringAttribute{
				Optional:            true,
				Description:         "AAA Configurations",
				MarkdownDescription: "AAA Configurations",
			},
			"bootstrap_conf": schema.StringAttribute{
				Optional:            true,
				Description:         "Additional CLIs required during device bootup/login e.g. AAA/Radius",
				MarkdownDescription: "Additional CLIs required during device bootup/login e.g. AAA/Radius",
			},
			"bootstrap_enable": schema.BoolAttribute{
				Optional:            true,
				Description:         "Automatic IP Assignment For POAP",
				MarkdownDescription: "Automatic IP Assignment For POAP",
			},
			"bootstrap_multisubnet": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "lines with # prefix are ignored here",
				MarkdownDescription: "lines with # prefix are ignored here",
				Default:             stringdefault.StaticString("#Scope_Start_IP, Scope_End_IP, Scope_Default_Gateway, Scope_Subnet_Prefix"),
			},
			"cdp_enable": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable CDP on management interface",
				MarkdownDescription: "Enable CDP on management interface",
				Default:             booldefault.StaticBool(false),
			},
			"deploy": schema.BoolAttribute{
				Required:            true,
				Description:         "This flag does configuration save and deploy",
				MarkdownDescription: "This flag does configuration save and deploy",
			},
			"deployment_status": schema.StringAttribute{
				Computed:            true,
				Description:         "This fields shows the  status of the deployment. It can be one of the following: Deployment pending Deployment successful",
				MarkdownDescription: "This fields shows the  status of the deployment. It can be one of the following: Deployment pending Deployment successful",
			},
			"dhcp_enable": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Automatic IP Assignment For POAP From Local DHCP Server",
				MarkdownDescription: "Automatic IP Assignment For POAP From Local DHCP Server",
				Default:             booldefault.StaticBool(false),
			},
			"dhcp_end": schema.StringAttribute{
				Optional:            true,
				Description:         "End Address For Switch POAP",
				MarkdownDescription: "End Address For Switch POAP",
			},
			"dhcp_ipv6_enable": schema.StringAttribute{
				Optional:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Validators: []validator.String{
					stringvalidator.OneOf("DHCPv4", "DHCPv6"),
				},
			},
			"dhcp_start": schema.StringAttribute{
				Optional:            true,
				Description:         "Start Address For Switch POAP",
				MarkdownDescription: "Start Address For Switch POAP",
			},
			"enable_aaa": schema.BoolAttribute{
				Optional:            true,
				Description:         "Include AAA configs from Advanced tab during device bootup",
				MarkdownDescription: "Include AAA configs from Advanced tab during device bootup",
			},
			"enable_netflow": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable Netflow on VTEPs",
				MarkdownDescription: "Enable Netflow on VTEPs",
				Default:             booldefault.StaticBool(false),
			},
			"enable_nxapi": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable HTTPS NX-API",
				MarkdownDescription: "Enable HTTPS NX-API",
				Default:             booldefault.StaticBool(false),
			},
			"enable_nxapi_http": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             booldefault.StaticBool(false),
			},
			"enable_realtime_backup": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Backup hourly only if there is any config deployment since last backup",
				MarkdownDescription: "Backup hourly only if there is any config deployment since last backup",
				Default:             booldefault.StaticBool(false),
			},
			"enable_scheduled_backup": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Backup at the specified time",
				MarkdownDescription: "Backup at the specified time",
				Default:             booldefault.StaticBool(false),
			},
			"fabric_freeform": schema.StringAttribute{
				Optional:            true,
				Description:         "Additional supported CLIs for all same OS (e.g. all NxOS etc) switches",
				MarkdownDescription: "Additional supported CLIs for all same OS (e.g. all NxOS etc) switches",
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "Fabric name to be created, updated or deleted (Max Size 64).",
				MarkdownDescription: "Fabric name to be created, updated or deleted (Max Size 64).",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"feature_ptp": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Terraform unique Id for the fabric resource",
				MarkdownDescription: "Terraform unique Id for the fabric resource",
			},
			"inband_enable": schema.BoolAttribute{
				Optional:            true,
				Description:         "Enable POAP over Inband Interface (Pre-req: Inband Mgmt Knob should be Enabled)",
				MarkdownDescription: "Enable POAP over Inband Interface (Pre-req: Inband Mgmt Knob should be Enabled)",
			},
			"inband_mgmt": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Import switches with inband connectivity",
				MarkdownDescription: "Import switches with inband connectivity",
				Default:             booldefault.StaticBool(false),
			},
			"is_read_only": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If enabled, fabric is only monitored. No configuration will be deployed",
				MarkdownDescription: "If enabled, fabric is only monitored. No configuration will be deployed",
				Default:             booldefault.StaticBool(true),
			},
			"mgmt_gw": schema.StringAttribute{
				Optional:            true,
				Description:         "Default Gateway For Management VRF On The Switch",
				MarkdownDescription: "Default Gateway For Management VRF On The Switch",
			},
			"mgmt_prefix": schema.Int64Attribute{
				Optional:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
			},
			"mgmt_v6prefix": schema.Int64Attribute{
				Optional:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
			},
			"mpls_handoff": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             booldefault.StaticBool(false),
			},
			"mpls_lb_id": schema.Int64Attribute{
				Optional:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
			},
			"mpls_loopback_ip_range": schema.StringAttribute{
				Optional:            true,
				Description:         "MPLS Loopback IP Address Range",
				MarkdownDescription: "MPLS Loopback IP Address Range",
			},
			"netflow_exporter_list": schema.StringAttribute{
				Optional:            true,
				Description:         "One or Multiple Netflow Exporters",
				MarkdownDescription: "One or Multiple Netflow Exporters",
			},
			"netflow_monitor_list": schema.StringAttribute{
				Optional:            true,
				Description:         "One or Multiple Netflow Monitors",
				MarkdownDescription: "One or Multiple Netflow Monitors",
			},
			"netflow_record_list": schema.StringAttribute{
				Optional:            true,
				Description:         "One or Multiple Netflow Records",
				MarkdownDescription: "One or Multiple Netflow Records",
			},
			"netflow_sampler_list": schema.StringAttribute{
				Optional:            true,
				Description:         "One or multiple netflow Samplers. Applicable to N7K only",
				MarkdownDescription: "One or multiple netflow Samplers. Applicable to N7K only",
			},
			"nxapi_http_port": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             int64default.StaticInt64(80),
			},
			"nxapi_https_port": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             int64default.StaticInt64(443),
			},
			"pm_enable": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
				Default:             booldefault.StaticBool(false),
			},
			"power_redundancy_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Default Power Supply Mode For Bootstrapped NX-OS Switches",
				MarkdownDescription: "Default Power Supply Mode For Bootstrapped NX-OS Switches",
				Validators: []validator.String{
					stringvalidator.OneOf("ps-redundant", "combined", "insrc-redundant"),
				},
				Default: stringdefault.StaticString("ps-redundant"),
			},
			"ptp_domain_id": schema.Int64Attribute{
				Optional:            true,
				Description:         "Multiple Independent PTP Clocking Subdomains on a Single Network",
				MarkdownDescription: "Multiple Independent PTP Clocking Subdomains on a Single Network",
			},
			"ptp_lb_id": schema.Int64Attribute{
				Optional:            true,
				Description:         "No description available",
				MarkdownDescription: "No description available",
			},
			"scheduled_time": schema.StringAttribute{
				Optional:            true,
				Description:         "Time (UTC) in 24hr format. (00:00 to 23:59)",
				MarkdownDescription: "Time (UTC) in 24hr format. (00:00 to 23:59)",
			},
			"snmp_server_host_trap": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Configure NDFC as a receiver for SNMP traps",
				MarkdownDescription: "Configure NDFC as a receiver for SNMP traps",
				Default:             booldefault.StaticBool(true),
			},
			"subinterface_range": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Per Border Dot1q Range For VRF Lite Connectivity",
				MarkdownDescription: "Per Border Dot1q Range For VRF Lite Connectivity",
				Default:             stringdefault.StaticString("2-511"),
			},
		},
		Description:         "Resource to configure and manage a LAN Classic Fabric",
		MarkdownDescription: "Resource to configure and manage a LAN Classic Fabric",
	}
}

type LanClassicFabricModel struct {
	AaaRemoteIpEnabled    types.Bool   `tfsdk:"aaa_remote_ip_enabled"`
	AaaServerConf         types.String `tfsdk:"aaa_server_conf"`
	BootstrapConf         types.String `tfsdk:"bootstrap_conf"`
	BootstrapEnable       types.Bool   `tfsdk:"bootstrap_enable"`
	BootstrapMultisubnet  types.String `tfsdk:"bootstrap_multisubnet"`
	CdpEnable             types.Bool   `tfsdk:"cdp_enable"`
	Deploy                types.Bool   `tfsdk:"deploy"`
	DeploymentStatus      types.String `tfsdk:"deployment_status"`
	DhcpEnable            types.Bool   `tfsdk:"dhcp_enable"`
	DhcpEnd               types.String `tfsdk:"dhcp_end"`
	DhcpIpv6Enable        types.String `tfsdk:"dhcp_ipv6_enable"`
	DhcpStart             types.String `tfsdk:"dhcp_start"`
	EnableAaa             types.Bool   `tfsdk:"enable_aaa"`
	EnableNetflow         types.Bool   `tfsdk:"enable_netflow"`
	EnableNxapi           types.Bool   `tfsdk:"enable_nxapi"`
	EnableNxapiHttp       types.Bool   `tfsdk:"enable_nxapi_http"`
	EnableRealtimeBackup  types.Bool   `tfsdk:"enable_realtime_backup"`
	EnableScheduledBackup types.Bool   `tfsdk:"enable_scheduled_backup"`
	FabricFreeform        types.String `tfsdk:"fabric_freeform"`
	FabricName            types.String `tfsdk:"fabric_name"`
	FeaturePtp            types.Bool   `tfsdk:"feature_ptp"`
	Id                    types.String `tfsdk:"id"`
	InbandEnable          types.Bool   `tfsdk:"inband_enable"`
	InbandMgmt            types.Bool   `tfsdk:"inband_mgmt"`
	IsReadOnly            types.Bool   `tfsdk:"is_read_only"`
	MgmtGw                types.String `tfsdk:"mgmt_gw"`
	MgmtPrefix            types.Int64  `tfsdk:"mgmt_prefix"`
	MgmtV6prefix          types.Int64  `tfsdk:"mgmt_v6prefix"`
	MplsHandoff           types.Bool   `tfsdk:"mpls_handoff"`
	MplsLbId              types.Int64  `tfsdk:"mpls_lb_id"`
	MplsLoopbackIpRange   types.String `tfsdk:"mpls_loopback_ip_range"`
	NetflowExporterList   types.String `tfsdk:"netflow_exporter_list"`
	NetflowMonitorList    types.String `tfsdk:"netflow_monitor_list"`
	NetflowRecordList     types.String `tfsdk:"netflow_record_list"`
	NetflowSamplerList    types.String `tfsdk:"netflow_sampler_list"`
	NxapiHttpPort         types.Int64  `tfsdk:"nxapi_http_port"`
	NxapiHttpsPort        types.Int64  `tfsdk:"nxapi_https_port"`
	PmEnable              types.Bool   `tfsdk:"pm_enable"`
	PowerRedundancyMode   types.String `tfsdk:"power_redundancy_mode"`
	PtpDomainId           types.Int64  `tfsdk:"ptp_domain_id"`
	PtpLbId               types.Int64  `tfsdk:"ptp_lb_id"`
	ScheduledTime         types.String `tfsdk:"scheduled_time"`
	SnmpServerHostTrap    types.Bool   `tfsdk:"snmp_server_host_trap"`
	SubinterfaceRange     types.String `tfsdk:"subinterface_range"`
}
