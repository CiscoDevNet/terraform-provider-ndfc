// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_links

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func LinksResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"destination_device": schema.StringAttribute{
				Required:            true,
				Description:         "Destination device serial number",
				MarkdownDescription: "Destination device serial number",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"destination_fabric": schema.StringAttribute{
				Required:            true,
				Description:         "Destination fabric name",
				MarkdownDescription: "Destination fabric name",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"destination_interface": schema.StringAttribute{
				Required:            true,
				Description:         "Destination interface name",
				MarkdownDescription: "Destination interface name",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^(Ethernet|eth|port-channel|loopback|vlan|mgmt|port-channel-sub)\d+(/\d+)*$`), "Must be a valid interface name"),
				},
			},
			"destination_switch_name": schema.StringAttribute{
				Computed:            true,
				Description:         "Destination switch name",
				MarkdownDescription: "Destination switch name",
			},
			"is_discovered": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the link is discovered",
				MarkdownDescription: "Whether the link is discovered",
			},
			"is_present": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the link is present",
				MarkdownDescription: "Whether the link is present",
			},
			"link_parameters": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Link configuration parameters as key-value pairs",
				MarkdownDescription: "Link configuration parameters as key-value pairs",
			},
			"link_params_computed": schema.MapAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "Extra parameters computed by NDFC or defaulted from template",
				MarkdownDescription: "Extra parameters computed by NDFC or defaulted from template",
			},
			"link_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Type of link",
				MarkdownDescription: "Type of link",
			},
			"link_uuid": schema.StringAttribute{
				Computed:            true,
				Description:         "Link UUID",
				MarkdownDescription: "Link UUID",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"source_device": schema.StringAttribute{
				Required:            true,
				Description:         "Source device serial number",
				MarkdownDescription: "Source device serial number",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_fabric": schema.StringAttribute{
				Required:            true,
				Description:         "Source fabric name",
				MarkdownDescription: "Source fabric name",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_interface": schema.StringAttribute{
				Required:            true,
				Description:         "Source interface name",
				MarkdownDescription: "Source interface name",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_switch_name": schema.StringAttribute{
				Computed:            true,
				Description:         "Source switch name",
				MarkdownDescription: "Source switch name",
			},
			"template_name": schema.StringAttribute{
				Required:            true,
				Description:         "Template name to use for the link",
				MarkdownDescription: "Template name to use for the link",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
		Description:         "This resource allows you to configure and manage links between switches in NDFC",
		MarkdownDescription: "This resource allows you to configure and manage links between switches in NDFC",
	}
}

type LinksModel struct {
	DestinationDevice     types.String `tfsdk:"destination_device"`
	DestinationFabric     types.String `tfsdk:"destination_fabric"`
	DestinationInterface  types.String `tfsdk:"destination_interface"`
	DestinationSwitchName types.String `tfsdk:"destination_switch_name"`
	IsDiscovered          types.Bool   `tfsdk:"is_discovered"`
	IsPresent             types.Bool   `tfsdk:"is_present"`
	LinkParameters        types.Map    `tfsdk:"link_parameters"`
	LinkParamsComputed    types.Map    `tfsdk:"link_params_computed"`
	LinkType              types.String `tfsdk:"link_type"`
	LinkUuid              types.String `tfsdk:"link_uuid"`
	SourceDevice          types.String `tfsdk:"source_device"`
	SourceFabric          types.String `tfsdk:"source_fabric"`
	SourceInterface       types.String `tfsdk:"source_interface"`
	SourceSwitchName      types.String `tfsdk:"source_switch_name"`
	TemplateName          types.String `tfsdk:"template_name"`
}
