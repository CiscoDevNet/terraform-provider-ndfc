// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_vrf_bulk

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func VrfBulkResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Terraform unique Id for the resource",
				MarkdownDescription: "Terraform unique Id for the resource",
			},
			"vrfs": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"advertise_default_route": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Flag to Control Advertisement of Default Route Internally",
							MarkdownDescription: "Flag to Control Advertisement of Default Route Internally",
							Default:             booldefault.StaticBool(true),
						},
						"advertise_host_routes": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Flag to Control Advertisement of /32 and /128 Routes to Edge Routers",
							MarkdownDescription: "Flag to Control Advertisement of /32 and /128 Routes to Edge Routers",
							Default:             booldefault.StaticBool(false),
						},
						"bgp_password": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF Lite BGP neighbor password (Hex String)",
							MarkdownDescription: "VRF Lite BGP neighbor password (Hex String)",
						},
						"bgp_password_type": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco",
							MarkdownDescription: "VRF Lite BGP Key Encryption Type: 3 - 3DES, 7 - Cisco",
						},
						"configure_static_default_route": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Flag to Control Static Default Route Configuration",
							MarkdownDescription: "Flag to Control Static Default Route Configuration",
							Default:             booldefault.StaticBool(true),
						},
						"disable_rt_auto": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Applicable to IPv4, IPv6 VPN/EVPN/MVPN",
							MarkdownDescription: "Applicable to IPv4, IPv6 VPN/EVPN/MVPN",
							Default:             booldefault.StaticBool(false),
						},
						"interface_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"ipv6_link_local": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enables IPv6 link-local Option under VRF SVI",
							MarkdownDescription: "Enables IPv6 link-local Option under VRF SVI",
							Default:             booldefault.StaticBool(true),
						},
						"loopback_routing_tag": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Loopback routing tag",
							MarkdownDescription: "Loopback routing tag",
							Default:             int64default.StaticInt64(12345),
						},
						"max_bgp_paths": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Maximum BGP paths",
							MarkdownDescription: "Maximum BGP paths",
							Default:             int64default.StaticInt64(1),
						},
						"max_ibgp_paths": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Maximum iBGP paths",
							MarkdownDescription: "Maximum iBGP paths",
							Default:             int64default.StaticInt64(2),
						},
						"mtu": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Interface MTU",
							MarkdownDescription: "Interface MTU",
							Default:             int64default.StaticInt64(9216),
						},
						"mvpn_inter_as": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific",
							MarkdownDescription: "Use the inter-as keyword for the MVPN address family routes to cross the BGP autonomous system (AS) boundaries, applicable when TRM is enabled. IOS XE Specific",
							Default:             booldefault.StaticBool(false),
						},
						"netflow": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only",
							MarkdownDescription: "For netflow on VRF-LITE Sub-interface. Supported only if netflow is enabled on fabric. For NX-OS only",
							Default:             booldefault.StaticBool(false),
						},
						"netflow_monitor": schema.StringAttribute{
							Optional:            true,
							Description:         "Netflow monitor. For NX-OS only",
							MarkdownDescription: "Netflow monitor. For NX-OS only",
						},
						"no_rp": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "There is no RP as only SSM is used",
							MarkdownDescription: "There is no RP as only SSM is used",
							Default:             booldefault.StaticBool(false),
						},
						"overlay_multicast_groups": schema.StringAttribute{
							Optional:            true,
							Description:         "Overlay multicast groups",
							MarkdownDescription: "Overlay multicast groups",
						},
						"redistribute_direct_route_map": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Redistribute direct route map",
							MarkdownDescription: "Redistribute direct route map",
							Default:             stringdefault.StaticString("FABRIC-RMAP-REDIST-SUBNET"),
						},
						"route_target_export": schema.StringAttribute{
							Optional:            true,
							Description:         "For VPN Routes Export, One or a Comma Separated List",
							MarkdownDescription: "For VPN Routes Export, One or a Comma Separated List",
						},
						"route_target_export_cloud_evpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For Cloud EVPN Routes Export, One or a Comma Separated List",
							MarkdownDescription: "For Cloud EVPN Routes Export, One or a Comma Separated List",
						},
						"route_target_export_evpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For EVPN Routes Export, One or a Comma Separated List",
							MarkdownDescription: "For EVPN Routes Export, One or a Comma Separated List",
						},
						"route_target_export_mvpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For MVPN Routes Export, One or a Comma Separated List",
							MarkdownDescription: "For MVPN Routes Export, One or a Comma Separated List",
						},
						"route_target_import": schema.StringAttribute{
							Optional:            true,
							Description:         "For VPN Routes Import, One or a Comma Separated List",
							MarkdownDescription: "For VPN Routes Import, One or a Comma Separated List",
						},
						"route_target_import_cloud_evpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For Cloud EVPN Routes Import, One or a Comma Separated List",
							MarkdownDescription: "For Cloud EVPN Routes Import, One or a Comma Separated List",
						},
						"route_target_import_evpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For EVPN Routes Import, One or a Comma Separated List",
							MarkdownDescription: "For EVPN Routes Import, One or a Comma Separated List",
						},
						"route_target_import_mvpn": schema.StringAttribute{
							Optional:            true,
							Description:         "For MVPN Routes Import, One or a Comma Separated List",
							MarkdownDescription: "For MVPN Routes Import, One or a Comma Separated List",
						},
						"rp_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv4 address",
							MarkdownDescription: "IPv4 address",
						},
						"rp_external": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Is RP external to the fabric",
							MarkdownDescription: "Is RP external to the fabric",
							Default:             booldefault.StaticBool(false),
						},
						"rp_loopback_id": schema.Int64Attribute{
							Optional:            true,
							Description:         "RP loopback ID",
							MarkdownDescription: "RP loopback ID",
						},
						"trm": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable Tenant Routed Multicast",
							MarkdownDescription: "Enable Tenant Routed Multicast",
							Default:             booldefault.StaticBool(false),
						},
						"trm_bgw_msite": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable TRM on Border Gateway Multisite",
							MarkdownDescription: "Enable TRM on Border Gateway Multisite",
							Default:             booldefault.StaticBool(false),
						},
						"underlay_multicast_address": schema.StringAttribute{
							Optional:            true,
							Description:         "IPv4 Multicast Address. Applicable only when TRM is enabled.",
							MarkdownDescription: "IPv4 Multicast Address. Applicable only when TRM is enabled.",
						},
						"vlan_id": schema.Int64Attribute{
							Optional:            true,
							Description:         "VLAN ID",
							MarkdownDescription: "VLAN ID",
						},
						"vlan_name": schema.StringAttribute{
							Optional:            true,
							Description:         "VLAN name",
							MarkdownDescription: "VLAN name",
						},
						"vrf_description": schema.StringAttribute{
							Optional:            true,
							Description:         "VRF description",
							MarkdownDescription: "VRF description",
						},
						"vrf_extension_template": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The name of the VRF extension template",
							MarkdownDescription: "The name of the VRF extension template",
							Default:             stringdefault.StaticString("Default_VRF_Extension_Universal"),
						},
						"vrf_id": schema.Int64Attribute{
							Optional:            true,
							Description:         "VNI ID of VRF",
							MarkdownDescription: "VNI ID of VRF",
						},
						"vrf_name": schema.StringAttribute{
							Required:            true,
							Description:         "The name of the VRF",
							MarkdownDescription: "The name of the VRF",
						},
						"vrf_status": schema.StringAttribute{
							Computed:            true,
							Description:         "VRF Deployment status",
							MarkdownDescription: "VRF Deployment status",
						},
						"vrf_template": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The name of the VRF template",
							MarkdownDescription: "The name of the VRF template",
							Default:             stringdefault.StaticString("Default_VRF_Universal"),
						},
					},
					CustomType: VrfsType{
						ObjectType: types.ObjectType{
							AttrTypes: VrfsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "List of vrfs",
				MarkdownDescription: "List of vrfs",
			},
		},
	}
}

type VrfBulkModel struct {
	FabricName types.String `tfsdk:"fabric_name"`
	Id         types.String `tfsdk:"id"`
	Vrfs       types.List   `tfsdk:"vrfs"`
}

var _ basetypes.ObjectTypable = VrfsType{}

type VrfsType struct {
	basetypes.ObjectType
}

func (t VrfsType) Equal(o attr.Type) bool {
	other, ok := o.(VrfsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VrfsType) String() string {
	return "VrfsType"
}

func (t VrfsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	advertiseDefaultRouteAttribute, ok := attributes["advertise_default_route"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_default_route is missing from object`)

		return nil, diags
	}

	advertiseDefaultRouteVal, ok := advertiseDefaultRouteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_default_route expected to be basetypes.BoolValue, was: %T`, advertiseDefaultRouteAttribute))
	}

	advertiseHostRoutesAttribute, ok := attributes["advertise_host_routes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_host_routes is missing from object`)

		return nil, diags
	}

	advertiseHostRoutesVal, ok := advertiseHostRoutesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_host_routes expected to be basetypes.BoolValue, was: %T`, advertiseHostRoutesAttribute))
	}

	bgpPasswordAttribute, ok := attributes["bgp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp_password is missing from object`)

		return nil, diags
	}

	bgpPasswordVal, ok := bgpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp_password expected to be basetypes.StringValue, was: %T`, bgpPasswordAttribute))
	}

	bgpPasswordTypeAttribute, ok := attributes["bgp_password_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp_password_type is missing from object`)

		return nil, diags
	}

	bgpPasswordTypeVal, ok := bgpPasswordTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp_password_type expected to be basetypes.StringValue, was: %T`, bgpPasswordTypeAttribute))
	}

	configureStaticDefaultRouteAttribute, ok := attributes["configure_static_default_route"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`configure_static_default_route is missing from object`)

		return nil, diags
	}

	configureStaticDefaultRouteVal, ok := configureStaticDefaultRouteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`configure_static_default_route expected to be basetypes.BoolValue, was: %T`, configureStaticDefaultRouteAttribute))
	}

	disableRtAutoAttribute, ok := attributes["disable_rt_auto"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disable_rt_auto is missing from object`)

		return nil, diags
	}

	disableRtAutoVal, ok := disableRtAutoAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disable_rt_auto expected to be basetypes.BoolValue, was: %T`, disableRtAutoAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return nil, diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	ipv6LinkLocalAttribute, ok := attributes["ipv6_link_local"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_link_local is missing from object`)

		return nil, diags
	}

	ipv6LinkLocalVal, ok := ipv6LinkLocalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_link_local expected to be basetypes.BoolValue, was: %T`, ipv6LinkLocalAttribute))
	}

	loopbackRoutingTagAttribute, ok := attributes["loopback_routing_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_routing_tag is missing from object`)

		return nil, diags
	}

	loopbackRoutingTagVal, ok := loopbackRoutingTagAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_routing_tag expected to be basetypes.Int64Value, was: %T`, loopbackRoutingTagAttribute))
	}

	maxBgpPathsAttribute, ok := attributes["max_bgp_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_bgp_paths is missing from object`)

		return nil, diags
	}

	maxBgpPathsVal, ok := maxBgpPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_bgp_paths expected to be basetypes.Int64Value, was: %T`, maxBgpPathsAttribute))
	}

	maxIbgpPathsAttribute, ok := attributes["max_ibgp_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_ibgp_paths is missing from object`)

		return nil, diags
	}

	maxIbgpPathsVal, ok := maxIbgpPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_ibgp_paths expected to be basetypes.Int64Value, was: %T`, maxIbgpPathsAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return nil, diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.Int64Value, was: %T`, mtuAttribute))
	}

	mvpnInterAsAttribute, ok := attributes["mvpn_inter_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mvpn_inter_as is missing from object`)

		return nil, diags
	}

	mvpnInterAsVal, ok := mvpnInterAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mvpn_inter_as expected to be basetypes.BoolValue, was: %T`, mvpnInterAsAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return nil, diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return nil, diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	noRpAttribute, ok := attributes["no_rp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no_rp is missing from object`)

		return nil, diags
	}

	noRpVal, ok := noRpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no_rp expected to be basetypes.BoolValue, was: %T`, noRpAttribute))
	}

	overlayMulticastGroupsAttribute, ok := attributes["overlay_multicast_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`overlay_multicast_groups is missing from object`)

		return nil, diags
	}

	overlayMulticastGroupsVal, ok := overlayMulticastGroupsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`overlay_multicast_groups expected to be basetypes.StringValue, was: %T`, overlayMulticastGroupsAttribute))
	}

	redistributeDirectRouteMapAttribute, ok := attributes["redistribute_direct_route_map"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`redistribute_direct_route_map is missing from object`)

		return nil, diags
	}

	redistributeDirectRouteMapVal, ok := redistributeDirectRouteMapAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`redistribute_direct_route_map expected to be basetypes.StringValue, was: %T`, redistributeDirectRouteMapAttribute))
	}

	routeTargetExportAttribute, ok := attributes["route_target_export"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export is missing from object`)

		return nil, diags
	}

	routeTargetExportVal, ok := routeTargetExportAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export expected to be basetypes.StringValue, was: %T`, routeTargetExportAttribute))
	}

	routeTargetExportCloudEvpnAttribute, ok := attributes["route_target_export_cloud_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_cloud_evpn is missing from object`)

		return nil, diags
	}

	routeTargetExportCloudEvpnVal, ok := routeTargetExportCloudEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_cloud_evpn expected to be basetypes.StringValue, was: %T`, routeTargetExportCloudEvpnAttribute))
	}

	routeTargetExportEvpnAttribute, ok := attributes["route_target_export_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_evpn is missing from object`)

		return nil, diags
	}

	routeTargetExportEvpnVal, ok := routeTargetExportEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_evpn expected to be basetypes.StringValue, was: %T`, routeTargetExportEvpnAttribute))
	}

	routeTargetExportMvpnAttribute, ok := attributes["route_target_export_mvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_mvpn is missing from object`)

		return nil, diags
	}

	routeTargetExportMvpnVal, ok := routeTargetExportMvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_mvpn expected to be basetypes.StringValue, was: %T`, routeTargetExportMvpnAttribute))
	}

	routeTargetImportAttribute, ok := attributes["route_target_import"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import is missing from object`)

		return nil, diags
	}

	routeTargetImportVal, ok := routeTargetImportAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import expected to be basetypes.StringValue, was: %T`, routeTargetImportAttribute))
	}

	routeTargetImportCloudEvpnAttribute, ok := attributes["route_target_import_cloud_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_cloud_evpn is missing from object`)

		return nil, diags
	}

	routeTargetImportCloudEvpnVal, ok := routeTargetImportCloudEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_cloud_evpn expected to be basetypes.StringValue, was: %T`, routeTargetImportCloudEvpnAttribute))
	}

	routeTargetImportEvpnAttribute, ok := attributes["route_target_import_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_evpn is missing from object`)

		return nil, diags
	}

	routeTargetImportEvpnVal, ok := routeTargetImportEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_evpn expected to be basetypes.StringValue, was: %T`, routeTargetImportEvpnAttribute))
	}

	routeTargetImportMvpnAttribute, ok := attributes["route_target_import_mvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_mvpn is missing from object`)

		return nil, diags
	}

	routeTargetImportMvpnVal, ok := routeTargetImportMvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_mvpn expected to be basetypes.StringValue, was: %T`, routeTargetImportMvpnAttribute))
	}

	rpAddressAttribute, ok := attributes["rp_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_address is missing from object`)

		return nil, diags
	}

	rpAddressVal, ok := rpAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_address expected to be basetypes.StringValue, was: %T`, rpAddressAttribute))
	}

	rpExternalAttribute, ok := attributes["rp_external"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_external is missing from object`)

		return nil, diags
	}

	rpExternalVal, ok := rpExternalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_external expected to be basetypes.BoolValue, was: %T`, rpExternalAttribute))
	}

	rpLoopbackIdAttribute, ok := attributes["rp_loopback_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_loopback_id is missing from object`)

		return nil, diags
	}

	rpLoopbackIdVal, ok := rpLoopbackIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_loopback_id expected to be basetypes.Int64Value, was: %T`, rpLoopbackIdAttribute))
	}

	trmAttribute, ok := attributes["trm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trm is missing from object`)

		return nil, diags
	}

	trmVal, ok := trmAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trm expected to be basetypes.BoolValue, was: %T`, trmAttribute))
	}

	trmBgwMsiteAttribute, ok := attributes["trm_bgw_msite"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trm_bgw_msite is missing from object`)

		return nil, diags
	}

	trmBgwMsiteVal, ok := trmBgwMsiteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trm_bgw_msite expected to be basetypes.BoolValue, was: %T`, trmBgwMsiteAttribute))
	}

	underlayMulticastAddressAttribute, ok := attributes["underlay_multicast_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`underlay_multicast_address is missing from object`)

		return nil, diags
	}

	underlayMulticastAddressVal, ok := underlayMulticastAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`underlay_multicast_address expected to be basetypes.StringValue, was: %T`, underlayMulticastAddressAttribute))
	}

	vlanIdAttribute, ok := attributes["vlan_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan_id is missing from object`)

		return nil, diags
	}

	vlanIdVal, ok := vlanIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan_id expected to be basetypes.Int64Value, was: %T`, vlanIdAttribute))
	}

	vlanNameAttribute, ok := attributes["vlan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan_name is missing from object`)

		return nil, diags
	}

	vlanNameVal, ok := vlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan_name expected to be basetypes.StringValue, was: %T`, vlanNameAttribute))
	}

	vrfDescriptionAttribute, ok := attributes["vrf_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_description is missing from object`)

		return nil, diags
	}

	vrfDescriptionVal, ok := vrfDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_description expected to be basetypes.StringValue, was: %T`, vrfDescriptionAttribute))
	}

	vrfExtensionTemplateAttribute, ok := attributes["vrf_extension_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_extension_template is missing from object`)

		return nil, diags
	}

	vrfExtensionTemplateVal, ok := vrfExtensionTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_extension_template expected to be basetypes.StringValue, was: %T`, vrfExtensionTemplateAttribute))
	}

	vrfIdAttribute, ok := attributes["vrf_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_id is missing from object`)

		return nil, diags
	}

	vrfIdVal, ok := vrfIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_id expected to be basetypes.Int64Value, was: %T`, vrfIdAttribute))
	}

	vrfNameAttribute, ok := attributes["vrf_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_name is missing from object`)

		return nil, diags
	}

	vrfNameVal, ok := vrfNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_name expected to be basetypes.StringValue, was: %T`, vrfNameAttribute))
	}

	vrfStatusAttribute, ok := attributes["vrf_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_status is missing from object`)

		return nil, diags
	}

	vrfStatusVal, ok := vrfStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_status expected to be basetypes.StringValue, was: %T`, vrfStatusAttribute))
	}

	vrfTemplateAttribute, ok := attributes["vrf_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_template is missing from object`)

		return nil, diags
	}

	vrfTemplateVal, ok := vrfTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_template expected to be basetypes.StringValue, was: %T`, vrfTemplateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VrfsValue{
		AdvertiseDefaultRoute:       advertiseDefaultRouteVal,
		AdvertiseHostRoutes:         advertiseHostRoutesVal,
		BgpPassword:                 bgpPasswordVal,
		BgpPasswordType:             bgpPasswordTypeVal,
		ConfigureStaticDefaultRoute: configureStaticDefaultRouteVal,
		DisableRtAuto:               disableRtAutoVal,
		InterfaceDescription:        interfaceDescriptionVal,
		Ipv6LinkLocal:               ipv6LinkLocalVal,
		LoopbackRoutingTag:          loopbackRoutingTagVal,
		MaxBgpPaths:                 maxBgpPathsVal,
		MaxIbgpPaths:                maxIbgpPathsVal,
		Mtu:                         mtuVal,
		MvpnInterAs:                 mvpnInterAsVal,
		Netflow:                     netflowVal,
		NetflowMonitor:              netflowMonitorVal,
		NoRp:                        noRpVal,
		OverlayMulticastGroups:      overlayMulticastGroupsVal,
		RedistributeDirectRouteMap:  redistributeDirectRouteMapVal,
		RouteTargetExport:           routeTargetExportVal,
		RouteTargetExportCloudEvpn:  routeTargetExportCloudEvpnVal,
		RouteTargetExportEvpn:       routeTargetExportEvpnVal,
		RouteTargetExportMvpn:       routeTargetExportMvpnVal,
		RouteTargetImport:           routeTargetImportVal,
		RouteTargetImportCloudEvpn:  routeTargetImportCloudEvpnVal,
		RouteTargetImportEvpn:       routeTargetImportEvpnVal,
		RouteTargetImportMvpn:       routeTargetImportMvpnVal,
		RpAddress:                   rpAddressVal,
		RpExternal:                  rpExternalVal,
		RpLoopbackId:                rpLoopbackIdVal,
		Trm:                         trmVal,
		TrmBgwMsite:                 trmBgwMsiteVal,
		UnderlayMulticastAddress:    underlayMulticastAddressVal,
		VlanId:                      vlanIdVal,
		VlanName:                    vlanNameVal,
		VrfDescription:              vrfDescriptionVal,
		VrfExtensionTemplate:        vrfExtensionTemplateVal,
		VrfId:                       vrfIdVal,
		VrfName:                     vrfNameVal,
		VrfStatus:                   vrfStatusVal,
		VrfTemplate:                 vrfTemplateVal,
		state:                       attr.ValueStateKnown,
	}, diags
}

func NewVrfsValueNull() VrfsValue {
	return VrfsValue{
		state: attr.ValueStateNull,
	}
}

func NewVrfsValueUnknown() VrfsValue {
	return VrfsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVrfsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VrfsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VrfsValue Attribute Value",
				"While creating a VrfsValue value, a missing attribute value was detected. "+
					"A VrfsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VrfsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VrfsValue Attribute Type",
				"While creating a VrfsValue value, an invalid attribute value was detected. "+
					"A VrfsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VrfsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VrfsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VrfsValue Attribute Value",
				"While creating a VrfsValue value, an extra attribute value was detected. "+
					"A VrfsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VrfsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVrfsValueUnknown(), diags
	}

	advertiseDefaultRouteAttribute, ok := attributes["advertise_default_route"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_default_route is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	advertiseDefaultRouteVal, ok := advertiseDefaultRouteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_default_route expected to be basetypes.BoolValue, was: %T`, advertiseDefaultRouteAttribute))
	}

	advertiseHostRoutesAttribute, ok := attributes["advertise_host_routes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`advertise_host_routes is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	advertiseHostRoutesVal, ok := advertiseHostRoutesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`advertise_host_routes expected to be basetypes.BoolValue, was: %T`, advertiseHostRoutesAttribute))
	}

	bgpPasswordAttribute, ok := attributes["bgp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp_password is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	bgpPasswordVal, ok := bgpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp_password expected to be basetypes.StringValue, was: %T`, bgpPasswordAttribute))
	}

	bgpPasswordTypeAttribute, ok := attributes["bgp_password_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bgp_password_type is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	bgpPasswordTypeVal, ok := bgpPasswordTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bgp_password_type expected to be basetypes.StringValue, was: %T`, bgpPasswordTypeAttribute))
	}

	configureStaticDefaultRouteAttribute, ok := attributes["configure_static_default_route"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`configure_static_default_route is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	configureStaticDefaultRouteVal, ok := configureStaticDefaultRouteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`configure_static_default_route expected to be basetypes.BoolValue, was: %T`, configureStaticDefaultRouteAttribute))
	}

	disableRtAutoAttribute, ok := attributes["disable_rt_auto"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disable_rt_auto is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	disableRtAutoVal, ok := disableRtAutoAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disable_rt_auto expected to be basetypes.BoolValue, was: %T`, disableRtAutoAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	ipv6LinkLocalAttribute, ok := attributes["ipv6_link_local"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ipv6_link_local is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	ipv6LinkLocalVal, ok := ipv6LinkLocalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ipv6_link_local expected to be basetypes.BoolValue, was: %T`, ipv6LinkLocalAttribute))
	}

	loopbackRoutingTagAttribute, ok := attributes["loopback_routing_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`loopback_routing_tag is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	loopbackRoutingTagVal, ok := loopbackRoutingTagAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`loopback_routing_tag expected to be basetypes.Int64Value, was: %T`, loopbackRoutingTagAttribute))
	}

	maxBgpPathsAttribute, ok := attributes["max_bgp_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_bgp_paths is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	maxBgpPathsVal, ok := maxBgpPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_bgp_paths expected to be basetypes.Int64Value, was: %T`, maxBgpPathsAttribute))
	}

	maxIbgpPathsAttribute, ok := attributes["max_ibgp_paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_ibgp_paths is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	maxIbgpPathsVal, ok := maxIbgpPathsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_ibgp_paths expected to be basetypes.Int64Value, was: %T`, maxIbgpPathsAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.Int64Value, was: %T`, mtuAttribute))
	}

	mvpnInterAsAttribute, ok := attributes["mvpn_inter_as"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mvpn_inter_as is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	mvpnInterAsVal, ok := mvpnInterAsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mvpn_inter_as expected to be basetypes.BoolValue, was: %T`, mvpnInterAsAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	noRpAttribute, ok := attributes["no_rp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no_rp is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	noRpVal, ok := noRpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no_rp expected to be basetypes.BoolValue, was: %T`, noRpAttribute))
	}

	overlayMulticastGroupsAttribute, ok := attributes["overlay_multicast_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`overlay_multicast_groups is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	overlayMulticastGroupsVal, ok := overlayMulticastGroupsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`overlay_multicast_groups expected to be basetypes.StringValue, was: %T`, overlayMulticastGroupsAttribute))
	}

	redistributeDirectRouteMapAttribute, ok := attributes["redistribute_direct_route_map"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`redistribute_direct_route_map is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	redistributeDirectRouteMapVal, ok := redistributeDirectRouteMapAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`redistribute_direct_route_map expected to be basetypes.StringValue, was: %T`, redistributeDirectRouteMapAttribute))
	}

	routeTargetExportAttribute, ok := attributes["route_target_export"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetExportVal, ok := routeTargetExportAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export expected to be basetypes.StringValue, was: %T`, routeTargetExportAttribute))
	}

	routeTargetExportCloudEvpnAttribute, ok := attributes["route_target_export_cloud_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_cloud_evpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetExportCloudEvpnVal, ok := routeTargetExportCloudEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_cloud_evpn expected to be basetypes.StringValue, was: %T`, routeTargetExportCloudEvpnAttribute))
	}

	routeTargetExportEvpnAttribute, ok := attributes["route_target_export_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_evpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetExportEvpnVal, ok := routeTargetExportEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_evpn expected to be basetypes.StringValue, was: %T`, routeTargetExportEvpnAttribute))
	}

	routeTargetExportMvpnAttribute, ok := attributes["route_target_export_mvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_export_mvpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetExportMvpnVal, ok := routeTargetExportMvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_export_mvpn expected to be basetypes.StringValue, was: %T`, routeTargetExportMvpnAttribute))
	}

	routeTargetImportAttribute, ok := attributes["route_target_import"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetImportVal, ok := routeTargetImportAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import expected to be basetypes.StringValue, was: %T`, routeTargetImportAttribute))
	}

	routeTargetImportCloudEvpnAttribute, ok := attributes["route_target_import_cloud_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_cloud_evpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetImportCloudEvpnVal, ok := routeTargetImportCloudEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_cloud_evpn expected to be basetypes.StringValue, was: %T`, routeTargetImportCloudEvpnAttribute))
	}

	routeTargetImportEvpnAttribute, ok := attributes["route_target_import_evpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_evpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetImportEvpnVal, ok := routeTargetImportEvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_evpn expected to be basetypes.StringValue, was: %T`, routeTargetImportEvpnAttribute))
	}

	routeTargetImportMvpnAttribute, ok := attributes["route_target_import_mvpn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`route_target_import_mvpn is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	routeTargetImportMvpnVal, ok := routeTargetImportMvpnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`route_target_import_mvpn expected to be basetypes.StringValue, was: %T`, routeTargetImportMvpnAttribute))
	}

	rpAddressAttribute, ok := attributes["rp_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_address is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	rpAddressVal, ok := rpAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_address expected to be basetypes.StringValue, was: %T`, rpAddressAttribute))
	}

	rpExternalAttribute, ok := attributes["rp_external"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_external is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	rpExternalVal, ok := rpExternalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_external expected to be basetypes.BoolValue, was: %T`, rpExternalAttribute))
	}

	rpLoopbackIdAttribute, ok := attributes["rp_loopback_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rp_loopback_id is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	rpLoopbackIdVal, ok := rpLoopbackIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rp_loopback_id expected to be basetypes.Int64Value, was: %T`, rpLoopbackIdAttribute))
	}

	trmAttribute, ok := attributes["trm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trm is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	trmVal, ok := trmAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trm expected to be basetypes.BoolValue, was: %T`, trmAttribute))
	}

	trmBgwMsiteAttribute, ok := attributes["trm_bgw_msite"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trm_bgw_msite is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	trmBgwMsiteVal, ok := trmBgwMsiteAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trm_bgw_msite expected to be basetypes.BoolValue, was: %T`, trmBgwMsiteAttribute))
	}

	underlayMulticastAddressAttribute, ok := attributes["underlay_multicast_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`underlay_multicast_address is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	underlayMulticastAddressVal, ok := underlayMulticastAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`underlay_multicast_address expected to be basetypes.StringValue, was: %T`, underlayMulticastAddressAttribute))
	}

	vlanIdAttribute, ok := attributes["vlan_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan_id is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vlanIdVal, ok := vlanIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan_id expected to be basetypes.Int64Value, was: %T`, vlanIdAttribute))
	}

	vlanNameAttribute, ok := attributes["vlan_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan_name is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vlanNameVal, ok := vlanNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan_name expected to be basetypes.StringValue, was: %T`, vlanNameAttribute))
	}

	vrfDescriptionAttribute, ok := attributes["vrf_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_description is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfDescriptionVal, ok := vrfDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_description expected to be basetypes.StringValue, was: %T`, vrfDescriptionAttribute))
	}

	vrfExtensionTemplateAttribute, ok := attributes["vrf_extension_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_extension_template is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfExtensionTemplateVal, ok := vrfExtensionTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_extension_template expected to be basetypes.StringValue, was: %T`, vrfExtensionTemplateAttribute))
	}

	vrfIdAttribute, ok := attributes["vrf_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_id is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfIdVal, ok := vrfIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_id expected to be basetypes.Int64Value, was: %T`, vrfIdAttribute))
	}

	vrfNameAttribute, ok := attributes["vrf_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_name is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfNameVal, ok := vrfNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_name expected to be basetypes.StringValue, was: %T`, vrfNameAttribute))
	}

	vrfStatusAttribute, ok := attributes["vrf_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_status is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfStatusVal, ok := vrfStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_status expected to be basetypes.StringValue, was: %T`, vrfStatusAttribute))
	}

	vrfTemplateAttribute, ok := attributes["vrf_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vrf_template is missing from object`)

		return NewVrfsValueUnknown(), diags
	}

	vrfTemplateVal, ok := vrfTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vrf_template expected to be basetypes.StringValue, was: %T`, vrfTemplateAttribute))
	}

	if diags.HasError() {
		return NewVrfsValueUnknown(), diags
	}

	return VrfsValue{
		AdvertiseDefaultRoute:       advertiseDefaultRouteVal,
		AdvertiseHostRoutes:         advertiseHostRoutesVal,
		BgpPassword:                 bgpPasswordVal,
		BgpPasswordType:             bgpPasswordTypeVal,
		ConfigureStaticDefaultRoute: configureStaticDefaultRouteVal,
		DisableRtAuto:               disableRtAutoVal,
		InterfaceDescription:        interfaceDescriptionVal,
		Ipv6LinkLocal:               ipv6LinkLocalVal,
		LoopbackRoutingTag:          loopbackRoutingTagVal,
		MaxBgpPaths:                 maxBgpPathsVal,
		MaxIbgpPaths:                maxIbgpPathsVal,
		Mtu:                         mtuVal,
		MvpnInterAs:                 mvpnInterAsVal,
		Netflow:                     netflowVal,
		NetflowMonitor:              netflowMonitorVal,
		NoRp:                        noRpVal,
		OverlayMulticastGroups:      overlayMulticastGroupsVal,
		RedistributeDirectRouteMap:  redistributeDirectRouteMapVal,
		RouteTargetExport:           routeTargetExportVal,
		RouteTargetExportCloudEvpn:  routeTargetExportCloudEvpnVal,
		RouteTargetExportEvpn:       routeTargetExportEvpnVal,
		RouteTargetExportMvpn:       routeTargetExportMvpnVal,
		RouteTargetImport:           routeTargetImportVal,
		RouteTargetImportCloudEvpn:  routeTargetImportCloudEvpnVal,
		RouteTargetImportEvpn:       routeTargetImportEvpnVal,
		RouteTargetImportMvpn:       routeTargetImportMvpnVal,
		RpAddress:                   rpAddressVal,
		RpExternal:                  rpExternalVal,
		RpLoopbackId:                rpLoopbackIdVal,
		Trm:                         trmVal,
		TrmBgwMsite:                 trmBgwMsiteVal,
		UnderlayMulticastAddress:    underlayMulticastAddressVal,
		VlanId:                      vlanIdVal,
		VlanName:                    vlanNameVal,
		VrfDescription:              vrfDescriptionVal,
		VrfExtensionTemplate:        vrfExtensionTemplateVal,
		VrfId:                       vrfIdVal,
		VrfName:                     vrfNameVal,
		VrfStatus:                   vrfStatusVal,
		VrfTemplate:                 vrfTemplateVal,
		state:                       attr.ValueStateKnown,
	}, diags
}

func NewVrfsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VrfsValue {
	object, diags := NewVrfsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVrfsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VrfsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVrfsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVrfsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVrfsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVrfsValueMust(t.AttrTypes, attributes), nil
}

func (t VrfsType) ValueType(ctx context.Context) attr.Value {
	return VrfsValue{}
}

var _ basetypes.ObjectValuable = VrfsValue{}

type VrfsValue struct {
	AdvertiseDefaultRoute       basetypes.BoolValue   `tfsdk:"advertise_default_route"`
	AdvertiseHostRoutes         basetypes.BoolValue   `tfsdk:"advertise_host_routes"`
	BgpPassword                 basetypes.StringValue `tfsdk:"bgp_password"`
	BgpPasswordType             basetypes.StringValue `tfsdk:"bgp_password_type"`
	ConfigureStaticDefaultRoute basetypes.BoolValue   `tfsdk:"configure_static_default_route"`
	DisableRtAuto               basetypes.BoolValue   `tfsdk:"disable_rt_auto"`
	InterfaceDescription        basetypes.StringValue `tfsdk:"interface_description"`
	Ipv6LinkLocal               basetypes.BoolValue   `tfsdk:"ipv6_link_local"`
	LoopbackRoutingTag          basetypes.Int64Value  `tfsdk:"loopback_routing_tag"`
	MaxBgpPaths                 basetypes.Int64Value  `tfsdk:"max_bgp_paths"`
	MaxIbgpPaths                basetypes.Int64Value  `tfsdk:"max_ibgp_paths"`
	Mtu                         basetypes.Int64Value  `tfsdk:"mtu"`
	MvpnInterAs                 basetypes.BoolValue   `tfsdk:"mvpn_inter_as"`
	Netflow                     basetypes.BoolValue   `tfsdk:"netflow"`
	NetflowMonitor              basetypes.StringValue `tfsdk:"netflow_monitor"`
	NoRp                        basetypes.BoolValue   `tfsdk:"no_rp"`
	OverlayMulticastGroups      basetypes.StringValue `tfsdk:"overlay_multicast_groups"`
	RedistributeDirectRouteMap  basetypes.StringValue `tfsdk:"redistribute_direct_route_map"`
	RouteTargetExport           basetypes.StringValue `tfsdk:"route_target_export"`
	RouteTargetExportCloudEvpn  basetypes.StringValue `tfsdk:"route_target_export_cloud_evpn"`
	RouteTargetExportEvpn       basetypes.StringValue `tfsdk:"route_target_export_evpn"`
	RouteTargetExportMvpn       basetypes.StringValue `tfsdk:"route_target_export_mvpn"`
	RouteTargetImport           basetypes.StringValue `tfsdk:"route_target_import"`
	RouteTargetImportCloudEvpn  basetypes.StringValue `tfsdk:"route_target_import_cloud_evpn"`
	RouteTargetImportEvpn       basetypes.StringValue `tfsdk:"route_target_import_evpn"`
	RouteTargetImportMvpn       basetypes.StringValue `tfsdk:"route_target_import_mvpn"`
	RpAddress                   basetypes.StringValue `tfsdk:"rp_address"`
	RpExternal                  basetypes.BoolValue   `tfsdk:"rp_external"`
	RpLoopbackId                basetypes.Int64Value  `tfsdk:"rp_loopback_id"`
	Trm                         basetypes.BoolValue   `tfsdk:"trm"`
	TrmBgwMsite                 basetypes.BoolValue   `tfsdk:"trm_bgw_msite"`
	UnderlayMulticastAddress    basetypes.StringValue `tfsdk:"underlay_multicast_address"`
	VlanId                      basetypes.Int64Value  `tfsdk:"vlan_id"`
	VlanName                    basetypes.StringValue `tfsdk:"vlan_name"`
	VrfDescription              basetypes.StringValue `tfsdk:"vrf_description"`
	VrfExtensionTemplate        basetypes.StringValue `tfsdk:"vrf_extension_template"`
	VrfId                       basetypes.Int64Value  `tfsdk:"vrf_id"`
	VrfName                     basetypes.StringValue `tfsdk:"vrf_name"`
	VrfStatus                   basetypes.StringValue `tfsdk:"vrf_status"`
	VrfTemplate                 basetypes.StringValue `tfsdk:"vrf_template"`
	state                       attr.ValueState
}

func (v VrfsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 40)

	var val tftypes.Value
	var err error

	attrTypes["advertise_default_route"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["advertise_host_routes"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["bgp_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["bgp_password_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["configure_static_default_route"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["disable_rt_auto"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["interface_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ipv6_link_local"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["loopback_routing_tag"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_bgp_paths"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_ibgp_paths"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["mtu"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["mvpn_inter_as"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["netflow"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["netflow_monitor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["no_rp"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["overlay_multicast_groups"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["redistribute_direct_route_map"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_export"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_export_cloud_evpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_export_evpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_export_mvpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_import"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_import_cloud_evpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_import_evpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["route_target_import_mvpn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rp_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rp_external"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["rp_loopback_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["trm"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["trm_bgw_msite"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["underlay_multicast_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vlan_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["vlan_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_extension_template"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["vrf_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vrf_template"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 40)

		val, err = v.AdvertiseDefaultRoute.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["advertise_default_route"] = val

		val, err = v.AdvertiseHostRoutes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["advertise_host_routes"] = val

		val, err = v.BgpPassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bgp_password"] = val

		val, err = v.BgpPasswordType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bgp_password_type"] = val

		val, err = v.ConfigureStaticDefaultRoute.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["configure_static_default_route"] = val

		val, err = v.DisableRtAuto.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disable_rt_auto"] = val

		val, err = v.InterfaceDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_description"] = val

		val, err = v.Ipv6LinkLocal.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ipv6_link_local"] = val

		val, err = v.LoopbackRoutingTag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["loopback_routing_tag"] = val

		val, err = v.MaxBgpPaths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_bgp_paths"] = val

		val, err = v.MaxIbgpPaths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_ibgp_paths"] = val

		val, err = v.Mtu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mtu"] = val

		val, err = v.MvpnInterAs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mvpn_inter_as"] = val

		val, err = v.Netflow.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow"] = val

		val, err = v.NetflowMonitor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_monitor"] = val

		val, err = v.NoRp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["no_rp"] = val

		val, err = v.OverlayMulticastGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["overlay_multicast_groups"] = val

		val, err = v.RedistributeDirectRouteMap.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["redistribute_direct_route_map"] = val

		val, err = v.RouteTargetExport.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_export"] = val

		val, err = v.RouteTargetExportCloudEvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_export_cloud_evpn"] = val

		val, err = v.RouteTargetExportEvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_export_evpn"] = val

		val, err = v.RouteTargetExportMvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_export_mvpn"] = val

		val, err = v.RouteTargetImport.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_import"] = val

		val, err = v.RouteTargetImportCloudEvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_import_cloud_evpn"] = val

		val, err = v.RouteTargetImportEvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_import_evpn"] = val

		val, err = v.RouteTargetImportMvpn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["route_target_import_mvpn"] = val

		val, err = v.RpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rp_address"] = val

		val, err = v.RpExternal.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rp_external"] = val

		val, err = v.RpLoopbackId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rp_loopback_id"] = val

		val, err = v.Trm.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["trm"] = val

		val, err = v.TrmBgwMsite.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["trm_bgw_msite"] = val

		val, err = v.UnderlayMulticastAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["underlay_multicast_address"] = val

		val, err = v.VlanId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan_id"] = val

		val, err = v.VlanName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan_name"] = val

		val, err = v.VrfDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_description"] = val

		val, err = v.VrfExtensionTemplate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_extension_template"] = val

		val, err = v.VrfId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_id"] = val

		val, err = v.VrfName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_name"] = val

		val, err = v.VrfStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_status"] = val

		val, err = v.VrfTemplate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vrf_template"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VrfsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VrfsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VrfsValue) String() string {
	return "VrfsValue"
}

func (v VrfsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"advertise_default_route":        basetypes.BoolType{},
			"advertise_host_routes":          basetypes.BoolType{},
			"bgp_password":                   basetypes.StringType{},
			"bgp_password_type":              basetypes.StringType{},
			"configure_static_default_route": basetypes.BoolType{},
			"disable_rt_auto":                basetypes.BoolType{},
			"interface_description":          basetypes.StringType{},
			"ipv6_link_local":                basetypes.BoolType{},
			"loopback_routing_tag":           basetypes.Int64Type{},
			"max_bgp_paths":                  basetypes.Int64Type{},
			"max_ibgp_paths":                 basetypes.Int64Type{},
			"mtu":                            basetypes.Int64Type{},
			"mvpn_inter_as":                  basetypes.BoolType{},
			"netflow":                        basetypes.BoolType{},
			"netflow_monitor":                basetypes.StringType{},
			"no_rp":                          basetypes.BoolType{},
			"overlay_multicast_groups":       basetypes.StringType{},
			"redistribute_direct_route_map":  basetypes.StringType{},
			"route_target_export":            basetypes.StringType{},
			"route_target_export_cloud_evpn": basetypes.StringType{},
			"route_target_export_evpn":       basetypes.StringType{},
			"route_target_export_mvpn":       basetypes.StringType{},
			"route_target_import":            basetypes.StringType{},
			"route_target_import_cloud_evpn": basetypes.StringType{},
			"route_target_import_evpn":       basetypes.StringType{},
			"route_target_import_mvpn":       basetypes.StringType{},
			"rp_address":                     basetypes.StringType{},
			"rp_external":                    basetypes.BoolType{},
			"rp_loopback_id":                 basetypes.Int64Type{},
			"trm":                            basetypes.BoolType{},
			"trm_bgw_msite":                  basetypes.BoolType{},
			"underlay_multicast_address":     basetypes.StringType{},
			"vlan_id":                        basetypes.Int64Type{},
			"vlan_name":                      basetypes.StringType{},
			"vrf_description":                basetypes.StringType{},
			"vrf_extension_template":         basetypes.StringType{},
			"vrf_id":                         basetypes.Int64Type{},
			"vrf_name":                       basetypes.StringType{},
			"vrf_status":                     basetypes.StringType{},
			"vrf_template":                   basetypes.StringType{},
		},
		map[string]attr.Value{
			"advertise_default_route":        v.AdvertiseDefaultRoute,
			"advertise_host_routes":          v.AdvertiseHostRoutes,
			"bgp_password":                   v.BgpPassword,
			"bgp_password_type":              v.BgpPasswordType,
			"configure_static_default_route": v.ConfigureStaticDefaultRoute,
			"disable_rt_auto":                v.DisableRtAuto,
			"interface_description":          v.InterfaceDescription,
			"ipv6_link_local":                v.Ipv6LinkLocal,
			"loopback_routing_tag":           v.LoopbackRoutingTag,
			"max_bgp_paths":                  v.MaxBgpPaths,
			"max_ibgp_paths":                 v.MaxIbgpPaths,
			"mtu":                            v.Mtu,
			"mvpn_inter_as":                  v.MvpnInterAs,
			"netflow":                        v.Netflow,
			"netflow_monitor":                v.NetflowMonitor,
			"no_rp":                          v.NoRp,
			"overlay_multicast_groups":       v.OverlayMulticastGroups,
			"redistribute_direct_route_map":  v.RedistributeDirectRouteMap,
			"route_target_export":            v.RouteTargetExport,
			"route_target_export_cloud_evpn": v.RouteTargetExportCloudEvpn,
			"route_target_export_evpn":       v.RouteTargetExportEvpn,
			"route_target_export_mvpn":       v.RouteTargetExportMvpn,
			"route_target_import":            v.RouteTargetImport,
			"route_target_import_cloud_evpn": v.RouteTargetImportCloudEvpn,
			"route_target_import_evpn":       v.RouteTargetImportEvpn,
			"route_target_import_mvpn":       v.RouteTargetImportMvpn,
			"rp_address":                     v.RpAddress,
			"rp_external":                    v.RpExternal,
			"rp_loopback_id":                 v.RpLoopbackId,
			"trm":                            v.Trm,
			"trm_bgw_msite":                  v.TrmBgwMsite,
			"underlay_multicast_address":     v.UnderlayMulticastAddress,
			"vlan_id":                        v.VlanId,
			"vlan_name":                      v.VlanName,
			"vrf_description":                v.VrfDescription,
			"vrf_extension_template":         v.VrfExtensionTemplate,
			"vrf_id":                         v.VrfId,
			"vrf_name":                       v.VrfName,
			"vrf_status":                     v.VrfStatus,
			"vrf_template":                   v.VrfTemplate,
		})

	return objVal, diags
}

func (v VrfsValue) Equal(o attr.Value) bool {
	other, ok := o.(VrfsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdvertiseDefaultRoute.Equal(other.AdvertiseDefaultRoute) {
		return false
	}

	if !v.AdvertiseHostRoutes.Equal(other.AdvertiseHostRoutes) {
		return false
	}

	if !v.BgpPassword.Equal(other.BgpPassword) {
		return false
	}

	if !v.BgpPasswordType.Equal(other.BgpPasswordType) {
		return false
	}

	if !v.ConfigureStaticDefaultRoute.Equal(other.ConfigureStaticDefaultRoute) {
		return false
	}

	if !v.DisableRtAuto.Equal(other.DisableRtAuto) {
		return false
	}

	if !v.InterfaceDescription.Equal(other.InterfaceDescription) {
		return false
	}

	if !v.Ipv6LinkLocal.Equal(other.Ipv6LinkLocal) {
		return false
	}

	if !v.LoopbackRoutingTag.Equal(other.LoopbackRoutingTag) {
		return false
	}

	if !v.MaxBgpPaths.Equal(other.MaxBgpPaths) {
		return false
	}

	if !v.MaxIbgpPaths.Equal(other.MaxIbgpPaths) {
		return false
	}

	if !v.Mtu.Equal(other.Mtu) {
		return false
	}

	if !v.MvpnInterAs.Equal(other.MvpnInterAs) {
		return false
	}

	if !v.Netflow.Equal(other.Netflow) {
		return false
	}

	if !v.NetflowMonitor.Equal(other.NetflowMonitor) {
		return false
	}

	if !v.NoRp.Equal(other.NoRp) {
		return false
	}

	if !v.OverlayMulticastGroups.Equal(other.OverlayMulticastGroups) {
		return false
	}

	if !v.RedistributeDirectRouteMap.Equal(other.RedistributeDirectRouteMap) {
		return false
	}

	if !v.RouteTargetExport.Equal(other.RouteTargetExport) {
		return false
	}

	if !v.RouteTargetExportCloudEvpn.Equal(other.RouteTargetExportCloudEvpn) {
		return false
	}

	if !v.RouteTargetExportEvpn.Equal(other.RouteTargetExportEvpn) {
		return false
	}

	if !v.RouteTargetExportMvpn.Equal(other.RouteTargetExportMvpn) {
		return false
	}

	if !v.RouteTargetImport.Equal(other.RouteTargetImport) {
		return false
	}

	if !v.RouteTargetImportCloudEvpn.Equal(other.RouteTargetImportCloudEvpn) {
		return false
	}

	if !v.RouteTargetImportEvpn.Equal(other.RouteTargetImportEvpn) {
		return false
	}

	if !v.RouteTargetImportMvpn.Equal(other.RouteTargetImportMvpn) {
		return false
	}

	if !v.RpAddress.Equal(other.RpAddress) {
		return false
	}

	if !v.RpExternal.Equal(other.RpExternal) {
		return false
	}

	if !v.RpLoopbackId.Equal(other.RpLoopbackId) {
		return false
	}

	if !v.Trm.Equal(other.Trm) {
		return false
	}

	if !v.TrmBgwMsite.Equal(other.TrmBgwMsite) {
		return false
	}

	if !v.UnderlayMulticastAddress.Equal(other.UnderlayMulticastAddress) {
		return false
	}

	if !v.VlanId.Equal(other.VlanId) {
		return false
	}

	if !v.VlanName.Equal(other.VlanName) {
		return false
	}

	if !v.VrfDescription.Equal(other.VrfDescription) {
		return false
	}

	if !v.VrfExtensionTemplate.Equal(other.VrfExtensionTemplate) {
		return false
	}

	if !v.VrfId.Equal(other.VrfId) {
		return false
	}

	if !v.VrfName.Equal(other.VrfName) {
		return false
	}

	if !v.VrfStatus.Equal(other.VrfStatus) {
		return false
	}

	if !v.VrfTemplate.Equal(other.VrfTemplate) {
		return false
	}

	return true
}

func (v VrfsValue) Type(ctx context.Context) attr.Type {
	return VrfsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VrfsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"advertise_default_route":        basetypes.BoolType{},
		"advertise_host_routes":          basetypes.BoolType{},
		"bgp_password":                   basetypes.StringType{},
		"bgp_password_type":              basetypes.StringType{},
		"configure_static_default_route": basetypes.BoolType{},
		"disable_rt_auto":                basetypes.BoolType{},
		"interface_description":          basetypes.StringType{},
		"ipv6_link_local":                basetypes.BoolType{},
		"loopback_routing_tag":           basetypes.Int64Type{},
		"max_bgp_paths":                  basetypes.Int64Type{},
		"max_ibgp_paths":                 basetypes.Int64Type{},
		"mtu":                            basetypes.Int64Type{},
		"mvpn_inter_as":                  basetypes.BoolType{},
		"netflow":                        basetypes.BoolType{},
		"netflow_monitor":                basetypes.StringType{},
		"no_rp":                          basetypes.BoolType{},
		"overlay_multicast_groups":       basetypes.StringType{},
		"redistribute_direct_route_map":  basetypes.StringType{},
		"route_target_export":            basetypes.StringType{},
		"route_target_export_cloud_evpn": basetypes.StringType{},
		"route_target_export_evpn":       basetypes.StringType{},
		"route_target_export_mvpn":       basetypes.StringType{},
		"route_target_import":            basetypes.StringType{},
		"route_target_import_cloud_evpn": basetypes.StringType{},
		"route_target_import_evpn":       basetypes.StringType{},
		"route_target_import_mvpn":       basetypes.StringType{},
		"rp_address":                     basetypes.StringType{},
		"rp_external":                    basetypes.BoolType{},
		"rp_loopback_id":                 basetypes.Int64Type{},
		"trm":                            basetypes.BoolType{},
		"trm_bgw_msite":                  basetypes.BoolType{},
		"underlay_multicast_address":     basetypes.StringType{},
		"vlan_id":                        basetypes.Int64Type{},
		"vlan_name":                      basetypes.StringType{},
		"vrf_description":                basetypes.StringType{},
		"vrf_extension_template":         basetypes.StringType{},
		"vrf_id":                         basetypes.Int64Type{},
		"vrf_name":                       basetypes.StringType{},
		"vrf_status":                     basetypes.StringType{},
		"vrf_template":                   basetypes.StringType{},
	}
}
