// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_rest_api

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func RestApiResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"delete_method": schema.StringAttribute{
				Optional:            true,
				Description:         "Method to use for delete operation. If not specified, DELETE is used",
				MarkdownDescription: "Method to use for delete operation. If not specified, DELETE is used",
			},
			"delete_parameters": schema.StringAttribute{
				Optional:            true,
				Description:         "Query parameters for DELETE API if any; format is key1=value1&key2=value2",
				MarkdownDescription: "Query parameters for DELETE API if any; format is key1=value1&key2=value2",
			},
			"delete_payload": schema.StringAttribute{
				Optional:            true,
				Description:         "Payload to send for delete operation. Ignored if the method is `DELETE`.\nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
				MarkdownDescription: "Payload to send for delete operation. Ignored if the method is `DELETE`.\nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
			},
			"delete_url": schema.StringAttribute{
				Optional:            true,
				Description:         "URL to be used for delete operation. If not specified, the same URL as the create URL is used",
				MarkdownDescription: "URL to be used for delete operation. If not specified, the same URL as the create URL is used",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the policy",
				MarkdownDescription: "ID of the policy",
			},
			"method": schema.StringAttribute{
				Required:            true,
				Description:         "Method to use GET/POST/PUT",
				MarkdownDescription: "Method to use GET/POST/PUT",
			},
			"payload": schema.StringAttribute{
				Required:            true,
				Description:         "Payload to send for CREATE/UPDATE operations",
				MarkdownDescription: "Payload to send for CREATE/UPDATE operations",
			},
			"read_url": schema.StringAttribute{
				Optional:            true,
				Description:         "URL to be used for GET(Read) operation. If not specified Read does not query NDFC\nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\nThe response from the GET operation is used to overwrite `payload`\nNote: The GET response must be an exact match of `payload`\n",
				MarkdownDescription: "URL to be used for GET(Read) operation. If not specified Read does not query NDFC\nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\nThe response from the GET operation is used to overwrite `payload`\nNote: The GET response must be an exact match of `payload`\n",
			},
			"response_message": schema.StringAttribute{
				Computed:            true,
				Description:         "Response message from the API for the Create/Update operation\nThis field is used for template replacements of the `update_url`, `update_payload`, `delete_url`, `delete_payload` if they contain go template fields like `{{.field_name}}`\n",
				MarkdownDescription: "Response message from the API for the Create/Update operation\nThis field is used for template replacements of the `update_url`, `update_payload`, `delete_url`, `delete_payload` if they contain go template fields like `{{.field_name}}`\n",
			},
			"stateful": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Stateful set to true triggers update only when something changes in config. If set to false every plan shows changes ",
				MarkdownDescription: "Stateful set to true triggers update only when something changes in config. If set to false every plan shows changes ",
				Default:             booldefault.StaticBool(true),
			},
			"update_method": schema.StringAttribute{
				Optional:            true,
				Description:         "Method to use for update operation. PUT is used if not specified",
				MarkdownDescription: "Method to use for update operation. PUT is used if not specified",
			},
			"update_payload": schema.StringAttribute{
				Optional:            true,
				Description:         "Payload to send for update operation. If not specified, the same payload as the create payload is used. \nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
				MarkdownDescription: "Payload to send for update operation. If not specified, the same payload as the create payload is used. \nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
			},
			"update_url": schema.StringAttribute{
				Optional:            true,
				Description:         "URL to be used for update operation. If not specified, the same URL as the create URL is used. \nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
				MarkdownDescription: "URL to be used for update operation. If not specified, the same URL as the create URL is used. \nThis field supports Text/template. Use `{{.field_name}}` to refer to a field from the `response_message`\n",
			},
			"url": schema.StringAttribute{
				Required:            true,
				Description:         "URL to be used for operations - mainly CREATE",
				MarkdownDescription: "URL to be used for operations - mainly CREATE",
			},
		},
		Description:         "Resource to execute any REST API on NDFC.     \nNote: `url` fields are pre-fixed with the NDFC base URL which also includes `<base_url>/appcenter/cisco/ndfc/api/v1/`.       \nHence always use urls relative to above base URL.        \n-  `url` - specify the API and `method` to specify the HTTP method to be used for CRUD operations.  \n-  `payload` - specify the payload for the create and update operations.    \n-  `update_url` - specify the URL for the update operation. Text/Template supported\n-  `update_method` - specify the HTTP method for the update operation.  \n-  `update_payload` - specify the payload for the update operation. Text/Template supported\n-  `delete_url` - specify the URL for the delete operations.  Text/Template supported\n-  `delete_method` - specify the HTTP method for the delete operation.  \n-  `delete_payload` - specify the payload for the delete operation.  Text/Template supported\n-  `delete_parameters` - specify the query parameters for the delete operation.\n-  `stateful` - control the execution of the plan:  \n  - If set to `true`, the plan will be executed only if there is a change in the config.  \n  - If set to `false`, the plan will be executed every time.  \n",
		MarkdownDescription: "Resource to execute any REST API on NDFC.     \nNote: `url` fields are pre-fixed with the NDFC base URL which also includes `<base_url>/appcenter/cisco/ndfc/api/v1/`.       \nHence always use urls relative to above base URL.        \n-  `url` - specify the API and `method` to specify the HTTP method to be used for CRUD operations.  \n-  `payload` - specify the payload for the create and update operations.    \n-  `update_url` - specify the URL for the update operation. Text/Template supported\n-  `update_method` - specify the HTTP method for the update operation.  \n-  `update_payload` - specify the payload for the update operation. Text/Template supported\n-  `delete_url` - specify the URL for the delete operations.  Text/Template supported\n-  `delete_method` - specify the HTTP method for the delete operation.  \n-  `delete_payload` - specify the payload for the delete operation.  Text/Template supported\n-  `delete_parameters` - specify the query parameters for the delete operation.\n-  `stateful` - control the execution of the plan:  \n  - If set to `true`, the plan will be executed only if there is a change in the config.  \n  - If set to `false`, the plan will be executed every time.  \n",
	}
}

type RestApiModel struct {
	DeleteMethod     types.String `tfsdk:"delete_method"`
	DeleteParameters types.String `tfsdk:"delete_parameters"`
	DeletePayload    types.String `tfsdk:"delete_payload"`
	DeleteUrl        types.String `tfsdk:"delete_url"`
	Id               types.String `tfsdk:"id"`
	Method           types.String `tfsdk:"method"`
	Payload          types.String `tfsdk:"payload"`
	ReadUrl          types.String `tfsdk:"read_url"`
	ResponseMessage  types.String `tfsdk:"response_message"`
	Stateful         types.Bool   `tfsdk:"stateful"`
	UpdateMethod     types.String `tfsdk:"update_method"`
	UpdatePayload    types.String `tfsdk:"update_payload"`
	UpdateUrl        types.String `tfsdk:"update_url"`
	Url              types.String `tfsdk:"url"`
}
