// Code generated;  DO NOT EDIT.

package resource_policy

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

type NDFCPolicyModel struct {
	Id                 *int64            `json:"id,omitempty"`
	PolicyId           string            `json:"policyId,omitempty"`
	IsPolicyGroup      bool              `json:"-"`
	Deploy             bool              `json:"-"`
	Status             string            `json:"status,omitempty"`
	EntityName         string            `json:"entityName,omitempty"`
	EntityType         string            `json:"entityType,omitempty"`
	Description        string            `json:"description,omitempty"`
	TemplateName       string            `json:"templateName,omitempty"`
	Source             string            `json:"source,omitempty"`
	Priority           *int64            `json:"priority,omitempty"`
	DeviceSerialNumber string            `json:"serialNumber,omitempty"`
	PolicyParameters   map[string]string `json:"nvPairs,omitempty"`
	AutoGenerated      *bool             `json:"autoGenerated,omitempty"`
	Deleted            *bool             `json:"deleted,omitempty"`
}

func (v *PolicyModel) SetModelData(jsonData *NDFCPolicyModel) diag.Diagnostics {
	var err diag.Diagnostics
	err = nil

	if jsonData.Id != nil {
		v.Id = types.Int64Value(*jsonData.Id)

	} else {
		v.Id = types.Int64Null()
	}

	if jsonData.PolicyId != "" {
		v.PolicyId = types.StringValue(jsonData.PolicyId)
	} else {
		v.PolicyId = types.StringNull()
	}

	v.IsPolicyGroup = types.BoolValue(jsonData.IsPolicyGroup)

	v.Deploy = types.BoolValue(jsonData.Deploy)
	if jsonData.Status != "" {
		v.Status = types.StringValue(jsonData.Status)
	} else {
		v.Status = types.StringNull()
	}

	if jsonData.EntityName != "" {
		v.EntityName = types.StringValue(jsonData.EntityName)
	} else {
		v.EntityName = types.StringNull()
	}

	if jsonData.EntityType != "" {
		v.EntityType = types.StringValue(jsonData.EntityType)
	} else {
		v.EntityType = types.StringNull()
	}

	if jsonData.Description != "" {
		v.Description = types.StringValue(jsonData.Description)
	} else {
		v.Description = types.StringNull()
	}

	if jsonData.TemplateName != "" {
		v.TemplateName = types.StringValue(jsonData.TemplateName)
	} else {
		v.TemplateName = types.StringNull()
	}

	if jsonData.Source != "" {
		v.Source = types.StringValue(jsonData.Source)
	} else {
		v.Source = types.StringNull()
	}

	if jsonData.Priority != nil {
		v.Priority = types.Int64Value(*jsonData.Priority)

	} else {
		v.Priority = types.Int64Null()
	}

	if jsonData.DeviceSerialNumber != "" {
		v.DeviceSerialNumber = types.StringValue(jsonData.DeviceSerialNumber)
	} else {
		v.DeviceSerialNumber = types.StringNull()
	}

	if len(jsonData.PolicyParameters) == 0 {
		log.Printf("v.PolicyParameters is empty")
		v.PolicyParameters, err = types.MapValue(types.StringType, map[string]attr.Value{})
		if err != nil {
			log.Printf("Error in converting map[string]string to  Map %v", err)
			return err
		}
	} else {
		mapData := make(map[string]attr.Value)
		for key, item := range jsonData.PolicyParameters {
			mapData[key] = types.StringValue(item)
		}
		v.PolicyParameters, err = types.MapValue(types.StringType, mapData)
		if err != nil {
			log.Printf("Error in converting map[string]string to  Map")
			return err
		}
	}

	if jsonData.AutoGenerated != nil {
		v.AutoGenerated = types.BoolValue(*jsonData.AutoGenerated)

	} else {
		v.AutoGenerated = types.BoolNull()
	}

	if jsonData.Deleted != nil {
		v.Deleted = types.BoolValue(*jsonData.Deleted)

	} else {
		v.Deleted = types.BoolNull()
	}

	return err
}

func (v PolicyModel) GetModelData() *NDFCPolicyModel {
	var data = new(NDFCPolicyModel)

	//MARSHAL_BODY

	if !v.IsPolicyGroup.IsNull() && !v.IsPolicyGroup.IsUnknown() {
		data.IsPolicyGroup = v.IsPolicyGroup.ValueBool()
	}

	if !v.Deploy.IsNull() && !v.Deploy.IsUnknown() {
		data.Deploy = v.Deploy.ValueBool()
	}

	if !v.EntityName.IsNull() && !v.EntityName.IsUnknown() {
		data.EntityName = v.EntityName.ValueString()
	} else {
		data.EntityName = ""
	}

	if !v.EntityType.IsNull() && !v.EntityType.IsUnknown() {
		data.EntityType = v.EntityType.ValueString()
	} else {
		data.EntityType = ""
	}

	if !v.Description.IsNull() && !v.Description.IsUnknown() {
		data.Description = v.Description.ValueString()
	} else {
		data.Description = ""
	}

	if !v.TemplateName.IsNull() && !v.TemplateName.IsUnknown() {
		data.TemplateName = v.TemplateName.ValueString()
	} else {
		data.TemplateName = ""
	}

	if !v.Source.IsNull() && !v.Source.IsUnknown() {
		data.Source = v.Source.ValueString()
	} else {
		data.Source = ""
	}

	if !v.Priority.IsNull() && !v.Priority.IsUnknown() {
		data.Priority = new(int64)
		*data.Priority = v.Priority.ValueInt64()

	} else {
		data.Priority = nil
	}

	if !v.DeviceSerialNumber.IsNull() && !v.DeviceSerialNumber.IsUnknown() {
		data.DeviceSerialNumber = v.DeviceSerialNumber.ValueString()
	} else {
		data.DeviceSerialNumber = ""
	}

	if !v.PolicyParameters.IsNull() && !v.PolicyParameters.IsUnknown() {
		mapStringData := make(map[string]string)
		dg := v.PolicyParameters.ElementsAs(context.Background(), &mapStringData, false)
		if dg.HasError() {
			panic(dg.Errors())
		}
		data.PolicyParameters = make(map[string]string)
		for key, value := range mapStringData {
			data.PolicyParameters[key] = value
		}
	}

	if !v.Deleted.IsNull() && !v.Deleted.IsUnknown() {
		data.Deleted = new(bool)
		*data.Deleted = v.Deleted.ValueBool()
	} else {
		data.Deleted = nil
	}

	return data
}
