// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_policy

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func PolicyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_generated": schema.BoolAttribute{
				Computed:            true,
				Description:         "Auto generated policy",
				MarkdownDescription: "Auto generated policy",
			},
			"deleted": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deleted policy",
				MarkdownDescription: "Deleted policy",
			},
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy policy",
				MarkdownDescription: "Deploy policy",
				Default:             booldefault.StaticBool(false),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         "Description of the policy",
				MarkdownDescription: "Description of the policy",
			},
			"device_serial_number": schema.StringAttribute{
				Required:            true,
				Description:         "Serial number of the device",
				MarkdownDescription: "Serial number of the device",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"entity_name": schema.StringAttribute{
				Required:            true,
				Description:         "Policy Name",
				MarkdownDescription: "Policy Name",
			},
			"entity_type": schema.StringAttribute{
				Required:            true,
				Description:         "Type of the entity",
				MarkdownDescription: "Type of the entity",
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the fabric",
				MarkdownDescription: "Name of the fabric",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "ID of the policy",
				MarkdownDescription: "ID of the policy",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
			},
			"is_policy_group": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Policy Group",
				MarkdownDescription: "Policy Group",
				Default:             booldefault.StaticBool(false),
			},
			"policy_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Policy ID",
				MarkdownDescription: "Policy ID",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"policy_parameters": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "List of name value pairs",
				MarkdownDescription: "List of name value pairs",
			},
			"priority": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Priority of the policy",
				MarkdownDescription: "Priority of the policy",
				Default:             int64default.StaticInt64(500),
			},
			"source": schema.StringAttribute{
				Optional:            true,
				Description:         "Source of the policy",
				MarkdownDescription: "Source of the policy",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Status of the policy",
				MarkdownDescription: "Status of the policy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"template_name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the template",
				MarkdownDescription: "Name of the template",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

type PolicyModel struct {
	AutoGenerated      types.Bool   `tfsdk:"auto_generated"`
	Deleted            types.Bool   `tfsdk:"deleted"`
	Deploy             types.Bool   `tfsdk:"deploy"`
	Description        types.String `tfsdk:"description"`
	DeviceSerialNumber types.String `tfsdk:"device_serial_number"`
	EntityName         types.String `tfsdk:"entity_name"`
	EntityType         types.String `tfsdk:"entity_type"`
	FabricName         types.String `tfsdk:"fabric_name"`
	Id                 types.Int64  `tfsdk:"id"`
	IsPolicyGroup      types.Bool   `tfsdk:"is_policy_group"`
	PolicyId           types.String `tfsdk:"policy_id"`
	PolicyParameters   types.Map    `tfsdk:"policy_parameters"`
	Priority           types.Int64  `tfsdk:"priority"`
	Source             types.String `tfsdk:"source"`
	Status             types.String `tfsdk:"status"`
	TemplateName       types.String `tfsdk:"template_name"`
}
