// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_template

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func TemplateResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"content_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Type of the template content",
				MarkdownDescription: "Type of the template content",
				Default:             stringdefault.StaticString("TEMPLATE_CLI"),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         "Description of the template",
				MarkdownDescription: "Description of the template",
			},
			"file_name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the file",
				MarkdownDescription: "Name of the file",
			},
			"instance_id": schema.Int64Attribute{
				Computed:            true,
				Description:         "Unique identifier for the template",
				MarkdownDescription: "Unique identifier for the template",
			},
			"supported_platforms": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Supported platforms for the template",
				MarkdownDescription: "Supported platforms for the template",
				Default:             stringdefault.StaticString("All"),
			},
			"tags": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Tags for the template",
				MarkdownDescription: "Tags for the template",
			},
			"template_content": schema.StringAttribute{
				Required:            true,
				Description:         "Content for the template",
				MarkdownDescription: "Content for the template",
			},
			"template_name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the template",
				MarkdownDescription: "Name of the template",
			},
			"template_sub_type": schema.StringAttribute{
				Required:            true,
				Description:         "Sub type of the template",
				MarkdownDescription: "Sub type of the template",
			},
			"template_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Type of the template",
				MarkdownDescription: "Type of the template",
				Validators: []validator.String{
					stringvalidator.OneOf("CLI", "POLICY", "POAP", "SHOW", "PROFILE", "FABRIC", "ABSTRACT", "REPORT"),
				},
				Default: stringdefault.StaticString("POLICY"),
			},
		},
	}
}

type TemplateModel struct {
	ContentType        types.String `tfsdk:"content_type"`
	Description        types.String `tfsdk:"description"`
	FileName           types.String `tfsdk:"file_name"`
	InstanceId         types.Int64  `tfsdk:"instance_id"`
	SupportedPlatforms types.String `tfsdk:"supported_platforms"`
	Tags               types.Set    `tfsdk:"tags"`
	TemplateContent    types.String `tfsdk:"template_content"`
	TemplateName       types.String `tfsdk:"template_name"`
	TemplateSubType    types.String `tfsdk:"template_sub_type"`
	TemplateType       types.String `tfsdk:"template_type"`
}
