// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_interface_ethernet

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InterfaceEthernetResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy the configuration",
				MarkdownDescription: "Deploy the configuration",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier for the interface",
				MarkdownDescription: "Unique identifier for the interface",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"interfaces": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"access_vlan": schema.Int64Attribute{
							Optional:            true,
							Description:         "Access VLAN ID",
							MarkdownDescription: "Access VLAN ID",
							Validators: []validator.Int64{
								int64validator.Between(1, 4094),
							},
						},
						"admin_state": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable or disable the interface",
							MarkdownDescription: "Enable or disable the interface",
							Default:             booldefault.StaticBool(true),
						},
						"allowed_vlans": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							MarkdownDescription: "Allowed vlans for the ethernet interface. Allowed values are `none`, `all` or VLAN ranges (1-200,500-2000,3000)",
							Default:             stringdefault.StaticString("none"),
						},
						"bpdu_guard": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable spanning-tree bpduguard: true='enable', false='disable', no='return to default settings'",
							MarkdownDescription: "Enable spanning-tree bpduguard: true='enable', false='disable', no='return to default settings'",
							Validators: []validator.String{
								stringvalidator.OneOf("true", "false", "no"),
							},
							Default: stringdefault.StaticString("true"),
						},
						"custom_policy_parameters": schema.MapAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Description:         "Custom policy parameters",
							MarkdownDescription: "Custom policy parameters",
						},
						"deployment_status": schema.StringAttribute{
							Computed:            true,
							Description:         "Status of the deployment",
							MarkdownDescription: "Status of the deployment",
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},
						"freeform_config": schema.StringAttribute{
							Optional:            true,
							Description:         "Additional CLI for the interface",
							MarkdownDescription: "Additional CLI for the interface",
						},
						"interface_description": schema.StringAttribute{
							Optional:            true,
							Description:         "Interface description",
							MarkdownDescription: "Interface description",
						},
						"interface_name": schema.StringAttribute{
							Required:            true,
							Description:         "Name of the Interface. Example: `Ethernet1/3`",
							MarkdownDescription: "Name of the Interface. Example: `Ethernet1/3`",
						},
						"mtu": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "MTU for the interface",
							MarkdownDescription: "MTU for the interface",
							Validators: []validator.String{
								stringvalidator.OneOf("default", "jumbo"),
							},
							Default: stringdefault.StaticString("jumbo"),
						},
						"native_vlan": schema.Int64Attribute{
							Optional:            true,
							Description:         "Set native VLAN for the interface",
							MarkdownDescription: "Set native VLAN for the interface",
							Validators: []validator.Int64{
								int64validator.Between(1, 4094),
							},
						},
						"netflow": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Netflow is supported only if it is enabled on fabric",
							MarkdownDescription: "Netflow is supported only if it is enabled on fabric",
							Default:             booldefault.StaticBool(false),
						},
						"netflow_monitor": schema.StringAttribute{
							Optional:            true,
							Description:         "Provide the Layer 2 Monitor Name",
							MarkdownDescription: "Provide the Layer 2 Monitor Name",
						},
						"netflow_sampler": schema.StringAttribute{
							Optional:            true,
							Description:         "Netflow sampler name, applicable to N7K only",
							MarkdownDescription: "Netflow sampler name, applicable to N7K only",
						},
						"orphan_port": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "If enabled, configure the interface as a vPC orphan port to be suspended by the secondary peer in vPC failures",
							MarkdownDescription: "If enabled, configure the interface as a vPC orphan port to be suspended by the secondary peer in vPC failures",
							Default:             booldefault.StaticBool(false),
						},
						"port_type_fast": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable spanning-tree edge port behavior",
							MarkdownDescription: "Enable spanning-tree edge port behavior",
							Default:             booldefault.StaticBool(true),
						},
						"ptp": schema.BoolAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Enable PTP",
							MarkdownDescription: "Enable PTP",
							Default:             booldefault.StaticBool(false),
						},
						"serial_number": schema.StringAttribute{
							Optional:            true,
							Description:         "Serial number of switch to configure",
							MarkdownDescription: "Serial number of switch to configure",
						},
						"speed": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Interface speed",
							MarkdownDescription: "Interface speed",
							Validators: []validator.String{
								stringvalidator.OneOf("Auto", "10Mb", "100Mb", "1Gb", "2.5Gb", "5Gb", "10Gb", "25Gb", "40Gb", "50Gb", "100Gb", "200Gb", "400Gb"),
							},
							Default: stringdefault.StaticString("Auto"),
						},
					},
					CustomType: InterfacesType{
						ObjectType: types.ObjectType{
							AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "interfaces to configure",
				MarkdownDescription: "interfaces to configure",
			},
			"policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				MarkdownDescription: "Name of the policy. Examples: `int_trunk_host`, `int_access_host`",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("int_trunk_host"),
			},
			"policy_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies if the policy is user defined or the default ones available in system",
				MarkdownDescription: "Specifies if the policy is user defined or the default ones available in system",
				Validators: []validator.String{
					stringvalidator.OneOf("system", "user-defined"),
				},
				Default: stringdefault.StaticString("system"),
			},
			"serial_number": schema.StringAttribute{
				Optional:            true,
				Description:         "Serial number of switch to configure",
				MarkdownDescription: "Serial number of switch to configure",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{path.MatchRoot("interfaces").AtAnyMapKey().AtName("serial_number")}...),
				},
			},
		},
	}
}

type InterfaceEthernetModel struct {
	Deploy       types.Bool   `tfsdk:"deploy"`
	Id           types.String `tfsdk:"id"`
	Interfaces   types.Map    `tfsdk:"interfaces"`
	Policy       types.String `tfsdk:"policy"`
	PolicyType   types.String `tfsdk:"policy_type"`
	SerialNumber types.String `tfsdk:"serial_number"`
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accessVlanAttribute, ok := attributes["access_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_vlan is missing from object`)

		return nil, diags
	}

	accessVlanVal, ok := accessVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_vlan expected to be basetypes.Int64Value, was: %T`, accessVlanAttribute))
	}

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return nil, diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	allowedVlansAttribute, ok := attributes["allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_vlans is missing from object`)

		return nil, diags
	}

	allowedVlansVal, ok := allowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_vlans expected to be basetypes.StringValue, was: %T`, allowedVlansAttribute))
	}

	bpduGuardAttribute, ok := attributes["bpdu_guard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bpdu_guard is missing from object`)

		return nil, diags
	}

	bpduGuardVal, ok := bpduGuardAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bpdu_guard expected to be basetypes.StringValue, was: %T`, bpduGuardAttribute))
	}

	customPolicyParametersAttribute, ok := attributes["custom_policy_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_policy_parameters is missing from object`)

		return nil, diags
	}

	customPolicyParametersVal, ok := customPolicyParametersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_policy_parameters expected to be basetypes.MapValue, was: %T`, customPolicyParametersAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return nil, diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return nil, diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return nil, diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return nil, diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return nil, diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	nativeVlanAttribute, ok := attributes["native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`native_vlan is missing from object`)

		return nil, diags
	}

	nativeVlanVal, ok := nativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`native_vlan expected to be basetypes.Int64Value, was: %T`, nativeVlanAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return nil, diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return nil, diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return nil, diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	orphanPortAttribute, ok := attributes["orphan_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`orphan_port is missing from object`)

		return nil, diags
	}

	orphanPortVal, ok := orphanPortAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`orphan_port expected to be basetypes.BoolValue, was: %T`, orphanPortAttribute))
	}

	portTypeFastAttribute, ok := attributes["port_type_fast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_type_fast is missing from object`)

		return nil, diags
	}

	portTypeFastVal, ok := portTypeFastAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_type_fast expected to be basetypes.BoolValue, was: %T`, portTypeFastAttribute))
	}

	ptpAttribute, ok := attributes["ptp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ptp is missing from object`)

		return nil, diags
	}

	ptpVal, ok := ptpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ptp expected to be basetypes.BoolValue, was: %T`, ptpAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return nil, diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		AccessVlan:             accessVlanVal,
		AdminState:             adminStateVal,
		AllowedVlans:           allowedVlansVal,
		BpduGuard:              bpduGuardVal,
		CustomPolicyParameters: customPolicyParametersVal,
		DeploymentStatus:       deploymentStatusVal,
		FreeformConfig:         freeformConfigVal,
		InterfaceDescription:   interfaceDescriptionVal,
		InterfaceName:          interfaceNameVal,
		Mtu:                    mtuVal,
		NativeVlan:             nativeVlanVal,
		Netflow:                netflowVal,
		NetflowMonitor:         netflowMonitorVal,
		NetflowSampler:         netflowSamplerVal,
		OrphanPort:             orphanPortVal,
		PortTypeFast:           portTypeFastVal,
		Ptp:                    ptpVal,
		SerialNumber:           serialNumberVal,
		Speed:                  speedVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	accessVlanAttribute, ok := attributes["access_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_vlan is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	accessVlanVal, ok := accessVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_vlan expected to be basetypes.Int64Value, was: %T`, accessVlanAttribute))
	}

	adminStateAttribute, ok := attributes["admin_state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`admin_state is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	adminStateVal, ok := adminStateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`admin_state expected to be basetypes.BoolValue, was: %T`, adminStateAttribute))
	}

	allowedVlansAttribute, ok := attributes["allowed_vlans"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_vlans is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	allowedVlansVal, ok := allowedVlansAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_vlans expected to be basetypes.StringValue, was: %T`, allowedVlansAttribute))
	}

	bpduGuardAttribute, ok := attributes["bpdu_guard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bpdu_guard is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	bpduGuardVal, ok := bpduGuardAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bpdu_guard expected to be basetypes.StringValue, was: %T`, bpduGuardAttribute))
	}

	customPolicyParametersAttribute, ok := attributes["custom_policy_parameters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_policy_parameters is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	customPolicyParametersVal, ok := customPolicyParametersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_policy_parameters expected to be basetypes.MapValue, was: %T`, customPolicyParametersAttribute))
	}

	deploymentStatusAttribute, ok := attributes["deployment_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deployment_status is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	deploymentStatusVal, ok := deploymentStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deployment_status expected to be basetypes.StringValue, was: %T`, deploymentStatusAttribute))
	}

	freeformConfigAttribute, ok := attributes["freeform_config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`freeform_config is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	freeformConfigVal, ok := freeformConfigAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`freeform_config expected to be basetypes.StringValue, was: %T`, freeformConfigAttribute))
	}

	interfaceDescriptionAttribute, ok := attributes["interface_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_description is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceDescriptionVal, ok := interfaceDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_description expected to be basetypes.StringValue, was: %T`, interfaceDescriptionAttribute))
	}

	interfaceNameAttribute, ok := attributes["interface_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface_name is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	interfaceNameVal, ok := interfaceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface_name expected to be basetypes.StringValue, was: %T`, interfaceNameAttribute))
	}

	mtuAttribute, ok := attributes["mtu"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mtu is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	mtuVal, ok := mtuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mtu expected to be basetypes.StringValue, was: %T`, mtuAttribute))
	}

	nativeVlanAttribute, ok := attributes["native_vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`native_vlan is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	nativeVlanVal, ok := nativeVlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`native_vlan expected to be basetypes.Int64Value, was: %T`, nativeVlanAttribute))
	}

	netflowAttribute, ok := attributes["netflow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowVal, ok := netflowAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow expected to be basetypes.BoolValue, was: %T`, netflowAttribute))
	}

	netflowMonitorAttribute, ok := attributes["netflow_monitor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_monitor is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowMonitorVal, ok := netflowMonitorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_monitor expected to be basetypes.StringValue, was: %T`, netflowMonitorAttribute))
	}

	netflowSamplerAttribute, ok := attributes["netflow_sampler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`netflow_sampler is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	netflowSamplerVal, ok := netflowSamplerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`netflow_sampler expected to be basetypes.StringValue, was: %T`, netflowSamplerAttribute))
	}

	orphanPortAttribute, ok := attributes["orphan_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`orphan_port is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	orphanPortVal, ok := orphanPortAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`orphan_port expected to be basetypes.BoolValue, was: %T`, orphanPortAttribute))
	}

	portTypeFastAttribute, ok := attributes["port_type_fast"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_type_fast is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	portTypeFastVal, ok := portTypeFastAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_type_fast expected to be basetypes.BoolValue, was: %T`, portTypeFastAttribute))
	}

	ptpAttribute, ok := attributes["ptp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ptp is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ptpVal, ok := ptpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ptp expected to be basetypes.BoolValue, was: %T`, ptpAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	speedAttribute, ok := attributes["speed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`speed is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	speedVal, ok := speedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`speed expected to be basetypes.StringValue, was: %T`, speedAttribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		AccessVlan:             accessVlanVal,
		AdminState:             adminStateVal,
		AllowedVlans:           allowedVlansVal,
		BpduGuard:              bpduGuardVal,
		CustomPolicyParameters: customPolicyParametersVal,
		DeploymentStatus:       deploymentStatusVal,
		FreeformConfig:         freeformConfigVal,
		InterfaceDescription:   interfaceDescriptionVal,
		InterfaceName:          interfaceNameVal,
		Mtu:                    mtuVal,
		NativeVlan:             nativeVlanVal,
		Netflow:                netflowVal,
		NetflowMonitor:         netflowMonitorVal,
		NetflowSampler:         netflowSamplerVal,
		OrphanPort:             orphanPortVal,
		PortTypeFast:           portTypeFastVal,
		Ptp:                    ptpVal,
		SerialNumber:           serialNumberVal,
		Speed:                  speedVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	AccessVlan             basetypes.Int64Value  `tfsdk:"access_vlan"`
	AdminState             basetypes.BoolValue   `tfsdk:"admin_state"`
	AllowedVlans           basetypes.StringValue `tfsdk:"allowed_vlans"`
	BpduGuard              basetypes.StringValue `tfsdk:"bpdu_guard"`
	CustomPolicyParameters basetypes.MapValue    `tfsdk:"custom_policy_parameters"`
	DeploymentStatus       basetypes.StringValue `tfsdk:"deployment_status"`
	FreeformConfig         basetypes.StringValue `tfsdk:"freeform_config"`
	InterfaceDescription   basetypes.StringValue `tfsdk:"interface_description"`
	InterfaceName          basetypes.StringValue `tfsdk:"interface_name"`
	Mtu                    basetypes.StringValue `tfsdk:"mtu"`
	NativeVlan             basetypes.Int64Value  `tfsdk:"native_vlan"`
	Netflow                basetypes.BoolValue   `tfsdk:"netflow"`
	NetflowMonitor         basetypes.StringValue `tfsdk:"netflow_monitor"`
	NetflowSampler         basetypes.StringValue `tfsdk:"netflow_sampler"`
	OrphanPort             basetypes.BoolValue   `tfsdk:"orphan_port"`
	PortTypeFast           basetypes.BoolValue   `tfsdk:"port_type_fast"`
	Ptp                    basetypes.BoolValue   `tfsdk:"ptp"`
	SerialNumber           basetypes.StringValue `tfsdk:"serial_number"`
	Speed                  basetypes.StringValue `tfsdk:"speed"`
	state                  attr.ValueState
}

func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 19)

	var val tftypes.Value
	var err error

	attrTypes["access_vlan"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["admin_state"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["allowed_vlans"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["bpdu_guard"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["custom_policy_parameters"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["deployment_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["freeform_config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mtu"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["native_vlan"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["netflow"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["netflow_monitor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["netflow_sampler"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["orphan_port"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["port_type_fast"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["ptp"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["speed"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 19)

		val, err = v.AccessVlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["access_vlan"] = val

		val, err = v.AdminState.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["admin_state"] = val

		val, err = v.AllowedVlans.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allowed_vlans"] = val

		val, err = v.BpduGuard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bpdu_guard"] = val

		val, err = v.CustomPolicyParameters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_policy_parameters"] = val

		val, err = v.DeploymentStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deployment_status"] = val

		val, err = v.FreeformConfig.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["freeform_config"] = val

		val, err = v.InterfaceDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_description"] = val

		val, err = v.InterfaceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface_name"] = val

		val, err = v.Mtu.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mtu"] = val

		val, err = v.NativeVlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["native_vlan"] = val

		val, err = v.Netflow.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow"] = val

		val, err = v.NetflowMonitor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_monitor"] = val

		val, err = v.NetflowSampler.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["netflow_sampler"] = val

		val, err = v.OrphanPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["orphan_port"] = val

		val, err = v.PortTypeFast.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_type_fast"] = val

		val, err = v.Ptp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ptp"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.Speed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["speed"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	customPolicyParametersVal, d := types.MapValue(types.StringType, v.CustomPolicyParameters.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"access_vlan":   basetypes.Int64Type{},
			"admin_state":   basetypes.BoolType{},
			"allowed_vlans": basetypes.StringType{},
			"bpdu_guard":    basetypes.StringType{},
			"custom_policy_parameters": basetypes.MapType{
				ElemType: types.StringType,
			},
			"deployment_status":     basetypes.StringType{},
			"freeform_config":       basetypes.StringType{},
			"interface_description": basetypes.StringType{},
			"interface_name":        basetypes.StringType{},
			"mtu":                   basetypes.StringType{},
			"native_vlan":           basetypes.Int64Type{},
			"netflow":               basetypes.BoolType{},
			"netflow_monitor":       basetypes.StringType{},
			"netflow_sampler":       basetypes.StringType{},
			"orphan_port":           basetypes.BoolType{},
			"port_type_fast":        basetypes.BoolType{},
			"ptp":                   basetypes.BoolType{},
			"serial_number":         basetypes.StringType{},
			"speed":                 basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"access_vlan":   basetypes.Int64Type{},
		"admin_state":   basetypes.BoolType{},
		"allowed_vlans": basetypes.StringType{},
		"bpdu_guard":    basetypes.StringType{},
		"custom_policy_parameters": basetypes.MapType{
			ElemType: types.StringType,
		},
		"deployment_status":     basetypes.StringType{},
		"freeform_config":       basetypes.StringType{},
		"interface_description": basetypes.StringType{},
		"interface_name":        basetypes.StringType{},
		"mtu":                   basetypes.StringType{},
		"native_vlan":           basetypes.Int64Type{},
		"netflow":               basetypes.BoolType{},
		"netflow_monitor":       basetypes.StringType{},
		"netflow_sampler":       basetypes.StringType{},
		"orphan_port":           basetypes.BoolType{},
		"port_type_fast":        basetypes.BoolType{},
		"ptp":                   basetypes.BoolType{},
		"serial_number":         basetypes.StringType{},
		"speed":                 basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"access_vlan":              v.AccessVlan,
			"admin_state":              v.AdminState,
			"allowed_vlans":            v.AllowedVlans,
			"bpdu_guard":               v.BpduGuard,
			"custom_policy_parameters": customPolicyParametersVal,
			"deployment_status":        v.DeploymentStatus,
			"freeform_config":          v.FreeformConfig,
			"interface_description":    v.InterfaceDescription,
			"interface_name":           v.InterfaceName,
			"mtu":                      v.Mtu,
			"native_vlan":              v.NativeVlan,
			"netflow":                  v.Netflow,
			"netflow_monitor":          v.NetflowMonitor,
			"netflow_sampler":          v.NetflowSampler,
			"orphan_port":              v.OrphanPort,
			"port_type_fast":           v.PortTypeFast,
			"ptp":                      v.Ptp,
			"serial_number":            v.SerialNumber,
			"speed":                    v.Speed,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccessVlan.Equal(other.AccessVlan) {
		return false
	}

	if !v.AdminState.Equal(other.AdminState) {
		return false
	}

	if !v.AllowedVlans.Equal(other.AllowedVlans) {
		return false
	}

	if !v.BpduGuard.Equal(other.BpduGuard) {
		return false
	}

	if !v.CustomPolicyParameters.Equal(other.CustomPolicyParameters) {
		return false
	}

	if !v.DeploymentStatus.Equal(other.DeploymentStatus) {
		return false
	}

	if !v.FreeformConfig.Equal(other.FreeformConfig) {
		return false
	}

	if !v.InterfaceDescription.Equal(other.InterfaceDescription) {
		return false
	}

	if !v.InterfaceName.Equal(other.InterfaceName) {
		return false
	}

	if !v.Mtu.Equal(other.Mtu) {
		return false
	}

	if !v.NativeVlan.Equal(other.NativeVlan) {
		return false
	}

	if !v.Netflow.Equal(other.Netflow) {
		return false
	}

	if !v.NetflowMonitor.Equal(other.NetflowMonitor) {
		return false
	}

	if !v.NetflowSampler.Equal(other.NetflowSampler) {
		return false
	}

	if !v.OrphanPort.Equal(other.OrphanPort) {
		return false
	}

	if !v.PortTypeFast.Equal(other.PortTypeFast) {
		return false
	}

	if !v.Ptp.Equal(other.Ptp) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.Speed.Equal(other.Speed) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"access_vlan":   basetypes.Int64Type{},
		"admin_state":   basetypes.BoolType{},
		"allowed_vlans": basetypes.StringType{},
		"bpdu_guard":    basetypes.StringType{},
		"custom_policy_parameters": basetypes.MapType{
			ElemType: types.StringType,
		},
		"deployment_status":     basetypes.StringType{},
		"freeform_config":       basetypes.StringType{},
		"interface_description": basetypes.StringType{},
		"interface_name":        basetypes.StringType{},
		"mtu":                   basetypes.StringType{},
		"native_vlan":           basetypes.Int64Type{},
		"netflow":               basetypes.BoolType{},
		"netflow_monitor":       basetypes.StringType{},
		"netflow_sampler":       basetypes.StringType{},
		"orphan_port":           basetypes.BoolType{},
		"port_type_fast":        basetypes.BoolType{},
		"ptp":                   basetypes.BoolType{},
		"serial_number":         basetypes.StringType{},
		"speed":                 basetypes.StringType{},
	}
}
