// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_inventory_devices

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InventoryDevicesResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auth_protocol": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The authentication protocol to use for the devices",
				MarkdownDescription: "The authentication protocol to use for the devices",
				Validators: []validator.String{
					stringvalidator.OneOf("md5", "sha", "md5_des", "md5_aes", "sha_des", "sha_aes"),
				},
				Default: stringdefault.StaticString("md5"),
			},
			"deploy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Deploy the configuration of the devices",
				MarkdownDescription: "Deploy the configuration of the devices",
				Default:             booldefault.StaticBool(false),
			},
			"devices": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"breakout": schema.StringAttribute{
							Optional:            true,
							Description:         "The breakout command provided to teh device",
							MarkdownDescription: "The breakout command provided to teh device",
						},
						"config_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The configuration status of the device",
							MarkdownDescription: "The configuration status of the device",
						},
						"device_index": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC device index",
							MarkdownDescription: "The NDFC device index",
						},
						"discovery_auth_protocol": schema.StringAttribute{
							Optional:            true,
							Description:         "The discovery authentication protocol to use for the device",
							MarkdownDescription: "The discovery authentication protocol to use for the device",
							Validators: []validator.String{
								stringvalidator.OneOf("md5", "sha", "md5_des", "md5_aes", "sha_des", "sha_aes"),
							},
						},
						"discovery_password": schema.StringAttribute{
							Optional:            true,
							Sensitive:           true,
							Description:         "The discovery password to use for the device",
							MarkdownDescription: "The discovery password to use for the device",
						},
						"discovery_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The operational status of the device",
							MarkdownDescription: "The operational status of the device",
						},
						"discovery_type": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The discovery type of the device",
							MarkdownDescription: "The discovery type of the device",
							Validators: []validator.String{
								stringvalidator.OneOf("bootstrap", "discover", "pre_provision", "rma"),
							},
							Default: stringdefault.StaticString("discover"),
						},
						"discovery_username": schema.StringAttribute{
							Optional:            true,
							Description:         "The discovery username to use for the device",
							MarkdownDescription: "The discovery username to use for the device",
						},
						"gateway": schema.StringAttribute{
							Optional:            true,
							Description:         "The gateway to use for the device",
							MarkdownDescription: "The gateway to use for the device",
						},
						"hostname": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The hostname of the device",
							MarkdownDescription: "The hostname of the device",
						},
						"image_policy": schema.StringAttribute{
							Optional:            true,
							Description:         "The image policy to use for the device",
							MarkdownDescription: "The image policy to use for the device",
						},
						"managable": schema.BoolAttribute{
							Computed:            true,
							Description:         "The managable status of the device",
							MarkdownDescription: "The managable status of the device",
						},
						"mode": schema.StringAttribute{
							Computed:            true,
							Description:         "The mode of the device",
							MarkdownDescription: "The mode of the device",
						},
						"model": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The model of the device",
							MarkdownDescription: "The model of the device",
						},
						"modules_model": schema.SetAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "The switch modules model information.",
							MarkdownDescription: "The switch modules model information.",
						},
						"oper_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The operational status of the device",
							MarkdownDescription: "The operational status of the device",
						},
						"port_mode": schema.StringAttribute{
							Optional:            true,
							Description:         "The port mode of the breakout interface",
							MarkdownDescription: "The port mode of the breakout interface",
						},
						"role": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The role of the device",
							MarkdownDescription: "The role of the device",
							Validators: []validator.String{
								stringvalidator.OneOf("leaf", "spine", "border", "border_spine", "border_gateway", "border_gateway_spine", "super_spine", "border_super_spine", "border_gateway_super_spine", "access", "aggregation", "edge_router", "core_router", "tor"),
							},
							Default: stringdefault.StaticString("leaf"),
						},
						"serial_number": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The serial number of the device",
							MarkdownDescription: "The serial number of the device",
						},
						"switch_db_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC switch DB ID of the device",
							MarkdownDescription: "The NDFC switch DB ID of the device",
						},
						"uuid": schema.StringAttribute{
							Computed:            true,
							Description:         "The NDFC UUID of the device",
							MarkdownDescription: "The NDFC UUID of the device",
						},
						"vdc_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC ID of the device",
							MarkdownDescription: "The VDC ID of the device",
						},
						"vdc_mac": schema.StringAttribute{
							Computed:            true,
							Description:         "The VDC MAC of the device",
							MarkdownDescription: "The VDC MAC of the device",
						},
						"version": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The software version of the device",
							MarkdownDescription: "The software version of the device",
						},
					},
					CustomType: DevicesType{
						ObjectType: types.ObjectType{
							AttrTypes: DevicesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "The devices to manage in the inventory",
				MarkdownDescription: "The devices to manage in the inventory",
				Validators: []validator.Map{
					mapvalidator.SizeAtLeast(1),
				},
			},
			"fabric_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the fabric",
				MarkdownDescription: "The name of the fabric",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The Terraform Unique Identifier for the Inventory Devices resource",
				MarkdownDescription: "The Terraform Unique Identifier for the Inventory Devices resource",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"max_hops": schema.Int64Attribute{
				Optional:            true,
				Description:         "The maximum number of hops to use during the discovery of devices",
				MarkdownDescription: "The maximum number of hops to use during the discovery of devices",
			},
			"password": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				Description:         "The password to use for the devices",
				MarkdownDescription: "The password to use for the devices",
			},
			"preserve_config": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Preserve the configuration of the devices",
				MarkdownDescription: "Preserve the configuration of the devices",
				Default:             booldefault.StaticBool(false),
			},
			"retries": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The number of retries to use validate fabric status before execution of requests",
				MarkdownDescription: "The number of retries to use validate fabric status before execution of requests",
				Default:             int64default.StaticInt64(300),
			},
			"retry_wait_timeout": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The time to wait between retries to validate fabric status before execution of requests",
				MarkdownDescription: "The time to wait between retries to validate fabric status before execution of requests",
				Default:             int64default.StaticInt64(5),
			},
			"save": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Save the configuration of the devices",
				MarkdownDescription: "Save the configuration of the devices",
				Default:             booldefault.StaticBool(false),
			},
			"seed_ip": schema.StringAttribute{
				Optional:            true,
				Description:         "The seed IP address to use for the discovery devices",
				MarkdownDescription: "The seed IP address to use for the discovery devices",
			},
			"set_as_individual_device_write_credential": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Set and use discovery credentials for LAN devices",
				MarkdownDescription: "Set and use discovery credentials for LAN devices",
				Default:             booldefault.StaticBool(false),
			},
			"username": schema.StringAttribute{
				Required:            true,
				Description:         "The username to use for the devices",
				MarkdownDescription: "The username to use for the devices",
			},
		},
	}
}

type InventoryDevicesModel struct {
	AuthProtocol                         types.String `tfsdk:"auth_protocol"`
	Deploy                               types.Bool   `tfsdk:"deploy"`
	Devices                              types.Map    `tfsdk:"devices"`
	FabricName                           types.String `tfsdk:"fabric_name"`
	Id                                   types.String `tfsdk:"id"`
	MaxHops                              types.Int64  `tfsdk:"max_hops"`
	Password                             types.String `tfsdk:"password"`
	PreserveConfig                       types.Bool   `tfsdk:"preserve_config"`
	Retries                              types.Int64  `tfsdk:"retries"`
	RetryWaitTimeout                     types.Int64  `tfsdk:"retry_wait_timeout"`
	Save                                 types.Bool   `tfsdk:"save"`
	SeedIp                               types.String `tfsdk:"seed_ip"`
	SetAsIndividualDeviceWriteCredential types.Bool   `tfsdk:"set_as_individual_device_write_credential"`
	Username                             types.String `tfsdk:"username"`
}

var _ basetypes.ObjectTypable = DevicesType{}

type DevicesType struct {
	basetypes.ObjectType
}

func (t DevicesType) Equal(o attr.Type) bool {
	other, ok := o.(DevicesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DevicesType) String() string {
	return "DevicesType"
}

func (t DevicesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	breakoutAttribute, ok := attributes["breakout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`breakout is missing from object`)

		return nil, diags
	}

	breakoutVal, ok := breakoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`breakout expected to be basetypes.StringValue, was: %T`, breakoutAttribute))
	}

	configStatusAttribute, ok := attributes["config_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config_status is missing from object`)

		return nil, diags
	}

	configStatusVal, ok := configStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config_status expected to be basetypes.StringValue, was: %T`, configStatusAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return nil, diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	discoveryAuthProtocolAttribute, ok := attributes["discovery_auth_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_auth_protocol is missing from object`)

		return nil, diags
	}

	discoveryAuthProtocolVal, ok := discoveryAuthProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_auth_protocol expected to be basetypes.StringValue, was: %T`, discoveryAuthProtocolAttribute))
	}

	discoveryPasswordAttribute, ok := attributes["discovery_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_password is missing from object`)

		return nil, diags
	}

	discoveryPasswordVal, ok := discoveryPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_password expected to be basetypes.StringValue, was: %T`, discoveryPasswordAttribute))
	}

	discoveryStatusAttribute, ok := attributes["discovery_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_status is missing from object`)

		return nil, diags
	}

	discoveryStatusVal, ok := discoveryStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_status expected to be basetypes.StringValue, was: %T`, discoveryStatusAttribute))
	}

	discoveryTypeAttribute, ok := attributes["discovery_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_type is missing from object`)

		return nil, diags
	}

	discoveryTypeVal, ok := discoveryTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_type expected to be basetypes.StringValue, was: %T`, discoveryTypeAttribute))
	}

	discoveryUsernameAttribute, ok := attributes["discovery_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_username is missing from object`)

		return nil, diags
	}

	discoveryUsernameVal, ok := discoveryUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_username expected to be basetypes.StringValue, was: %T`, discoveryUsernameAttribute))
	}

	gatewayAttribute, ok := attributes["gateway"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway is missing from object`)

		return nil, diags
	}

	gatewayVal, ok := gatewayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway expected to be basetypes.StringValue, was: %T`, gatewayAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	imagePolicyAttribute, ok := attributes["image_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`image_policy is missing from object`)

		return nil, diags
	}

	imagePolicyVal, ok := imagePolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`image_policy expected to be basetypes.StringValue, was: %T`, imagePolicyAttribute))
	}

	managableAttribute, ok := attributes["managable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managable is missing from object`)

		return nil, diags
	}

	managableVal, ok := managableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managable expected to be basetypes.BoolValue, was: %T`, managableAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	modulesModelAttribute, ok := attributes["modules_model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modules_model is missing from object`)

		return nil, diags
	}

	modulesModelVal, ok := modulesModelAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modules_model expected to be basetypes.SetValue, was: %T`, modulesModelAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return nil, diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	portModeAttribute, ok := attributes["port_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_mode is missing from object`)

		return nil, diags
	}

	portModeVal, ok := portModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_mode expected to be basetypes.StringValue, was: %T`, portModeAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return nil, diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return nil, diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchDbIdAttribute, ok := attributes["switch_db_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_db_id is missing from object`)

		return nil, diags
	}

	switchDbIdVal, ok := switchDbIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_db_id expected to be basetypes.StringValue, was: %T`, switchDbIdAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return nil, diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return nil, diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DevicesValue{
		Breakout:              breakoutVal,
		ConfigStatus:          configStatusVal,
		DeviceIndex:           deviceIndexVal,
		DiscoveryAuthProtocol: discoveryAuthProtocolVal,
		DiscoveryPassword:     discoveryPasswordVal,
		DiscoveryStatus:       discoveryStatusVal,
		DiscoveryType:         discoveryTypeVal,
		DiscoveryUsername:     discoveryUsernameVal,
		Gateway:               gatewayVal,
		Hostname:              hostnameVal,
		ImagePolicy:           imagePolicyVal,
		Managable:             managableVal,
		Mode:                  modeVal,
		Model:                 modelVal,
		ModulesModel:          modulesModelVal,
		OperStatus:            operStatusVal,
		PortMode:              portModeVal,
		Role:                  roleVal,
		SerialNumber:          serialNumberVal,
		SwitchDbId:            switchDbIdVal,
		Uuid:                  uuidVal,
		VdcId:                 vdcIdVal,
		VdcMac:                vdcMacVal,
		Version:               versionVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewDevicesValueNull() DevicesValue {
	return DevicesValue{
		state: attr.ValueStateNull,
	}
}

func NewDevicesValueUnknown() DevicesValue {
	return DevicesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDevicesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DevicesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DevicesValue Attribute Value",
				"While creating a DevicesValue value, a missing attribute value was detected. "+
					"A DevicesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DevicesValue Attribute Type",
				"While creating a DevicesValue value, an invalid attribute value was detected. "+
					"A DevicesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DevicesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DevicesValue Attribute Value",
				"While creating a DevicesValue value, an extra attribute value was detected. "+
					"A DevicesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DevicesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDevicesValueUnknown(), diags
	}

	breakoutAttribute, ok := attributes["breakout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`breakout is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	breakoutVal, ok := breakoutAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`breakout expected to be basetypes.StringValue, was: %T`, breakoutAttribute))
	}

	configStatusAttribute, ok := attributes["config_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	configStatusVal, ok := configStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config_status expected to be basetypes.StringValue, was: %T`, configStatusAttribute))
	}

	deviceIndexAttribute, ok := attributes["device_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`device_index is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	deviceIndexVal, ok := deviceIndexAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`device_index expected to be basetypes.StringValue, was: %T`, deviceIndexAttribute))
	}

	discoveryAuthProtocolAttribute, ok := attributes["discovery_auth_protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_auth_protocol is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryAuthProtocolVal, ok := discoveryAuthProtocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_auth_protocol expected to be basetypes.StringValue, was: %T`, discoveryAuthProtocolAttribute))
	}

	discoveryPasswordAttribute, ok := attributes["discovery_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_password is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryPasswordVal, ok := discoveryPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_password expected to be basetypes.StringValue, was: %T`, discoveryPasswordAttribute))
	}

	discoveryStatusAttribute, ok := attributes["discovery_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryStatusVal, ok := discoveryStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_status expected to be basetypes.StringValue, was: %T`, discoveryStatusAttribute))
	}

	discoveryTypeAttribute, ok := attributes["discovery_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_type is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryTypeVal, ok := discoveryTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_type expected to be basetypes.StringValue, was: %T`, discoveryTypeAttribute))
	}

	discoveryUsernameAttribute, ok := attributes["discovery_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`discovery_username is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	discoveryUsernameVal, ok := discoveryUsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`discovery_username expected to be basetypes.StringValue, was: %T`, discoveryUsernameAttribute))
	}

	gatewayAttribute, ok := attributes["gateway"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	gatewayVal, ok := gatewayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway expected to be basetypes.StringValue, was: %T`, gatewayAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	imagePolicyAttribute, ok := attributes["image_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`image_policy is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	imagePolicyVal, ok := imagePolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`image_policy expected to be basetypes.StringValue, was: %T`, imagePolicyAttribute))
	}

	managableAttribute, ok := attributes["managable"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`managable is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	managableVal, ok := managableAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`managable expected to be basetypes.BoolValue, was: %T`, managableAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	modulesModelAttribute, ok := attributes["modules_model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modules_model is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	modulesModelVal, ok := modulesModelAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modules_model expected to be basetypes.SetValue, was: %T`, modulesModelAttribute))
	}

	operStatusAttribute, ok := attributes["oper_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oper_status is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	operStatusVal, ok := operStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oper_status expected to be basetypes.StringValue, was: %T`, operStatusAttribute))
	}

	portModeAttribute, ok := attributes["port_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_mode is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	portModeVal, ok := portModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_mode expected to be basetypes.StringValue, was: %T`, portModeAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	serialNumberAttribute, ok := attributes["serial_number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial_number is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	serialNumberVal, ok := serialNumberAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial_number expected to be basetypes.StringValue, was: %T`, serialNumberAttribute))
	}

	switchDbIdAttribute, ok := attributes["switch_db_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`switch_db_id is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	switchDbIdVal, ok := switchDbIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`switch_db_id expected to be basetypes.StringValue, was: %T`, switchDbIdAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	vdcIdAttribute, ok := attributes["vdc_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_id is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	vdcIdVal, ok := vdcIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_id expected to be basetypes.StringValue, was: %T`, vdcIdAttribute))
	}

	vdcMacAttribute, ok := attributes["vdc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vdc_mac is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	vdcMacVal, ok := vdcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vdc_mac expected to be basetypes.StringValue, was: %T`, vdcMacAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewDevicesValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewDevicesValueUnknown(), diags
	}

	return DevicesValue{
		Breakout:              breakoutVal,
		ConfigStatus:          configStatusVal,
		DeviceIndex:           deviceIndexVal,
		DiscoveryAuthProtocol: discoveryAuthProtocolVal,
		DiscoveryPassword:     discoveryPasswordVal,
		DiscoveryStatus:       discoveryStatusVal,
		DiscoveryType:         discoveryTypeVal,
		DiscoveryUsername:     discoveryUsernameVal,
		Gateway:               gatewayVal,
		Hostname:              hostnameVal,
		ImagePolicy:           imagePolicyVal,
		Managable:             managableVal,
		Mode:                  modeVal,
		Model:                 modelVal,
		ModulesModel:          modulesModelVal,
		OperStatus:            operStatusVal,
		PortMode:              portModeVal,
		Role:                  roleVal,
		SerialNumber:          serialNumberVal,
		SwitchDbId:            switchDbIdVal,
		Uuid:                  uuidVal,
		VdcId:                 vdcIdVal,
		VdcMac:                vdcMacVal,
		Version:               versionVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewDevicesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DevicesValue {
	object, diags := NewDevicesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDevicesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DevicesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDevicesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDevicesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDevicesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDevicesValueMust(DevicesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DevicesType) ValueType(ctx context.Context) attr.Value {
	return DevicesValue{}
}

var _ basetypes.ObjectValuable = DevicesValue{}

type DevicesValue struct {
	Breakout              basetypes.StringValue `tfsdk:"breakout"`
	ConfigStatus          basetypes.StringValue `tfsdk:"config_status"`
	DeviceIndex           basetypes.StringValue `tfsdk:"device_index"`
	DiscoveryAuthProtocol basetypes.StringValue `tfsdk:"discovery_auth_protocol"`
	DiscoveryPassword     basetypes.StringValue `tfsdk:"discovery_password"`
	DiscoveryStatus       basetypes.StringValue `tfsdk:"discovery_status"`
	DiscoveryType         basetypes.StringValue `tfsdk:"discovery_type"`
	DiscoveryUsername     basetypes.StringValue `tfsdk:"discovery_username"`
	Gateway               basetypes.StringValue `tfsdk:"gateway"`
	Hostname              basetypes.StringValue `tfsdk:"hostname"`
	ImagePolicy           basetypes.StringValue `tfsdk:"image_policy"`
	Managable             basetypes.BoolValue   `tfsdk:"managable"`
	Mode                  basetypes.StringValue `tfsdk:"mode"`
	Model                 basetypes.StringValue `tfsdk:"model"`
	ModulesModel          basetypes.SetValue    `tfsdk:"modules_model"`
	OperStatus            basetypes.StringValue `tfsdk:"oper_status"`
	PortMode              basetypes.StringValue `tfsdk:"port_mode"`
	Role                  basetypes.StringValue `tfsdk:"role"`
	SerialNumber          basetypes.StringValue `tfsdk:"serial_number"`
	SwitchDbId            basetypes.StringValue `tfsdk:"switch_db_id"`
	Uuid                  basetypes.StringValue `tfsdk:"uuid"`
	VdcId                 basetypes.StringValue `tfsdk:"vdc_id"`
	VdcMac                basetypes.StringValue `tfsdk:"vdc_mac"`
	Version               basetypes.StringValue `tfsdk:"version"`
	state                 attr.ValueState
}

func (v DevicesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 24)

	var val tftypes.Value
	var err error

	attrTypes["breakout"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["config_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["device_index"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_auth_protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["discovery_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gateway"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["image_policy"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["managable"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["model"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modules_model"] = basetypes.SetType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["oper_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["role"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial_number"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["switch_db_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vdc_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vdc_mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 24)

		val, err = v.Breakout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["breakout"] = val

		val, err = v.ConfigStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config_status"] = val

		val, err = v.DeviceIndex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["device_index"] = val

		val, err = v.DiscoveryAuthProtocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_auth_protocol"] = val

		val, err = v.DiscoveryPassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_password"] = val

		val, err = v.DiscoveryStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_status"] = val

		val, err = v.DiscoveryType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_type"] = val

		val, err = v.DiscoveryUsername.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["discovery_username"] = val

		val, err = v.Gateway.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gateway"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.ImagePolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["image_policy"] = val

		val, err = v.Managable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["managable"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.ModulesModel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modules_model"] = val

		val, err = v.OperStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oper_status"] = val

		val, err = v.PortMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_mode"] = val

		val, err = v.Role.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role"] = val

		val, err = v.SerialNumber.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial_number"] = val

		val, err = v.SwitchDbId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["switch_db_id"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		val, err = v.VdcId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_id"] = val

		val, err = v.VdcMac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vdc_mac"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DevicesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DevicesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DevicesValue) String() string {
	return "DevicesValue"
}

func (v DevicesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	modulesModelVal, d := types.SetValue(types.StringType, v.ModulesModel.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"breakout":                basetypes.StringType{},
			"config_status":           basetypes.StringType{},
			"device_index":            basetypes.StringType{},
			"discovery_auth_protocol": basetypes.StringType{},
			"discovery_password":      basetypes.StringType{},
			"discovery_status":        basetypes.StringType{},
			"discovery_type":          basetypes.StringType{},
			"discovery_username":      basetypes.StringType{},
			"gateway":                 basetypes.StringType{},
			"hostname":                basetypes.StringType{},
			"image_policy":            basetypes.StringType{},
			"managable":               basetypes.BoolType{},
			"mode":                    basetypes.StringType{},
			"model":                   basetypes.StringType{},
			"modules_model": basetypes.SetType{
				ElemType: types.StringType,
			},
			"oper_status":   basetypes.StringType{},
			"port_mode":     basetypes.StringType{},
			"role":          basetypes.StringType{},
			"serial_number": basetypes.StringType{},
			"switch_db_id":  basetypes.StringType{},
			"uuid":          basetypes.StringType{},
			"vdc_id":        basetypes.StringType{},
			"vdc_mac":       basetypes.StringType{},
			"version":       basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"breakout":                basetypes.StringType{},
			"config_status":           basetypes.StringType{},
			"device_index":            basetypes.StringType{},
			"discovery_auth_protocol": basetypes.StringType{},
			"discovery_password":      basetypes.StringType{},
			"discovery_status":        basetypes.StringType{},
			"discovery_type":          basetypes.StringType{},
			"discovery_username":      basetypes.StringType{},
			"gateway":                 basetypes.StringType{},
			"hostname":                basetypes.StringType{},
			"image_policy":            basetypes.StringType{},
			"managable":               basetypes.BoolType{},
			"mode":                    basetypes.StringType{},
			"model":                   basetypes.StringType{},
			"modules_model": basetypes.SetType{
				ElemType: types.StringType,
			},
			"oper_status":   basetypes.StringType{},
			"port_mode":     basetypes.StringType{},
			"role":          basetypes.StringType{},
			"serial_number": basetypes.StringType{},
			"switch_db_id":  basetypes.StringType{},
			"uuid":          basetypes.StringType{},
			"vdc_id":        basetypes.StringType{},
			"vdc_mac":       basetypes.StringType{},
			"version":       basetypes.StringType{},
		},
		map[string]attr.Value{
			"breakout":                v.Breakout,
			"config_status":           v.ConfigStatus,
			"device_index":            v.DeviceIndex,
			"discovery_auth_protocol": v.DiscoveryAuthProtocol,
			"discovery_password":      v.DiscoveryPassword,
			"discovery_status":        v.DiscoveryStatus,
			"discovery_type":          v.DiscoveryType,
			"discovery_username":      v.DiscoveryUsername,
			"gateway":                 v.Gateway,
			"hostname":                v.Hostname,
			"image_policy":            v.ImagePolicy,
			"managable":               v.Managable,
			"mode":                    v.Mode,
			"model":                   v.Model,
			"modules_model":           modulesModelVal,
			"oper_status":             v.OperStatus,
			"port_mode":               v.PortMode,
			"role":                    v.Role,
			"serial_number":           v.SerialNumber,
			"switch_db_id":            v.SwitchDbId,
			"uuid":                    v.Uuid,
			"vdc_id":                  v.VdcId,
			"vdc_mac":                 v.VdcMac,
			"version":                 v.Version,
		})

	return objVal, diags
}

func (v DevicesValue) Equal(o attr.Value) bool {
	other, ok := o.(DevicesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Breakout.Equal(other.Breakout) {
		return false
	}

	if !v.ConfigStatus.Equal(other.ConfigStatus) {
		return false
	}

	if !v.DeviceIndex.Equal(other.DeviceIndex) {
		return false
	}

	if !v.DiscoveryAuthProtocol.Equal(other.DiscoveryAuthProtocol) {
		return false
	}

	if !v.DiscoveryPassword.Equal(other.DiscoveryPassword) {
		return false
	}

	if !v.DiscoveryStatus.Equal(other.DiscoveryStatus) {
		return false
	}

	if !v.DiscoveryType.Equal(other.DiscoveryType) {
		return false
	}

	if !v.DiscoveryUsername.Equal(other.DiscoveryUsername) {
		return false
	}

	if !v.Gateway.Equal(other.Gateway) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.ImagePolicy.Equal(other.ImagePolicy) {
		return false
	}

	if !v.Managable.Equal(other.Managable) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.ModulesModel.Equal(other.ModulesModel) {
		return false
	}

	if !v.OperStatus.Equal(other.OperStatus) {
		return false
	}

	if !v.PortMode.Equal(other.PortMode) {
		return false
	}

	if !v.Role.Equal(other.Role) {
		return false
	}

	if !v.SerialNumber.Equal(other.SerialNumber) {
		return false
	}

	if !v.SwitchDbId.Equal(other.SwitchDbId) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	if !v.VdcId.Equal(other.VdcId) {
		return false
	}

	if !v.VdcMac.Equal(other.VdcMac) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v DevicesValue) Type(ctx context.Context) attr.Type {
	return DevicesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DevicesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"breakout":                basetypes.StringType{},
		"config_status":           basetypes.StringType{},
		"device_index":            basetypes.StringType{},
		"discovery_auth_protocol": basetypes.StringType{},
		"discovery_password":      basetypes.StringType{},
		"discovery_status":        basetypes.StringType{},
		"discovery_type":          basetypes.StringType{},
		"discovery_username":      basetypes.StringType{},
		"gateway":                 basetypes.StringType{},
		"hostname":                basetypes.StringType{},
		"image_policy":            basetypes.StringType{},
		"managable":               basetypes.BoolType{},
		"mode":                    basetypes.StringType{},
		"model":                   basetypes.StringType{},
		"modules_model": basetypes.SetType{
			ElemType: types.StringType,
		},
		"oper_status":   basetypes.StringType{},
		"port_mode":     basetypes.StringType{},
		"role":          basetypes.StringType{},
		"serial_number": basetypes.StringType{},
		"switch_db_id":  basetypes.StringType{},
		"uuid":          basetypes.StringType{},
		"vdc_id":        basetypes.StringType{},
		"vdc_mac":       basetypes.StringType{},
		"version":       basetypes.StringType{},
	}
}
