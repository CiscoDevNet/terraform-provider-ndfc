// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

//template:begin testAcc
func TestAccNdfcNetwork(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccNdfcNetworkConfigMinimal,
			},
			{
				Config: testAccNdfcNetworkConfigAll,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("ndfc_network.test", "fabric_name", "CML"),
					resource.TestCheckResourceAttr("ndfc_network.test", "network_name", "NET1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "display_name", "NET1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "network_template", "Default_Network_Universal"),
					resource.TestCheckResourceAttr("ndfc_network.test", "network_extension_template", "Default_Network_Extension_Universal"),
					resource.TestCheckResourceAttr("ndfc_network.test", "gateway_ipv4_address", "192.0.2.1/24"),
					resource.TestCheckResourceAttr("ndfc_network.test", "vlan_id", "1500"),
					resource.TestCheckResourceAttr("ndfc_network.test", "gateway_ipv6_address", "2001:db8::1/64,2001:db9::1/64"),
					resource.TestCheckResourceAttr("ndfc_network.test", "layer2_only", "false"),
					resource.TestCheckResourceAttr("ndfc_network.test", "arp_suppression", "false"),
					resource.TestCheckResourceAttr("ndfc_network.test", "ingress_replication", "false"),
					resource.TestCheckResourceAttr("ndfc_network.test", "multicast_group", "233.1.1.1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "dhcp_relay_servers.0.address", "2.3.4.5"),
					resource.TestCheckResourceAttr("ndfc_network.test", "dhcp_relay_servers.0.vrf", "VRF1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "dhcp_relay_loopback_id", "134"),
					resource.TestCheckResourceAttr("ndfc_network.test", "vlan_name", "VLANXXX"),
					resource.TestCheckResourceAttr("ndfc_network.test", "interface_description", "My int description"),
					resource.TestCheckResourceAttr("ndfc_network.test", "mtu", "9200"),
					resource.TestCheckResourceAttr("ndfc_network.test", "loopback_routing_tag", "11111"),
					resource.TestCheckResourceAttr("ndfc_network.test", "trm", "true"),
					resource.TestCheckResourceAttr("ndfc_network.test", "secondary_gateway_1", "192.168.2.1/24"),
					resource.TestCheckResourceAttr("ndfc_network.test", "secondary_gateway_2", "192.168.3.1/24"),
					resource.TestCheckResourceAttr("ndfc_network.test", "secondary_gateway_3", "192.168.4.1/24"),
					resource.TestCheckResourceAttr("ndfc_network.test", "secondary_gateway_4", "192.168.5.1/24"),
					resource.TestCheckResourceAttr("ndfc_network.test", "route_target_both", "true"),
					resource.TestCheckResourceAttr("ndfc_network.test", "netflow", "false"),
					resource.TestCheckResourceAttr("ndfc_network.test", "svi_netflow_monitor", "MON1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "vlan_netflow_monitor", "MON1"),
					resource.TestCheckResourceAttr("ndfc_network.test", "l3_gatway_border", "true"),
					resource.TestCheckResourceAttr("ndfc_network.test", "attachments.0.serial_number", "9DBYO6WQJ46"),
					resource.TestCheckResourceAttr("ndfc_network.test", "attachments.0.attach_switch_ports", "Ethernet1/10,Ethernet1/11"),
					resource.TestCheckResourceAttr("ndfc_network.test", "attachments.0.vlan_id", "2010"),
				),
			},
			{
				ResourceName:  "ndfc_network.test",
				ImportState:   true,
				ImportStateId: "CML:NET1",
			},
		},
	})
}

//template:end testAcc

//template:begin testAccConfigMinimal
const testAccNdfcNetworkConfigMinimal = `
resource "ndfc_vrf" "test" {
  fabric_name = "CML"
  vrf_name = "VRF1"
}
resource "ndfc_network" "test" {
	fabric_name = "CML"
	network_name = "NET1"
	vrf_name = ndfc_vrf.test.vrf_name
}
`

//template:end testAccConfigMinimal

//template:begin testAccConfigAll
const testAccNdfcNetworkConfigAll = `
resource "ndfc_vrf" "test" {
  fabric_name = "CML"
  vrf_name = "VRF1"
}
resource "ndfc_network" "test" {
	fabric_name = "CML"
	network_name = "NET1"
	display_name = "NET1"
	network_template = "Default_Network_Universal"
	network_extension_template = "Default_Network_Extension_Universal"
	vrf_name = ndfc_vrf.test.vrf_name
	gateway_ipv4_address = "192.0.2.1/24"
	vlan_id = 1500
	gateway_ipv6_address = "2001:db8::1/64,2001:db9::1/64"
	layer2_only = false
	arp_suppression = false
	ingress_replication = false
	multicast_group = "233.1.1.1"
	dhcp_relay_servers = [{
		address = "2.3.4.5"
		vrf = "VRF1"
	}]
	dhcp_relay_loopback_id = 134
	vlan_name = "VLANXXX"
	interface_description = "My int description"
	mtu = 9200
	loopback_routing_tag = 11111
	trm = true
	secondary_gateway_1 = "192.168.2.1/24"
	secondary_gateway_2 = "192.168.3.1/24"
	secondary_gateway_3 = "192.168.4.1/24"
	secondary_gateway_4 = "192.168.5.1/24"
	route_target_both = true
	netflow = false
	svi_netflow_monitor = "MON1"
	vlan_netflow_monitor = "MON1"
	l3_gatway_border = true
	attachments = [{
		serial_number = "9DBYO6WQJ46"
		attach_switch_ports = "Ethernet1/10,Ethernet1/11"
		vlan_id = 2010
	}]
}
`

//template:end testAccConfigAll
