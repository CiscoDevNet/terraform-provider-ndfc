// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type InterfaceEthernet struct {
	Id                   types.String `tfsdk:"id"`
	SerialNumber         types.String `tfsdk:"serial_number"`
	InterfaceName        types.String `tfsdk:"interface_name"`
	Policy               types.String `tfsdk:"policy"`
	BpduGuard            types.String `tfsdk:"bpdu_guard"`
	PortTypeFast         types.Bool   `tfsdk:"port_type_fast"`
	Mtu                  types.String `tfsdk:"mtu"`
	Speed                types.String `tfsdk:"speed"`
	AccessVlan           types.Int64  `tfsdk:"access_vlan"`
	InterfaceDescription types.String `tfsdk:"interface_description"`
	OrphanPort           types.Bool   `tfsdk:"orphan_port"`
	FreeformConfig       types.String `tfsdk:"freeform_config"`
	AdminState           types.Bool   `tfsdk:"admin_state"`
	Ptp                  types.Bool   `tfsdk:"ptp"`
	Netflow              types.Bool   `tfsdk:"netflow"`
	NetflowMonitor       types.String `tfsdk:"netflow_monitor"`
	NetflowSampler       types.String `tfsdk:"netflow_sampler"`
	AllowedVlans         types.String `tfsdk:"allowed_vlans"`
	NativeVlan           types.Int64  `tfsdk:"native_vlan"`
}

//template:end types

//template:begin getPath
func (data InterfaceEthernet) getPath() string {
	return "/lan-fabric/rest/interface"
}

//template:end getPath

func (data InterfaceEthernet) toBody(ctx context.Context) string {
	body := ""
	if !data.SerialNumber.IsNull() && !data.SerialNumber.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.serialNumber", data.SerialNumber.ValueString())
	}
	if !data.InterfaceName.IsNull() && !data.InterfaceName.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.ifName", data.InterfaceName.ValueString())
	}
	if !data.Policy.IsNull() && !data.Policy.IsUnknown() {
		body, _ = sjson.Set(body, "policy", data.Policy.ValueString())
	}
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.INTF_NAME", data.InterfaceName.ValueString())
	if !data.BpduGuard.IsNull() && !data.BpduGuard.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.BPDUGUARD_ENABLED", data.BpduGuard.ValueString())
	}
	if !data.PortTypeFast.IsNull() && !data.PortTypeFast.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.PORTTYPE_FAST_ENABLED", fmt.Sprint(data.PortTypeFast.ValueBool()))
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.MTU", data.Mtu.ValueString())
	}
	if !data.Speed.IsNull() && !data.Speed.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.SPEED", data.Speed.ValueString())
	}
	if !data.AccessVlan.IsNull() && !data.AccessVlan.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ACCESS_VLAN", fmt.Sprint(data.AccessVlan.ValueInt64()))
	}
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.DESC", data.InterfaceDescription.ValueString())
	if !data.OrphanPort.IsNull() && !data.OrphanPort.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ENABLE_ORPHAN_PORT", fmt.Sprint(data.OrphanPort.ValueBool()))
	}
	body, _ = sjson.Set(body, "interfaces.0.nvPairs.CONF", data.FreeformConfig.ValueString())
	if !data.AdminState.IsNull() && !data.AdminState.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ADMIN_STATE", fmt.Sprint(data.AdminState.ValueBool()))
	}
	if !data.Ptp.IsNull() && !data.Ptp.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.PTP", fmt.Sprint(data.Ptp.ValueBool()))
	}
	if !data.Netflow.IsNull() && !data.Netflow.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ENABLE_NETFLOW", fmt.Sprint(data.Netflow.ValueBool()))
	}
	if !data.NetflowMonitor.IsNull() && !data.NetflowMonitor.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.NETFLOW_MONITOR", data.NetflowMonitor.ValueString())
	}
	if !data.NetflowSampler.IsNull() && !data.NetflowSampler.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.NETFLOW_SAMPLER", data.NetflowSampler.ValueString())
	}
	if !data.AllowedVlans.IsNull() && !data.AllowedVlans.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.ALLOWED_VLANS", data.AllowedVlans.ValueString())
	}
	if !data.NativeVlan.IsNull() && !data.NativeVlan.IsUnknown() {
		body, _ = sjson.Set(body, "interfaces.0.nvPairs.NATIVE_VLAN", fmt.Sprint(data.NativeVlan.ValueInt64()))
	}
	return body
}

func (data *InterfaceEthernet) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("0.interfaces.0.serialNumber"); value.Exists() && value.String() != "" {
		data.SerialNumber = types.StringValue(value.String())
	} else {
		data.SerialNumber = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.ifName"); value.Exists() && value.String() != "" {
		data.InterfaceName = types.StringValue(value.String())
	} else {
		data.InterfaceName = types.StringNull()
	}
	if value := res.Get("0.policy"); value.Exists() && value.String() != "" {
		data.Policy = types.StringValue(value.String())
	} else {
		data.Policy = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.BPDUGUARD_ENABLED"); value.Exists() && value.String() != "" {
		data.BpduGuard = types.StringValue(value.String())
	} else {
		data.BpduGuard = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.PORTTYPE_FAST_ENABLED"); value.Exists() && value.String() != "" {
		data.PortTypeFast = types.BoolValue(value.Bool())
	} else {
		data.PortTypeFast = types.BoolNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.MTU"); value.Exists() && value.String() != "" {
		data.Mtu = types.StringValue(value.String())
	} else {
		data.Mtu = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.SPEED"); value.Exists() && value.String() != "" {
		data.Speed = types.StringValue(value.String())
	} else {
		data.Speed = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ACCESS_VLAN"); value.Exists() && value.String() != "" {
		data.AccessVlan = types.Int64Value(value.Int())
	} else {
		data.AccessVlan = types.Int64Null()
	}
	if value := res.Get("0.interfaces.0.nvPairs.DESC"); value.Exists() && value.String() != "" {
		data.InterfaceDescription = types.StringValue(value.String())
	} else {
		data.InterfaceDescription = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ENABLE_ORPHAN_PORT"); value.Exists() && value.String() != "" {
		data.OrphanPort = types.BoolValue(value.Bool())
	} else {
		data.OrphanPort = types.BoolNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.CONF"); value.Exists() && value.String() != "" {
		data.FreeformConfig = types.StringValue(value.String())
	} else {
		data.FreeformConfig = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ADMIN_STATE"); value.Exists() && value.String() != "" {
		data.AdminState = types.BoolValue(value.Bool())
	} else {
		data.AdminState = types.BoolNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.PTP"); value.Exists() && value.String() != "" {
		data.Ptp = types.BoolValue(value.Bool())
	} else {
		data.Ptp = types.BoolNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ENABLE_NETFLOW"); value.Exists() && value.String() != "" {
		data.Netflow = types.BoolValue(value.Bool())
	} else {
		data.Netflow = types.BoolNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.NETFLOW_MONITOR"); value.Exists() && value.String() != "" {
		data.NetflowMonitor = types.StringValue(value.String())
	} else {
		data.NetflowMonitor = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.NETFLOW_SAMPLER"); value.Exists() && value.String() != "" {
		data.NetflowSampler = types.StringValue(value.String())
	} else {
		data.NetflowSampler = types.StringNull()
	}
	if value := res.Get("0.interfaces.0.nvPairs.ALLOWED_VLANS"); value.Exists() && value.String() != "" {
		data.AllowedVlans = types.StringValue(value.String())
	} else {
		data.AllowedVlans = types.StringNull()
	}
}
